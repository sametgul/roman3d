
BP_17_RW_Perfboard_Matlab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008810  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800891c  0800891c  0001891c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008984  08008984  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08008984  08008984  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008984  08008984  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008984  08008984  00018984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008988  08008988  00018988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800898c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001314  2000017c  08008b08  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001490  08008b08  00021490  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013133  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030e9  00000000  00000000  000332d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  000363c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001038  00000000  00000000  00037578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a888  00000000  00000000  000385b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d79  00000000  00000000  00052e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e820  00000000  00000000  00067bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f63d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004920  00000000  00000000  000f6424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08008904 	.word	0x08008904

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08008904 	.word	0x08008904

0800014c <create_DAC_cmd>:
/* USER CODE BEGIN 0 */

// This function creates the needed command to send DAC chips
// The least 12 bits of value variable is evaluated, thus, assign 12 bit values to this variable.
uint16_t create_DAC_cmd(uint16_t value, uint8_t dac_ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	80fb      	strh	r3, [r7, #6]
 8000158:	4613      	mov	r3, r2
 800015a:	717b      	strb	r3, [r7, #5]
	uint16_t data = 0;
 800015c:	2300      	movs	r3, #0
 800015e:	81fb      	strh	r3, [r7, #14]

	value = 4095 - value;
 8000160:	88fb      	ldrh	r3, [r7, #6]
 8000162:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8000166:	330f      	adds	r3, #15
 8000168:	80fb      	strh	r3, [r7, #6]

	data |= (dac_ch << 15); 	// If dac_ch is 0, then DAC_A, and if dac_ch is 1, DAC_B will be selected.
 800016a:	797b      	ldrb	r3, [r7, #5]
 800016c:	03db      	lsls	r3, r3, #15
 800016e:	b21a      	sxth	r2, r3
 8000170:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000174:	4313      	orrs	r3, r2
 8000176:	b21b      	sxth	r3, r3
 8000178:	81fb      	strh	r3, [r7, #14]
	data |= (0      << 14); 	// V_ref Input Buffer = Unbuffered
	data |= (1      << 13); 	// Output Gain is 1
 800017a:	89fb      	ldrh	r3, [r7, #14]
 800017c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000180:	81fb      	strh	r3, [r7, #14]
	data |= (1      << 12);     // Active mode operation
 8000182:	89fb      	ldrh	r3, [r7, #14]
 8000184:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000188:	81fb      	strh	r3, [r7, #14]
	data |= (value & 0x0FFF);	// 12 bit of value assigned to data
 800018a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800018e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000192:	b21a      	sxth	r2, r3
 8000194:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000198:	4313      	orrs	r3, r2
 800019a:	b21b      	sxth	r3, r3
 800019c:	81fb      	strh	r3, [r7, #14]

	return data;
 800019e:	89fb      	ldrh	r3, [r7, #14]
}
 80001a0:	4618      	mov	r0, r3
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
	...

080001ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ac:	b598      	push	{r3, r4, r7, lr}
 80001ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b0:	f000 fc94 	bl	8000adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b4:	f000 f94c 	bl	8000450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b8:	f000 fad8 	bl	800076c <MX_GPIO_Init>
  MX_SPI2_Init();
 80001bc:	f000 f9a2 	bl	8000504 <MX_SPI2_Init>
  MX_TIM2_Init();
 80001c0:	f000 f9d8 	bl	8000574 <MX_TIM2_Init>
  MX_TIM3_Init();
 80001c4:	f000 fa2a 	bl	800061c <MX_TIM3_Init>
  MX_TIM4_Init();
 80001c8:	f000 fa7c 	bl	80006c4 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 80001cc:	f007 feaa 	bl	8007f24 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	// Encoder Initialization
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80001d0:	213c      	movs	r1, #60	; 0x3c
 80001d2:	4894      	ldr	r0, [pc, #592]	; (8000424 <main+0x278>)
 80001d4:	f003 fbf8 	bl	80039c8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80001d8:	213c      	movs	r1, #60	; 0x3c
 80001da:	4893      	ldr	r0, [pc, #588]	; (8000428 <main+0x27c>)
 80001dc:	f003 fbf4 	bl	80039c8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80001e0:	213c      	movs	r1, #60	; 0x3c
 80001e2:	4892      	ldr	r0, [pc, #584]	; (800042c <main+0x280>)
 80001e4:	f003 fbf0 	bl	80039c8 <HAL_TIM_Encoder_Start>

	// SPI Initialization
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_SET); // Chip selects are set HIGH
 80001e8:	2201      	movs	r2, #1
 80001ea:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80001ee:	4890      	ldr	r0, [pc, #576]	; (8000430 <main+0x284>)
 80001f0:	f000 ff68 	bl	80010c4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (flag == 1) {
 80001f4:	4b8f      	ldr	r3, [pc, #572]	; (8000434 <main+0x288>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	f040 8097 	bne.w	800032c <main+0x180>

			///////////////////////////////WRITE to DAC///////////////////////////////////
			// Reading 12-bit DAC values from MATLAB
			dac_value_12bit[0] = (received_data[0] | (received_data[1] << 8));
 80001fe:	4b8e      	ldr	r3, [pc, #568]	; (8000438 <main+0x28c>)
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	b21a      	sxth	r2, r3
 8000204:	4b8c      	ldr	r3, [pc, #560]	; (8000438 <main+0x28c>)
 8000206:	785b      	ldrb	r3, [r3, #1]
 8000208:	021b      	lsls	r3, r3, #8
 800020a:	b21b      	sxth	r3, r3
 800020c:	4313      	orrs	r3, r2
 800020e:	b21b      	sxth	r3, r3
 8000210:	b29a      	uxth	r2, r3
 8000212:	4b8a      	ldr	r3, [pc, #552]	; (800043c <main+0x290>)
 8000214:	801a      	strh	r2, [r3, #0]
			dac_value_12bit[1] = (received_data[2] | (received_data[3] << 8));
 8000216:	4b88      	ldr	r3, [pc, #544]	; (8000438 <main+0x28c>)
 8000218:	789b      	ldrb	r3, [r3, #2]
 800021a:	b21a      	sxth	r2, r3
 800021c:	4b86      	ldr	r3, [pc, #536]	; (8000438 <main+0x28c>)
 800021e:	78db      	ldrb	r3, [r3, #3]
 8000220:	021b      	lsls	r3, r3, #8
 8000222:	b21b      	sxth	r3, r3
 8000224:	4313      	orrs	r3, r2
 8000226:	b21b      	sxth	r3, r3
 8000228:	b29a      	uxth	r2, r3
 800022a:	4b84      	ldr	r3, [pc, #528]	; (800043c <main+0x290>)
 800022c:	805a      	strh	r2, [r3, #2]
			dac_value_12bit[2] = (received_data[4] | (received_data[5] << 8));
 800022e:	4b82      	ldr	r3, [pc, #520]	; (8000438 <main+0x28c>)
 8000230:	791b      	ldrb	r3, [r3, #4]
 8000232:	b21a      	sxth	r2, r3
 8000234:	4b80      	ldr	r3, [pc, #512]	; (8000438 <main+0x28c>)
 8000236:	795b      	ldrb	r3, [r3, #5]
 8000238:	021b      	lsls	r3, r3, #8
 800023a:	b21b      	sxth	r3, r3
 800023c:	4313      	orrs	r3, r2
 800023e:	b21b      	sxth	r3, r3
 8000240:	b29a      	uxth	r2, r3
 8000242:	4b7e      	ldr	r3, [pc, #504]	; (800043c <main+0x290>)
 8000244:	809a      	strh	r2, [r3, #4]

			// Writing to MCP4921
			dac_command = create_DAC_cmd(dac_value_12bit[0], 0);
 8000246:	4b7d      	ldr	r3, [pc, #500]	; (800043c <main+0x290>)
 8000248:	881b      	ldrh	r3, [r3, #0]
 800024a:	2100      	movs	r1, #0
 800024c:	4618      	mov	r0, r3
 800024e:	f7ff ff7d 	bl	800014c <create_DAC_cmd>
 8000252:	4603      	mov	r3, r0
 8000254:	461a      	mov	r2, r3
 8000256:	4b7a      	ldr	r3, [pc, #488]	; (8000440 <main+0x294>)
 8000258:	801a      	strh	r2, [r3, #0]

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800025a:	2200      	movs	r2, #0
 800025c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000260:	4873      	ldr	r0, [pc, #460]	; (8000430 <main+0x284>)
 8000262:	f000 ff2f 	bl	80010c4 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, (uint8_t *) &dac_command, 1, 100);
 8000266:	2364      	movs	r3, #100	; 0x64
 8000268:	2201      	movs	r2, #1
 800026a:	4975      	ldr	r1, [pc, #468]	; (8000440 <main+0x294>)
 800026c:	4875      	ldr	r0, [pc, #468]	; (8000444 <main+0x298>)
 800026e:	f003 f927 	bl	80034c0 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000272:	2201      	movs	r2, #1
 8000274:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000278:	486d      	ldr	r0, [pc, #436]	; (8000430 <main+0x284>)
 800027a:	f000 ff23 	bl	80010c4 <HAL_GPIO_WritePin>

			// Writing to MCP4922 A Channel
			dac_command = create_DAC_cmd(dac_value_12bit[1], 0);
 800027e:	4b6f      	ldr	r3, [pc, #444]	; (800043c <main+0x290>)
 8000280:	885b      	ldrh	r3, [r3, #2]
 8000282:	2100      	movs	r1, #0
 8000284:	4618      	mov	r0, r3
 8000286:	f7ff ff61 	bl	800014c <create_DAC_cmd>
 800028a:	4603      	mov	r3, r0
 800028c:	461a      	mov	r2, r3
 800028e:	4b6c      	ldr	r3, [pc, #432]	; (8000440 <main+0x294>)
 8000290:	801a      	strh	r2, [r3, #0]

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000292:	2200      	movs	r2, #0
 8000294:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000298:	4865      	ldr	r0, [pc, #404]	; (8000430 <main+0x284>)
 800029a:	f000 ff13 	bl	80010c4 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, (uint8_t *) &dac_command, 1, 100);
 800029e:	2364      	movs	r3, #100	; 0x64
 80002a0:	2201      	movs	r2, #1
 80002a2:	4967      	ldr	r1, [pc, #412]	; (8000440 <main+0x294>)
 80002a4:	4867      	ldr	r0, [pc, #412]	; (8000444 <main+0x298>)
 80002a6:	f003 f90b 	bl	80034c0 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80002aa:	2201      	movs	r2, #1
 80002ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002b0:	485f      	ldr	r0, [pc, #380]	; (8000430 <main+0x284>)
 80002b2:	f000 ff07 	bl	80010c4 <HAL_GPIO_WritePin>

			// Writing to MCP4922 B Channel
			dac_command = create_DAC_cmd(dac_value_12bit[2], 1);
 80002b6:	4b61      	ldr	r3, [pc, #388]	; (800043c <main+0x290>)
 80002b8:	889b      	ldrh	r3, [r3, #4]
 80002ba:	2101      	movs	r1, #1
 80002bc:	4618      	mov	r0, r3
 80002be:	f7ff ff45 	bl	800014c <create_DAC_cmd>
 80002c2:	4603      	mov	r3, r0
 80002c4:	461a      	mov	r2, r3
 80002c6:	4b5e      	ldr	r3, [pc, #376]	; (8000440 <main+0x294>)
 80002c8:	801a      	strh	r2, [r3, #0]

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002d0:	4857      	ldr	r0, [pc, #348]	; (8000430 <main+0x284>)
 80002d2:	f000 fef7 	bl	80010c4 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, (uint8_t *) &dac_command, 1, 100);
 80002d6:	2364      	movs	r3, #100	; 0x64
 80002d8:	2201      	movs	r2, #1
 80002da:	4959      	ldr	r1, [pc, #356]	; (8000440 <main+0x294>)
 80002dc:	4859      	ldr	r0, [pc, #356]	; (8000444 <main+0x298>)
 80002de:	f003 f8ef 	bl	80034c0 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80002e2:	2201      	movs	r2, #1
 80002e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002e8:	4851      	ldr	r0, [pc, #324]	; (8000430 <main+0x284>)
 80002ea:	f000 feeb 	bl	80010c4 <HAL_GPIO_WritePin>

			///////////////////////////////READ ENCODERS//////////////////////////////////
			// Reading encoder values from manipulator
			encoder_value[0] = __HAL_TIM_GET_COUNTER(&htim3);
 80002ee:	4b4e      	ldr	r3, [pc, #312]	; (8000428 <main+0x27c>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002f4:	b21a      	sxth	r2, r3
 80002f6:	4b54      	ldr	r3, [pc, #336]	; (8000448 <main+0x29c>)
 80002f8:	801a      	strh	r2, [r3, #0]
			encoder_value[1] = __HAL_TIM_GET_COUNTER(&htim2);
 80002fa:	4b4a      	ldr	r3, [pc, #296]	; (8000424 <main+0x278>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000300:	b21a      	sxth	r2, r3
 8000302:	4b51      	ldr	r3, [pc, #324]	; (8000448 <main+0x29c>)
 8000304:	805a      	strh	r2, [r3, #2]
			encoder_value[2] = __HAL_TIM_GET_COUNTER(&htim4);
 8000306:	4b49      	ldr	r3, [pc, #292]	; (800042c <main+0x280>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800030c:	b21a      	sxth	r2, r3
 800030e:	4b4e      	ldr	r3, [pc, #312]	; (8000448 <main+0x29c>)
 8000310:	809a      	strh	r2, [r3, #4]

			// Sending the read encoder values to MATLAB
			CDC_Transmit_FS((uint8_t*) &encoder_value, 6);
 8000312:	2106      	movs	r1, #6
 8000314:	484c      	ldr	r0, [pc, #304]	; (8000448 <main+0x29c>)
 8000316:	f007 fedd 	bl	80080d4 <CDC_Transmit_FS>

			flag = 0;
 800031a:	4b46      	ldr	r3, [pc, #280]	; (8000434 <main+0x288>)
 800031c:	2200      	movs	r2, #0
 800031e:	701a      	strb	r2, [r3, #0]

			last_time = HAL_GetTick();
 8000320:	f000 fc34 	bl	8000b8c <HAL_GetTick>
 8000324:	4603      	mov	r3, r0
 8000326:	4a49      	ldr	r2, [pc, #292]	; (800044c <main+0x2a0>)
 8000328:	6013      	str	r3, [r2, #0]
 800032a:	e763      	b.n	80001f4 <main+0x48>

		}

		//if 200ms no data is incoming, then make the outputs 0V
		//sending to DAC 2047 value = sending 0V to the motors
		else if(((last_time+200) < HAL_GetTick()) && (flag == 0)){
 800032c:	4b47      	ldr	r3, [pc, #284]	; (800044c <main+0x2a0>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8000334:	f000 fc2a 	bl	8000b8c <HAL_GetTick>
 8000338:	4603      	mov	r3, r0
 800033a:	429c      	cmp	r4, r3
 800033c:	f4bf af5a 	bcs.w	80001f4 <main+0x48>
 8000340:	4b3c      	ldr	r3, [pc, #240]	; (8000434 <main+0x288>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	2b00      	cmp	r3, #0
 8000346:	f47f af55 	bne.w	80001f4 <main+0x48>

			dac_value_12bit[0] = 2047;
 800034a:	4b3c      	ldr	r3, [pc, #240]	; (800043c <main+0x290>)
 800034c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000350:	801a      	strh	r2, [r3, #0]
			dac_value_12bit[1] = 2047;
 8000352:	4b3a      	ldr	r3, [pc, #232]	; (800043c <main+0x290>)
 8000354:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000358:	805a      	strh	r2, [r3, #2]
			dac_value_12bit[2] = 2047;
 800035a:	4b38      	ldr	r3, [pc, #224]	; (800043c <main+0x290>)
 800035c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000360:	809a      	strh	r2, [r3, #4]

			// Writing to MCP4921
			dac_command = create_DAC_cmd(dac_value_12bit[0], 0);
 8000362:	4b36      	ldr	r3, [pc, #216]	; (800043c <main+0x290>)
 8000364:	881b      	ldrh	r3, [r3, #0]
 8000366:	2100      	movs	r1, #0
 8000368:	4618      	mov	r0, r3
 800036a:	f7ff feef 	bl	800014c <create_DAC_cmd>
 800036e:	4603      	mov	r3, r0
 8000370:	461a      	mov	r2, r3
 8000372:	4b33      	ldr	r3, [pc, #204]	; (8000440 <main+0x294>)
 8000374:	801a      	strh	r2, [r3, #0]

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800037c:	482c      	ldr	r0, [pc, #176]	; (8000430 <main+0x284>)
 800037e:	f000 fea1 	bl	80010c4 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, (uint8_t *) &dac_command, 1, 100);
 8000382:	2364      	movs	r3, #100	; 0x64
 8000384:	2201      	movs	r2, #1
 8000386:	492e      	ldr	r1, [pc, #184]	; (8000440 <main+0x294>)
 8000388:	482e      	ldr	r0, [pc, #184]	; (8000444 <main+0x298>)
 800038a:	f003 f899 	bl	80034c0 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800038e:	2201      	movs	r2, #1
 8000390:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000394:	4826      	ldr	r0, [pc, #152]	; (8000430 <main+0x284>)
 8000396:	f000 fe95 	bl	80010c4 <HAL_GPIO_WritePin>

			// Writing to MCP4922 A Channel
			dac_command = create_DAC_cmd(dac_value_12bit[1], 0);
 800039a:	4b28      	ldr	r3, [pc, #160]	; (800043c <main+0x290>)
 800039c:	885b      	ldrh	r3, [r3, #2]
 800039e:	2100      	movs	r1, #0
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff fed3 	bl	800014c <create_DAC_cmd>
 80003a6:	4603      	mov	r3, r0
 80003a8:	461a      	mov	r2, r3
 80003aa:	4b25      	ldr	r3, [pc, #148]	; (8000440 <main+0x294>)
 80003ac:	801a      	strh	r2, [r3, #0]

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80003ae:	2200      	movs	r2, #0
 80003b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003b4:	481e      	ldr	r0, [pc, #120]	; (8000430 <main+0x284>)
 80003b6:	f000 fe85 	bl	80010c4 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, (uint8_t *) &dac_command, 1, 100);
 80003ba:	2364      	movs	r3, #100	; 0x64
 80003bc:	2201      	movs	r2, #1
 80003be:	4920      	ldr	r1, [pc, #128]	; (8000440 <main+0x294>)
 80003c0:	4820      	ldr	r0, [pc, #128]	; (8000444 <main+0x298>)
 80003c2:	f003 f87d 	bl	80034c0 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80003c6:	2201      	movs	r2, #1
 80003c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003cc:	4818      	ldr	r0, [pc, #96]	; (8000430 <main+0x284>)
 80003ce:	f000 fe79 	bl	80010c4 <HAL_GPIO_WritePin>

			// Writing to MCP4922 B Channel
			dac_command = create_DAC_cmd(dac_value_12bit[2], 1);
 80003d2:	4b1a      	ldr	r3, [pc, #104]	; (800043c <main+0x290>)
 80003d4:	889b      	ldrh	r3, [r3, #4]
 80003d6:	2101      	movs	r1, #1
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff feb7 	bl	800014c <create_DAC_cmd>
 80003de:	4603      	mov	r3, r0
 80003e0:	461a      	mov	r2, r3
 80003e2:	4b17      	ldr	r3, [pc, #92]	; (8000440 <main+0x294>)
 80003e4:	801a      	strh	r2, [r3, #0]

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ec:	4810      	ldr	r0, [pc, #64]	; (8000430 <main+0x284>)
 80003ee:	f000 fe69 	bl	80010c4 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, (uint8_t *) &dac_command, 1, 100);
 80003f2:	2364      	movs	r3, #100	; 0x64
 80003f4:	2201      	movs	r2, #1
 80003f6:	4912      	ldr	r1, [pc, #72]	; (8000440 <main+0x294>)
 80003f8:	4812      	ldr	r0, [pc, #72]	; (8000444 <main+0x298>)
 80003fa:	f003 f861 	bl	80034c0 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80003fe:	2201      	movs	r2, #1
 8000400:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000404:	480a      	ldr	r0, [pc, #40]	; (8000430 <main+0x284>)
 8000406:	f000 fe5d 	bl	80010c4 <HAL_GPIO_WritePin>

			// Resetting Encoder counters
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 800040a:	4b07      	ldr	r3, [pc, #28]	; (8000428 <main+0x27c>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	2200      	movs	r2, #0
 8000410:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000412:	4b04      	ldr	r3, [pc, #16]	; (8000424 <main+0x278>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	2200      	movs	r2, #0
 8000418:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_COUNTER(&htim4, 0);
 800041a:	4b04      	ldr	r3, [pc, #16]	; (800042c <main+0x280>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	2200      	movs	r2, #0
 8000420:	625a      	str	r2, [r3, #36]	; 0x24
		if (flag == 1) {
 8000422:	e6e7      	b.n	80001f4 <main+0x48>
 8000424:	200001f0 	.word	0x200001f0
 8000428:	20000238 	.word	0x20000238
 800042c:	20000280 	.word	0x20000280
 8000430:	40010c00 	.word	0x40010c00
 8000434:	200002e0 	.word	0x200002e0
 8000438:	200002d0 	.word	0x200002d0
 800043c:	200002d8 	.word	0x200002d8
 8000440:	200002de 	.word	0x200002de
 8000444:	20000198 	.word	0x20000198
 8000448:	200002c8 	.word	0x200002c8
 800044c:	200002e4 	.word	0x200002e4

08000450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b094      	sub	sp, #80	; 0x50
 8000454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000456:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800045a:	2228      	movs	r2, #40	; 0x28
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f008 fa48 	bl	80088f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000464:	f107 0314 	add.w	r3, r7, #20
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]
 8000470:	60da      	str	r2, [r3, #12]
 8000472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000480:	2301      	movs	r3, #1
 8000482:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000488:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800048e:	2301      	movs	r3, #1
 8000490:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000492:	2302      	movs	r3, #2
 8000494:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800049a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800049c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004a6:	4618      	mov	r0, r3
 80004a8:	f002 fae8 	bl	8002a7c <HAL_RCC_OscConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004b2:	f000 f9a7 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b6:	230f      	movs	r3, #15
 80004b8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ba:	2302      	movs	r3, #2
 80004bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c8:	2300      	movs	r3, #0
 80004ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004cc:	f107 0314 	add.w	r3, r7, #20
 80004d0:	2102      	movs	r1, #2
 80004d2:	4618      	mov	r0, r3
 80004d4:	f002 fd54 	bl	8002f80 <HAL_RCC_ClockConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80004de:	f000 f991 	bl	8000804 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004e2:	2310      	movs	r3, #16
 80004e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	4618      	mov	r0, r3
 80004ee:	f002 fead 	bl	800324c <HAL_RCCEx_PeriphCLKConfig>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80004f8:	f000 f984 	bl	8000804 <Error_Handler>
  }
}
 80004fc:	bf00      	nop
 80004fe:	3750      	adds	r7, #80	; 0x50
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <MX_SPI2_Init+0x68>)
 800050a:	4a19      	ldr	r2, [pc, #100]	; (8000570 <MX_SPI2_Init+0x6c>)
 800050c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <MX_SPI2_Init+0x68>)
 8000510:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000514:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <MX_SPI2_Init+0x68>)
 8000518:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800051c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <MX_SPI2_Init+0x68>)
 8000520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000524:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <MX_SPI2_Init+0x68>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_SPI2_Init+0x68>)
 800052e:	2200      	movs	r2, #0
 8000530:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <MX_SPI2_Init+0x68>)
 8000534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000538:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <MX_SPI2_Init+0x68>)
 800053c:	2200      	movs	r2, #0
 800053e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000540:	4b0a      	ldr	r3, [pc, #40]	; (800056c <MX_SPI2_Init+0x68>)
 8000542:	2200      	movs	r2, #0
 8000544:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_SPI2_Init+0x68>)
 8000548:	2200      	movs	r2, #0
 800054a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <MX_SPI2_Init+0x68>)
 800054e:	2200      	movs	r2, #0
 8000550:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <MX_SPI2_Init+0x68>)
 8000554:	220a      	movs	r2, #10
 8000556:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000558:	4804      	ldr	r0, [pc, #16]	; (800056c <MX_SPI2_Init+0x68>)
 800055a:	f002 ff2d 	bl	80033b8 <HAL_SPI_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8000564:	f000 f94e 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000198 	.word	0x20000198
 8000570:	40003800 	.word	0x40003800

08000574 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08c      	sub	sp, #48	; 0x30
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	2224      	movs	r2, #36	; 0x24
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f008 f9b6 	bl	80088f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000590:	4b21      	ldr	r3, [pc, #132]	; (8000618 <MX_TIM2_Init+0xa4>)
 8000592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000596:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <MX_TIM2_Init+0xa4>)
 800059a:	2200      	movs	r2, #0
 800059c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800059e:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <MX_TIM2_Init+0xa4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80005a4:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <MX_TIM2_Init+0xa4>)
 80005a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ac:	4b1a      	ldr	r3, [pc, #104]	; (8000618 <MX_TIM2_Init+0xa4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b2:	4b19      	ldr	r3, [pc, #100]	; (8000618 <MX_TIM2_Init+0xa4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80005b8:	2303      	movs	r3, #3
 80005ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005c0:	2301      	movs	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005cc:	2300      	movs	r3, #0
 80005ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005d0:	2301      	movs	r3, #1
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	4619      	mov	r1, r3
 80005e2:	480d      	ldr	r0, [pc, #52]	; (8000618 <MX_TIM2_Init+0xa4>)
 80005e4:	f003 f94e 	bl	8003884 <HAL_TIM_Encoder_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80005ee:	f000 f909 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4619      	mov	r1, r3
 80005fe:	4806      	ldr	r0, [pc, #24]	; (8000618 <MX_TIM2_Init+0xa4>)
 8000600:	f003 faf6 	bl	8003bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800060a:	f000 f8fb 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800060e:	bf00      	nop
 8000610:	3730      	adds	r7, #48	; 0x30
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200001f0 	.word	0x200001f0

0800061c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08c      	sub	sp, #48	; 0x30
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	2224      	movs	r2, #36	; 0x24
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f008 f962 	bl	80088f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000638:	4b20      	ldr	r3, [pc, #128]	; (80006bc <MX_TIM3_Init+0xa0>)
 800063a:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <MX_TIM3_Init+0xa4>)
 800063c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800063e:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <MX_TIM3_Init+0xa0>)
 8000640:	2200      	movs	r2, #0
 8000642:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_TIM3_Init+0xa0>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MX_TIM3_Init+0xa0>)
 800064c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000650:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_TIM3_Init+0xa0>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <MX_TIM3_Init+0xa0>)
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800065e:	2303      	movs	r3, #3
 8000660:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000666:	2301      	movs	r3, #1
 8000668:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000672:	2300      	movs	r3, #0
 8000674:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000676:	2301      	movs	r3, #1
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	4619      	mov	r1, r3
 8000688:	480c      	ldr	r0, [pc, #48]	; (80006bc <MX_TIM3_Init+0xa0>)
 800068a:	f003 f8fb 	bl	8003884 <HAL_TIM_Encoder_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000694:	f000 f8b6 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_TIM3_Init+0xa0>)
 80006a6:	f003 faa3 	bl	8003bf0 <HAL_TIMEx_MasterConfigSynchronization>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80006b0:	f000 f8a8 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	3730      	adds	r7, #48	; 0x30
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000238 	.word	0x20000238
 80006c0:	40000400 	.word	0x40000400

080006c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08c      	sub	sp, #48	; 0x30
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2224      	movs	r2, #36	; 0x24
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f008 f90e 	bl	80088f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80006e0:	4b20      	ldr	r3, [pc, #128]	; (8000764 <MX_TIM4_Init+0xa0>)
 80006e2:	4a21      	ldr	r2, [pc, #132]	; (8000768 <MX_TIM4_Init+0xa4>)
 80006e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80006e6:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <MX_TIM4_Init+0xa0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_TIM4_Init+0xa0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <MX_TIM4_Init+0xa0>)
 80006f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_TIM4_Init+0xa0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_TIM4_Init+0xa0>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000706:	2303      	movs	r3, #3
 8000708:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800070e:	2301      	movs	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800071e:	2301      	movs	r3, #1
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	4619      	mov	r1, r3
 8000730:	480c      	ldr	r0, [pc, #48]	; (8000764 <MX_TIM4_Init+0xa0>)
 8000732:	f003 f8a7 	bl	8003884 <HAL_TIM_Encoder_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800073c:	f000 f862 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_TIM4_Init+0xa0>)
 800074e:	f003 fa4f 	bl	8003bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000758:	f000 f854 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	3730      	adds	r7, #48	; 0x30
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000280 	.word	0x20000280
 8000768:	40000800 	.word	0x40000800

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 0310 	add.w	r3, r7, #16
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <MX_GPIO_Init+0x90>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	4a1d      	ldr	r2, [pc, #116]	; (80007fc <MX_GPIO_Init+0x90>)
 8000786:	f043 0320 	orr.w	r3, r3, #32
 800078a:	6193      	str	r3, [r2, #24]
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_GPIO_Init+0x90>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f003 0320 	and.w	r3, r3, #32
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_GPIO_Init+0x90>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a17      	ldr	r2, [pc, #92]	; (80007fc <MX_GPIO_Init+0x90>)
 800079e:	f043 0304 	orr.w	r3, r3, #4
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_GPIO_Init+0x90>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0304 	and.w	r3, r3, #4
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_GPIO_Init+0x90>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a11      	ldr	r2, [pc, #68]	; (80007fc <MX_GPIO_Init+0x90>)
 80007b6:	f043 0308 	orr.w	r3, r3, #8
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_GPIO_Init+0x90>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f003 0308 	and.w	r3, r3, #8
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80007ce:	480c      	ldr	r0, [pc, #48]	; (8000800 <MX_GPIO_Init+0x94>)
 80007d0:	f000 fc78 	bl	80010c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80007d4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80007d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2302      	movs	r3, #2
 80007e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	4619      	mov	r1, r3
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_GPIO_Init+0x94>)
 80007ee:	f000 fae5 	bl	8000dbc <HAL_GPIO_Init>

}
 80007f2:	bf00      	nop
 80007f4:	3720      	adds	r7, #32
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000
 8000800:	40010c00 	.word	0x40010c00

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	e7fe      	b.n	800080c <Error_Handler+0x8>
	...

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <HAL_MspInit+0x5c>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	4a14      	ldr	r2, [pc, #80]	; (800086c <HAL_MspInit+0x5c>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6193      	str	r3, [r2, #24]
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_MspInit+0x5c>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <HAL_MspInit+0x5c>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <HAL_MspInit+0x5c>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	61d3      	str	r3, [r2, #28]
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <HAL_MspInit+0x5c>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <HAL_MspInit+0x60>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	4a04      	ldr	r2, [pc, #16]	; (8000870 <HAL_MspInit+0x60>)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	40021000 	.word	0x40021000
 8000870:	40010000 	.word	0x40010000

08000874 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <HAL_SPI_MspInit+0x74>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d124      	bne.n	80008de <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_SPI_MspInit+0x78>)
 8000896:	69db      	ldr	r3, [r3, #28]
 8000898:	4a14      	ldr	r2, [pc, #80]	; (80008ec <HAL_SPI_MspInit+0x78>)
 800089a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089e:	61d3      	str	r3, [r2, #28]
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_SPI_MspInit+0x78>)
 80008a2:	69db      	ldr	r3, [r3, #28]
 80008a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <HAL_SPI_MspInit+0x78>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <HAL_SPI_MspInit+0x78>)
 80008b2:	f043 0308 	orr.w	r3, r3, #8
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <HAL_SPI_MspInit+0x78>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f003 0308 	and.w	r3, r3, #8
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80008c4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80008c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <HAL_SPI_MspInit+0x7c>)
 80008da:	f000 fa6f 	bl	8000dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80008de:	bf00      	nop
 80008e0:	3720      	adds	r7, #32
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40003800 	.word	0x40003800
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40010c00 	.word	0x40010c00

080008f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	; 0x30
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0320 	add.w	r3, r7, #32
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000912:	d124      	bne.n	800095e <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000914:	4b3d      	ldr	r3, [pc, #244]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x118>)
 8000916:	69db      	ldr	r3, [r3, #28]
 8000918:	4a3c      	ldr	r2, [pc, #240]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x118>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	61d3      	str	r3, [r2, #28]
 8000920:	4b3a      	ldr	r3, [pc, #232]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x118>)
 8000922:	69db      	ldr	r3, [r3, #28]
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	61fb      	str	r3, [r7, #28]
 800092a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092c:	4b37      	ldr	r3, [pc, #220]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x118>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a36      	ldr	r2, [pc, #216]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x118>)
 8000932:	f043 0304 	orr.w	r3, r3, #4
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b34      	ldr	r3, [pc, #208]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x118>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0304 	and.w	r3, r3, #4
 8000940:	61bb      	str	r3, [r7, #24]
 8000942:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000944:	2303      	movs	r3, #3
 8000946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	f107 0320 	add.w	r3, r7, #32
 8000954:	4619      	mov	r1, r3
 8000956:	482e      	ldr	r0, [pc, #184]	; (8000a10 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000958:	f000 fa30 	bl	8000dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800095c:	e052      	b.n	8000a04 <HAL_TIM_Encoder_MspInit+0x110>
  else if(htim_encoder->Instance==TIM3)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a2c      	ldr	r2, [pc, #176]	; (8000a14 <HAL_TIM_Encoder_MspInit+0x120>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d124      	bne.n	80009b2 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000968:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x118>)
 800096a:	69db      	ldr	r3, [r3, #28]
 800096c:	4a27      	ldr	r2, [pc, #156]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x118>)
 800096e:	f043 0302 	orr.w	r3, r3, #2
 8000972:	61d3      	str	r3, [r2, #28]
 8000974:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x118>)
 8000976:	69db      	ldr	r3, [r3, #28]
 8000978:	f003 0302 	and.w	r3, r3, #2
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000980:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x118>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a21      	ldr	r2, [pc, #132]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x118>)
 8000986:	f043 0304 	orr.w	r3, r3, #4
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x118>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f003 0304 	and.w	r3, r3, #4
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000998:	23c0      	movs	r3, #192	; 0xc0
 800099a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	f107 0320 	add.w	r3, r7, #32
 80009a8:	4619      	mov	r1, r3
 80009aa:	4819      	ldr	r0, [pc, #100]	; (8000a10 <HAL_TIM_Encoder_MspInit+0x11c>)
 80009ac:	f000 fa06 	bl	8000dbc <HAL_GPIO_Init>
}
 80009b0:	e028      	b.n	8000a04 <HAL_TIM_Encoder_MspInit+0x110>
  else if(htim_encoder->Instance==TIM4)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a18      	ldr	r2, [pc, #96]	; (8000a18 <HAL_TIM_Encoder_MspInit+0x124>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d123      	bne.n	8000a04 <HAL_TIM_Encoder_MspInit+0x110>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x118>)
 80009be:	69db      	ldr	r3, [r3, #28]
 80009c0:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x118>)
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	61d3      	str	r3, [r2, #28]
 80009c8:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x118>)
 80009ca:	69db      	ldr	r3, [r3, #28]
 80009cc:	f003 0304 	and.w	r3, r3, #4
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x118>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a0c      	ldr	r2, [pc, #48]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x118>)
 80009da:	f043 0308 	orr.w	r3, r3, #8
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x118>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0308 	and.w	r3, r3, #8
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009ec:	23c0      	movs	r3, #192	; 0xc0
 80009ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	f107 0320 	add.w	r3, r7, #32
 80009fc:	4619      	mov	r1, r3
 80009fe:	4807      	ldr	r0, [pc, #28]	; (8000a1c <HAL_TIM_Encoder_MspInit+0x128>)
 8000a00:	f000 f9dc 	bl	8000dbc <HAL_GPIO_Init>
}
 8000a04:	bf00      	nop
 8000a06:	3730      	adds	r7, #48	; 0x30
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40010800 	.word	0x40010800
 8000a14:	40000400 	.word	0x40000400
 8000a18:	40000800 	.word	0x40000800
 8000a1c:	40010c00 	.word	0x40010c00

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x4>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr

08000a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr

08000a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr

08000a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a66:	f000 f87f 	bl	8000b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a76:	f000 fc6e 	bl	8001356 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000f84 	.word	0x20000f84

08000a84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a90:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a92:	490d      	ldr	r1, [pc, #52]	; (8000ac8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a98:	e002      	b.n	8000aa0 <LoopCopyDataInit>

08000a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9e:	3304      	adds	r3, #4

08000aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa4:	d3f9      	bcc.n	8000a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000aa8:	4c0a      	ldr	r4, [pc, #40]	; (8000ad4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aac:	e001      	b.n	8000ab2 <LoopFillZerobss>

08000aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab0:	3204      	adds	r2, #4

08000ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab4:	d3fb      	bcc.n	8000aae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ab6:	f7ff ffe5 	bl	8000a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aba:	f007 fee9 	bl	8008890 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000abe:	f7ff fb75 	bl	80001ac <main>
  bx lr
 8000ac2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac8:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000acc:	0800898c 	.word	0x0800898c
  ldr r2, =_sbss
 8000ad0:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000ad4:	20001490 	.word	0x20001490

08000ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ad8:	e7fe      	b.n	8000ad8 <ADC1_2_IRQHandler>
	...

08000adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_Init+0x28>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <HAL_Init+0x28>)
 8000ae6:	f043 0310 	orr.w	r3, r3, #16
 8000aea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aec:	2003      	movs	r0, #3
 8000aee:	f000 f923 	bl	8000d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af2:	200f      	movs	r0, #15
 8000af4:	f000 f808 	bl	8000b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af8:	f7ff fe8a 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40022000 	.word	0x40022000

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_InitTick+0x54>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_InitTick+0x58>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f93b 	bl	8000da2 <HAL_SYSTICK_Config>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00e      	b.n	8000b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b0f      	cmp	r3, #15
 8000b3a:	d80a      	bhi.n	8000b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	f000 f903 	bl	8000d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b48:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <HAL_InitTick+0x5c>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e000      	b.n	8000b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000004 	.word	0x20000004

08000b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <HAL_IncTick+0x1c>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_IncTick+0x20>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	4a03      	ldr	r2, [pc, #12]	; (8000b88 <HAL_IncTick+0x20>)
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	20000008 	.word	0x20000008
 8000b88:	200002e8 	.word	0x200002e8

08000b8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b90:	4b02      	ldr	r3, [pc, #8]	; (8000b9c <HAL_GetTick+0x10>)
 8000b92:	681b      	ldr	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	200002e8 	.word	0x200002e8

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db0b      	blt.n	8000c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	4906      	ldr	r1, [pc, #24]	; (8000c38 <__NVIC_EnableIRQ+0x34>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	e000e100 	.word	0xe000e100

08000c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	db0a      	blt.n	8000c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	490c      	ldr	r1, [pc, #48]	; (8000c88 <__NVIC_SetPriority+0x4c>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	0112      	lsls	r2, r2, #4
 8000c5c:	b2d2      	uxtb	r2, r2
 8000c5e:	440b      	add	r3, r1
 8000c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c64:	e00a      	b.n	8000c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4908      	ldr	r1, [pc, #32]	; (8000c8c <__NVIC_SetPriority+0x50>)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	3b04      	subs	r3, #4
 8000c74:	0112      	lsls	r2, r2, #4
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	440b      	add	r3, r1
 8000c7a:	761a      	strb	r2, [r3, #24]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000e100 	.word	0xe000e100
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b089      	sub	sp, #36	; 0x24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	f1c3 0307 	rsb	r3, r3, #7
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	bf28      	it	cs
 8000cae:	2304      	movcs	r3, #4
 8000cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d902      	bls.n	8000cc0 <NVIC_EncodePriority+0x30>
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3b03      	subs	r3, #3
 8000cbe:	e000      	b.n	8000cc2 <NVIC_EncodePriority+0x32>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce2:	43d9      	mvns	r1, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	4313      	orrs	r3, r2
         );
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3724      	adds	r7, #36	; 0x24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d04:	d301      	bcc.n	8000d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00f      	b.n	8000d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <SysTick_Config+0x40>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d12:	210f      	movs	r1, #15
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f7ff ff90 	bl	8000c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <SysTick_Config+0x40>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d22:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <SysTick_Config+0x40>)
 8000d24:	2207      	movs	r2, #7
 8000d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	e000e010 	.word	0xe000e010

08000d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ff2d 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b086      	sub	sp, #24
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d60:	f7ff ff42 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	68b9      	ldr	r1, [r7, #8]
 8000d6a:	6978      	ldr	r0, [r7, #20]
 8000d6c:	f7ff ff90 	bl	8000c90 <NVIC_EncodePriority>
 8000d70:	4602      	mov	r2, r0
 8000d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d76:	4611      	mov	r1, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff5f 	bl	8000c3c <__NVIC_SetPriority>
}
 8000d7e:	bf00      	nop
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff35 	bl	8000c04 <__NVIC_EnableIRQ>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ffa2 	bl	8000cf4 <SysTick_Config>
 8000db0:	4603      	mov	r3, r0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b08b      	sub	sp, #44	; 0x2c
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dce:	e169      	b.n	80010a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	69fa      	ldr	r2, [r7, #28]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	f040 8158 	bne.w	800109e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	4a9a      	ldr	r2, [pc, #616]	; (800105c <HAL_GPIO_Init+0x2a0>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d05e      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000df8:	4a98      	ldr	r2, [pc, #608]	; (800105c <HAL_GPIO_Init+0x2a0>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d875      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000dfe:	4a98      	ldr	r2, [pc, #608]	; (8001060 <HAL_GPIO_Init+0x2a4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d058      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000e04:	4a96      	ldr	r2, [pc, #600]	; (8001060 <HAL_GPIO_Init+0x2a4>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d86f      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e0a:	4a96      	ldr	r2, [pc, #600]	; (8001064 <HAL_GPIO_Init+0x2a8>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d052      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000e10:	4a94      	ldr	r2, [pc, #592]	; (8001064 <HAL_GPIO_Init+0x2a8>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d869      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e16:	4a94      	ldr	r2, [pc, #592]	; (8001068 <HAL_GPIO_Init+0x2ac>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d04c      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000e1c:	4a92      	ldr	r2, [pc, #584]	; (8001068 <HAL_GPIO_Init+0x2ac>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d863      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e22:	4a92      	ldr	r2, [pc, #584]	; (800106c <HAL_GPIO_Init+0x2b0>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d046      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000e28:	4a90      	ldr	r2, [pc, #576]	; (800106c <HAL_GPIO_Init+0x2b0>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d85d      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e2e:	2b12      	cmp	r3, #18
 8000e30:	d82a      	bhi.n	8000e88 <HAL_GPIO_Init+0xcc>
 8000e32:	2b12      	cmp	r3, #18
 8000e34:	d859      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e36:	a201      	add	r2, pc, #4	; (adr r2, 8000e3c <HAL_GPIO_Init+0x80>)
 8000e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3c:	08000eb7 	.word	0x08000eb7
 8000e40:	08000e91 	.word	0x08000e91
 8000e44:	08000ea3 	.word	0x08000ea3
 8000e48:	08000ee5 	.word	0x08000ee5
 8000e4c:	08000eeb 	.word	0x08000eeb
 8000e50:	08000eeb 	.word	0x08000eeb
 8000e54:	08000eeb 	.word	0x08000eeb
 8000e58:	08000eeb 	.word	0x08000eeb
 8000e5c:	08000eeb 	.word	0x08000eeb
 8000e60:	08000eeb 	.word	0x08000eeb
 8000e64:	08000eeb 	.word	0x08000eeb
 8000e68:	08000eeb 	.word	0x08000eeb
 8000e6c:	08000eeb 	.word	0x08000eeb
 8000e70:	08000eeb 	.word	0x08000eeb
 8000e74:	08000eeb 	.word	0x08000eeb
 8000e78:	08000eeb 	.word	0x08000eeb
 8000e7c:	08000eeb 	.word	0x08000eeb
 8000e80:	08000e99 	.word	0x08000e99
 8000e84:	08000ead 	.word	0x08000ead
 8000e88:	4a79      	ldr	r2, [pc, #484]	; (8001070 <HAL_GPIO_Init+0x2b4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d013      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e8e:	e02c      	b.n	8000eea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	623b      	str	r3, [r7, #32]
          break;
 8000e96:	e029      	b.n	8000eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	623b      	str	r3, [r7, #32]
          break;
 8000ea0:	e024      	b.n	8000eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	3308      	adds	r3, #8
 8000ea8:	623b      	str	r3, [r7, #32]
          break;
 8000eaa:	e01f      	b.n	8000eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	330c      	adds	r3, #12
 8000eb2:	623b      	str	r3, [r7, #32]
          break;
 8000eb4:	e01a      	b.n	8000eec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d102      	bne.n	8000ec4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	623b      	str	r3, [r7, #32]
          break;
 8000ec2:	e013      	b.n	8000eec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d105      	bne.n	8000ed8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ecc:	2308      	movs	r3, #8
 8000ece:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69fa      	ldr	r2, [r7, #28]
 8000ed4:	611a      	str	r2, [r3, #16]
          break;
 8000ed6:	e009      	b.n	8000eec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ed8:	2308      	movs	r3, #8
 8000eda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69fa      	ldr	r2, [r7, #28]
 8000ee0:	615a      	str	r2, [r3, #20]
          break;
 8000ee2:	e003      	b.n	8000eec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
          break;
 8000ee8:	e000      	b.n	8000eec <HAL_GPIO_Init+0x130>
          break;
 8000eea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	2bff      	cmp	r3, #255	; 0xff
 8000ef0:	d801      	bhi.n	8000ef6 <HAL_GPIO_Init+0x13a>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	e001      	b.n	8000efa <HAL_GPIO_Init+0x13e>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	2bff      	cmp	r3, #255	; 0xff
 8000f00:	d802      	bhi.n	8000f08 <HAL_GPIO_Init+0x14c>
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	e002      	b.n	8000f0e <HAL_GPIO_Init+0x152>
 8000f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0a:	3b08      	subs	r3, #8
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	210f      	movs	r1, #15
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	401a      	ands	r2, r3
 8000f20:	6a39      	ldr	r1, [r7, #32]
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 80b1 	beq.w	800109e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f3c:	4b4d      	ldr	r3, [pc, #308]	; (8001074 <HAL_GPIO_Init+0x2b8>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a4c      	ldr	r2, [pc, #304]	; (8001074 <HAL_GPIO_Init+0x2b8>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b4a      	ldr	r3, [pc, #296]	; (8001074 <HAL_GPIO_Init+0x2b8>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f54:	4a48      	ldr	r2, [pc, #288]	; (8001078 <HAL_GPIO_Init+0x2bc>)
 8000f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f58:	089b      	lsrs	r3, r3, #2
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	4013      	ands	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a40      	ldr	r2, [pc, #256]	; (800107c <HAL_GPIO_Init+0x2c0>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d013      	beq.n	8000fa8 <HAL_GPIO_Init+0x1ec>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a3f      	ldr	r2, [pc, #252]	; (8001080 <HAL_GPIO_Init+0x2c4>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d00d      	beq.n	8000fa4 <HAL_GPIO_Init+0x1e8>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a3e      	ldr	r2, [pc, #248]	; (8001084 <HAL_GPIO_Init+0x2c8>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d007      	beq.n	8000fa0 <HAL_GPIO_Init+0x1e4>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a3d      	ldr	r2, [pc, #244]	; (8001088 <HAL_GPIO_Init+0x2cc>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d101      	bne.n	8000f9c <HAL_GPIO_Init+0x1e0>
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e006      	b.n	8000faa <HAL_GPIO_Init+0x1ee>
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	e004      	b.n	8000faa <HAL_GPIO_Init+0x1ee>
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	e002      	b.n	8000faa <HAL_GPIO_Init+0x1ee>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <HAL_GPIO_Init+0x1ee>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fac:	f002 0203 	and.w	r2, r2, #3
 8000fb0:	0092      	lsls	r2, r2, #2
 8000fb2:	4093      	lsls	r3, r2
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fba:	492f      	ldr	r1, [pc, #188]	; (8001078 <HAL_GPIO_Init+0x2bc>)
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d006      	beq.n	8000fe2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fd4:	4b2d      	ldr	r3, [pc, #180]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	492c      	ldr	r1, [pc, #176]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	600b      	str	r3, [r1, #0]
 8000fe0:	e006      	b.n	8000ff0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fe2:	4b2a      	ldr	r3, [pc, #168]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	4928      	ldr	r1, [pc, #160]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8000fec:	4013      	ands	r3, r2
 8000fee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d006      	beq.n	800100a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ffc:	4b23      	ldr	r3, [pc, #140]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	4922      	ldr	r1, [pc, #136]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	604b      	str	r3, [r1, #4]
 8001008:	e006      	b.n	8001018 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800100a:	4b20      	ldr	r3, [pc, #128]	; (800108c <HAL_GPIO_Init+0x2d0>)
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	43db      	mvns	r3, r3
 8001012:	491e      	ldr	r1, [pc, #120]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8001014:	4013      	ands	r3, r2
 8001016:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d006      	beq.n	8001032 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	4918      	ldr	r1, [pc, #96]	; (800108c <HAL_GPIO_Init+0x2d0>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	608b      	str	r3, [r1, #8]
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	43db      	mvns	r3, r3
 800103a:	4914      	ldr	r1, [pc, #80]	; (800108c <HAL_GPIO_Init+0x2d0>)
 800103c:	4013      	ands	r3, r2
 800103e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d021      	beq.n	8001090 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <HAL_GPIO_Init+0x2d0>)
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	490e      	ldr	r1, [pc, #56]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	60cb      	str	r3, [r1, #12]
 8001058:	e021      	b.n	800109e <HAL_GPIO_Init+0x2e2>
 800105a:	bf00      	nop
 800105c:	10320000 	.word	0x10320000
 8001060:	10310000 	.word	0x10310000
 8001064:	10220000 	.word	0x10220000
 8001068:	10210000 	.word	0x10210000
 800106c:	10120000 	.word	0x10120000
 8001070:	10110000 	.word	0x10110000
 8001074:	40021000 	.word	0x40021000
 8001078:	40010000 	.word	0x40010000
 800107c:	40010800 	.word	0x40010800
 8001080:	40010c00 	.word	0x40010c00
 8001084:	40011000 	.word	0x40011000
 8001088:	40011400 	.word	0x40011400
 800108c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <HAL_GPIO_Init+0x304>)
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	43db      	mvns	r3, r3
 8001098:	4909      	ldr	r1, [pc, #36]	; (80010c0 <HAL_GPIO_Init+0x304>)
 800109a:	4013      	ands	r3, r2
 800109c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	3301      	adds	r3, #1
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	fa22 f303 	lsr.w	r3, r2, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f47f ae8e 	bne.w	8000dd0 <HAL_GPIO_Init+0x14>
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	372c      	adds	r7, #44	; 0x2c
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	40010400 	.word	0x40010400

080010c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
 80010d0:	4613      	mov	r3, r2
 80010d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010d4:	787b      	ldrb	r3, [r7, #1]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010da:	887a      	ldrh	r2, [r7, #2]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010e0:	e003      	b.n	80010ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010e2:	887b      	ldrh	r3, [r7, #2]
 80010e4:	041a      	lsls	r2, r3, #16
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	611a      	str	r2, [r3, #16]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f6:	b08b      	sub	sp, #44	; 0x2c
 80010f8:	af06      	add	r7, sp, #24
 80010fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e0fd      	b.n	8001302 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d106      	bne.n	8001120 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f007 f90e 	bl	800833c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2203      	movs	r2, #3
 8001124:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f002 fde3 	bl	8003cf8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	687e      	ldr	r6, [r7, #4]
 800113a:	466d      	mov	r5, sp
 800113c:	f106 0410 	add.w	r4, r6, #16
 8001140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001144:	6823      	ldr	r3, [r4, #0]
 8001146:	602b      	str	r3, [r5, #0]
 8001148:	1d33      	adds	r3, r6, #4
 800114a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800114c:	6838      	ldr	r0, [r7, #0]
 800114e:	f002 fdad 	bl	8003cac <USB_CoreInit>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2202      	movs	r2, #2
 800115c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e0ce      	b.n	8001302 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f002 fdde 	bl	8003d2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e04c      	b.n	8001210 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	440b      	add	r3, r1
 8001186:	3301      	adds	r3, #1
 8001188:	2201      	movs	r2, #1
 800118a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	440b      	add	r3, r1
 800119c:	7bfa      	ldrb	r2, [r7, #15]
 800119e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	b298      	uxth	r0, r3
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	440b      	add	r3, r1
 80011b2:	3336      	adds	r3, #54	; 0x36
 80011b4:	4602      	mov	r2, r0
 80011b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	440b      	add	r3, r1
 80011c8:	3303      	adds	r3, #3
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011ce:	7bfa      	ldrb	r2, [r7, #15]
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	440b      	add	r3, r1
 80011dc:	3338      	adds	r3, #56	; 0x38
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011e2:	7bfa      	ldrb	r2, [r7, #15]
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	440b      	add	r3, r1
 80011f0:	333c      	adds	r3, #60	; 0x3c
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	440b      	add	r3, r1
 8001204:	3340      	adds	r3, #64	; 0x40
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	3301      	adds	r3, #1
 800120e:	73fb      	strb	r3, [r7, #15]
 8001210:	7bfa      	ldrb	r2, [r7, #15]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	429a      	cmp	r2, r3
 8001218:	d3ad      	bcc.n	8001176 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800121a:	2300      	movs	r3, #0
 800121c:	73fb      	strb	r3, [r7, #15]
 800121e:	e044      	b.n	80012aa <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001220:	7bfa      	ldrb	r2, [r7, #15]
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	440b      	add	r3, r1
 800122e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	440b      	add	r3, r1
 8001244:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001248:	7bfa      	ldrb	r2, [r7, #15]
 800124a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	440b      	add	r3, r1
 800125a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001262:	7bfa      	ldrb	r2, [r7, #15]
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	440b      	add	r3, r1
 8001270:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	440b      	add	r3, r1
 8001286:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	440b      	add	r3, r1
 800129c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	3301      	adds	r3, #1
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	7bfa      	ldrb	r2, [r7, #15]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d3b5      	bcc.n	8001220 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	687e      	ldr	r6, [r7, #4]
 80012bc:	466d      	mov	r5, sp
 80012be:	f106 0410 	add.w	r4, r6, #16
 80012c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	602b      	str	r3, [r5, #0]
 80012ca:	1d33      	adds	r3, r6, #4
 80012cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ce:	6838      	ldr	r0, [r7, #0]
 80012d0:	f002 fd38 	bl	8003d44 <USB_DevInit>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d005      	beq.n	80012e6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2202      	movs	r2, #2
 80012de:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00d      	b.n	8001302 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2201      	movs	r2, #1
 80012f2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f005 f9ea 	bl	80066d4 <USB_DevDisconnect>

  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800130a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001318:	2b01      	cmp	r3, #1
 800131a:	d101      	bne.n	8001320 <HAL_PCD_Start+0x16>
 800131c:	2302      	movs	r3, #2
 800131e:	e016      	b.n	800134e <HAL_PCD_Start+0x44>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f002 fccd 	bl	8003ccc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001332:	2101      	movs	r1, #1
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f007 fa74 	bl	8008822 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f005 f9be 	bl	80066c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b088      	sub	sp, #32
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f005 f9c0 	bl	80066e8 <USB_ReadInterrupts>
 8001368:	4603      	mov	r3, r0
 800136a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800136e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001372:	d102      	bne.n	800137a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 fb5f 	bl	8001a38 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f005 f9b2 	bl	80066e8 <USB_ReadInterrupts>
 8001384:	4603      	mov	r3, r0
 8001386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800138a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800138e:	d112      	bne.n	80013b6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001398:	b29a      	uxth	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013a2:	b292      	uxth	r2, r2
 80013a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f007 f842 	bl	8008432 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80013ae:	2100      	movs	r1, #0
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f923 	bl	80015fc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f005 f994 	bl	80066e8 <USB_ReadInterrupts>
 80013c0:	4603      	mov	r3, r0
 80013c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013ca:	d10b      	bne.n	80013e4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80013de:	b292      	uxth	r2, r2
 80013e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f005 f97d 	bl	80066e8 <USB_ReadInterrupts>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013f8:	d10b      	bne.n	8001412 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001402:	b29a      	uxth	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800140c:	b292      	uxth	r2, r2
 800140e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f005 f966 	bl	80066e8 <USB_ReadInterrupts>
 800141c:	4603      	mov	r3, r0
 800141e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001426:	d126      	bne.n	8001476 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001430:	b29a      	uxth	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0204 	bic.w	r2, r2, #4
 800143a:	b292      	uxth	r2, r2
 800143c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001448:	b29a      	uxth	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0208 	bic.w	r2, r2, #8
 8001452:	b292      	uxth	r2, r2
 8001454:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f007 f823 	bl	80084a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001466:	b29a      	uxth	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001470:	b292      	uxth	r2, r2
 8001472:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f005 f934 	bl	80066e8 <USB_ReadInterrupts>
 8001480:	4603      	mov	r3, r0
 8001482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800148a:	f040 8082 	bne.w	8001592 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800148e:	2300      	movs	r3, #0
 8001490:	77fb      	strb	r3, [r7, #31]
 8001492:	e010      	b.n	80014b6 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	7ffb      	ldrb	r3, [r7, #31]
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	441a      	add	r2, r3
 80014a0:	7ffb      	ldrb	r3, [r7, #31]
 80014a2:	8812      	ldrh	r2, [r2, #0]
 80014a4:	b292      	uxth	r2, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	3320      	adds	r3, #32
 80014aa:	443b      	add	r3, r7
 80014ac:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80014b0:	7ffb      	ldrb	r3, [r7, #31]
 80014b2:	3301      	adds	r3, #1
 80014b4:	77fb      	strb	r3, [r7, #31]
 80014b6:	7ffb      	ldrb	r3, [r7, #31]
 80014b8:	2b07      	cmp	r3, #7
 80014ba:	d9eb      	bls.n	8001494 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0201 	orr.w	r2, r2, #1
 80014ce:	b292      	uxth	r2, r2
 80014d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014dc:	b29a      	uxth	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0201 	bic.w	r2, r2, #1
 80014e6:	b292      	uxth	r2, r2
 80014e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80014ec:	bf00      	nop
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0f6      	beq.n	80014ee <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001508:	b29a      	uxth	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001512:	b292      	uxth	r2, r2
 8001514:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001518:	2300      	movs	r3, #0
 800151a:	77fb      	strb	r3, [r7, #31]
 800151c:	e00f      	b.n	800153e <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800151e:	7ffb      	ldrb	r3, [r7, #31]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	4611      	mov	r1, r2
 8001526:	7ffa      	ldrb	r2, [r7, #31]
 8001528:	0092      	lsls	r2, r2, #2
 800152a:	440a      	add	r2, r1
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	3320      	adds	r3, #32
 8001530:	443b      	add	r3, r7
 8001532:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001536:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001538:	7ffb      	ldrb	r3, [r7, #31]
 800153a:	3301      	adds	r3, #1
 800153c:	77fb      	strb	r3, [r7, #31]
 800153e:	7ffb      	ldrb	r3, [r7, #31]
 8001540:	2b07      	cmp	r3, #7
 8001542:	d9ec      	bls.n	800151e <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800154c:	b29a      	uxth	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0208 	orr.w	r2, r2, #8
 8001556:	b292      	uxth	r2, r2
 8001558:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001564:	b29a      	uxth	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800156e:	b292      	uxth	r2, r2
 8001570:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800157c:	b29a      	uxth	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0204 	orr.w	r2, r2, #4
 8001586:	b292      	uxth	r2, r2
 8001588:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f006 ff6f 	bl	8008470 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f005 f8a6 	bl	80066e8 <USB_ReadInterrupts>
 800159c:	4603      	mov	r3, r0
 800159e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a6:	d10e      	bne.n	80015c6 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015ba:	b292      	uxth	r2, r2
 80015bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f006 ff28 	bl	8008416 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f005 f88c 	bl	80066e8 <USB_ReadInterrupts>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015da:	d10b      	bne.n	80015f4 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015ee:	b292      	uxth	r2, r2
 80015f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80015f4:	bf00      	nop
 80015f6:	3720      	adds	r7, #32
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800160e:	2b01      	cmp	r3, #1
 8001610:	d101      	bne.n	8001616 <HAL_PCD_SetAddress+0x1a>
 8001612:	2302      	movs	r3, #2
 8001614:	e013      	b.n	800163e <HAL_PCD_SetAddress+0x42>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	78fa      	ldrb	r2, [r7, #3]
 8001622:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	78fa      	ldrb	r2, [r7, #3]
 800162c:	4611      	mov	r1, r2
 800162e:	4618      	mov	r0, r3
 8001630:	f005 f833 	bl	800669a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b084      	sub	sp, #16
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	4608      	mov	r0, r1
 8001650:	4611      	mov	r1, r2
 8001652:	461a      	mov	r2, r3
 8001654:	4603      	mov	r3, r0
 8001656:	70fb      	strb	r3, [r7, #3]
 8001658:	460b      	mov	r3, r1
 800165a:	803b      	strh	r3, [r7, #0]
 800165c:	4613      	mov	r3, r2
 800165e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001668:	2b00      	cmp	r3, #0
 800166a:	da0e      	bge.n	800168a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	4413      	add	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2201      	movs	r2, #1
 8001686:	705a      	strb	r2, [r3, #1]
 8001688:	e00e      	b.n	80016a8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800168a:	78fb      	ldrb	r3, [r7, #3]
 800168c:	f003 0207 	and.w	r2, r3, #7
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	4413      	add	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2200      	movs	r2, #0
 80016a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80016a8:	78fb      	ldrb	r3, [r7, #3]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80016b4:	883a      	ldrh	r2, [r7, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	78ba      	ldrb	r2, [r7, #2]
 80016be:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	785b      	ldrb	r3, [r3, #1]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d004      	beq.n	80016d2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80016d2:	78bb      	ldrb	r3, [r7, #2]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d102      	bne.n	80016de <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_PCD_EP_Open+0xa6>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e00e      	b.n	800170a <HAL_PCD_EP_Open+0xc4>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68f9      	ldr	r1, [r7, #12]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 fb42 	bl	8003d84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001708:	7afb      	ldrb	r3, [r7, #11]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b084      	sub	sp, #16
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	460b      	mov	r3, r1
 800171c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800171e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001722:	2b00      	cmp	r3, #0
 8001724:	da0e      	bge.n	8001744 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001726:	78fb      	ldrb	r3, [r7, #3]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2201      	movs	r2, #1
 8001740:	705a      	strb	r2, [r3, #1]
 8001742:	e00e      	b.n	8001762 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	f003 0207 	and.w	r2, r3, #7
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	b2da      	uxtb	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_PCD_EP_Close+0x6a>
 8001778:	2302      	movs	r3, #2
 800177a:	e00e      	b.n	800179a <HAL_PCD_EP_Close+0x88>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68f9      	ldr	r1, [r7, #12]
 800178a:	4618      	mov	r0, r3
 800178c:	f002 fe64 	bl	8004458 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b086      	sub	sp, #24
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	460b      	mov	r3, r1
 80017b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017b2:	7afb      	ldrb	r3, [r7, #11]
 80017b4:	f003 0207 	and.w	r2, r3, #7
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2200      	movs	r2, #0
 80017da:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	2200      	movs	r2, #0
 80017e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017e2:	7afb      	ldrb	r3, [r7, #11]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017ee:	7afb      	ldrb	r3, [r7, #11]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d106      	bne.n	8001806 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6979      	ldr	r1, [r7, #20]
 80017fe:	4618      	mov	r0, r3
 8001800:	f003 f816 	bl	8004830 <USB_EPStartXfer>
 8001804:	e005      	b.n	8001812 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6979      	ldr	r1, [r7, #20]
 800180c:	4618      	mov	r0, r3
 800180e:	f003 f80f 	bl	8004830 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	f003 0207 	and.w	r2, r3, #7
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]
 8001856:	460b      	mov	r3, r1
 8001858:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800185a:	7afb      	ldrb	r3, [r7, #11]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	4413      	add	r3, r2
 800186e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2200      	movs	r2, #0
 800188e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2201      	movs	r2, #1
 8001894:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001896:	7afb      	ldrb	r3, [r7, #11]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	b2da      	uxtb	r2, r3
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018a2:	7afb      	ldrb	r3, [r7, #11]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d106      	bne.n	80018ba <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6979      	ldr	r1, [r7, #20]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f002 ffbc 	bl	8004830 <USB_EPStartXfer>
 80018b8:	e005      	b.n	80018c6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6979      	ldr	r1, [r7, #20]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f002 ffb5 	bl	8004830 <USB_EPStartXfer>
  }

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	f003 0207 	and.w	r2, r3, #7
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d901      	bls.n	80018ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e04c      	b.n	8001988 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	da0e      	bge.n	8001914 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2201      	movs	r2, #1
 8001910:	705a      	strb	r2, [r3, #1]
 8001912:	e00c      	b.n	800192e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001914:	78fa      	ldrb	r2, [r7, #3]
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2201      	movs	r2, #1
 8001932:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	b2da      	uxtb	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001946:	2b01      	cmp	r3, #1
 8001948:	d101      	bne.n	800194e <HAL_PCD_EP_SetStall+0x7e>
 800194a:	2302      	movs	r3, #2
 800194c:	e01c      	b.n	8001988 <HAL_PCD_EP_SetStall+0xb8>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68f9      	ldr	r1, [r7, #12]
 800195c:	4618      	mov	r0, r3
 800195e:	f004 fd9f 	bl	80064a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	2b00      	cmp	r3, #0
 800196a:	d108      	bne.n	800197e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001976:	4619      	mov	r1, r3
 8001978:	4610      	mov	r0, r2
 800197a:	f004 fec4 	bl	8006706 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	f003 020f 	and.w	r2, r3, #15
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d901      	bls.n	80019ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e040      	b.n	8001a30 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	da0e      	bge.n	80019d4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2201      	movs	r2, #1
 80019d0:	705a      	strb	r2, [r3, #1]
 80019d2:	e00e      	b.n	80019f2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	f003 0207 	and.w	r2, r3, #7
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d101      	bne.n	8001a12 <HAL_PCD_EP_ClrStall+0x82>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e00e      	b.n	8001a30 <HAL_PCD_EP_ClrStall+0xa0>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68f9      	ldr	r1, [r7, #12]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f004 fd8d 	bl	8006540 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08e      	sub	sp, #56	; 0x38
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a40:	e2ec      	b.n	800201c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a4a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001a4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001a58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f040 8161 	bne.w	8001d24 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d152      	bne.n	8001b12 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a7c:	81fb      	strh	r3, [r7, #14]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	89fb      	ldrh	r3, [r7, #14]
 8001a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3328      	adds	r3, #40	; 0x28
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3302      	adds	r3, #2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	441a      	add	r2, r3
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f006 fc85 	bl	80083e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 829b 	beq.w	800201c <PCD_EP_ISR_Handler+0x5e4>
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f040 8296 	bne.w	800201c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b292      	uxth	r2, r2
 8001b04:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b10:	e284      	b.n	800201c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d034      	beq.n	8001b96 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	461a      	mov	r2, r3
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4413      	add	r3, r2
 8001b40:	3306      	adds	r3, #6
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	4413      	add	r3, r2
 8001b4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	f004 fe1b 	bl	80067a6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	823b      	strh	r3, [r7, #16]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	8a3a      	ldrh	r2, [r7, #16]
 8001b86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b8a:	b292      	uxth	r2, r2
 8001b8c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f006 fbfa 	bl	8008388 <HAL_PCD_SetupStageCallback>
 8001b94:	e242      	b.n	800201c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b96:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f280 823e 	bge.w	800201c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bac:	4013      	ands	r3, r2
 8001bae:	83bb      	strh	r3, [r7, #28]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	8bba      	ldrh	r2, [r7, #28]
 8001bb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bba:	b292      	uxth	r2, r2
 8001bbc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	461a      	mov	r2, r3
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3306      	adds	r3, #6
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d019      	beq.n	8001c26 <PCD_EP_ISR_Handler+0x1ee>
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d015      	beq.n	8001c26 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	6959      	ldr	r1, [r3, #20]
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	f004 fdcb 	bl	80067a6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	441a      	add	r2, r3
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c1e:	2100      	movs	r1, #0
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f006 fbc3 	bl	80083ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f040 81f2 	bne.w	800201c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	461a      	mov	r2, r3
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d112      	bne.n	8001c86 <PCD_EP_ISR_Handler+0x24e>
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	801a      	strh	r2, [r3, #0]
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	801a      	strh	r2, [r3, #0]
 8001c84:	e02f      	b.n	8001ce6 <PCD_EP_ISR_Handler+0x2ae>
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	2b3e      	cmp	r3, #62	; 0x3e
 8001c8c:	d813      	bhi.n	8001cb6 <PCD_EP_ISR_Handler+0x27e>
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	085b      	lsrs	r3, r3, #1
 8001c94:	633b      	str	r3, [r7, #48]	; 0x30
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <PCD_EP_ISR_Handler+0x270>
 8001ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	029b      	lsls	r3, r3, #10
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	801a      	strh	r2, [r3, #0]
 8001cb4:	e017      	b.n	8001ce6 <PCD_EP_ISR_Handler+0x2ae>
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	633b      	str	r3, [r7, #48]	; 0x30
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d102      	bne.n	8001cd0 <PCD_EP_ISR_Handler+0x298>
 8001cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	633b      	str	r3, [r7, #48]	; 0x30
 8001cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	029b      	lsls	r3, r3, #10
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cf6:	827b      	strh	r3, [r7, #18]
 8001cf8:	8a7b      	ldrh	r3, [r7, #18]
 8001cfa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001cfe:	827b      	strh	r3, [r7, #18]
 8001d00:	8a7b      	ldrh	r3, [r7, #18]
 8001d02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d06:	827b      	strh	r3, [r7, #18]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	8a7b      	ldrh	r3, [r7, #18]
 8001d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	8013      	strh	r3, [r2, #0]
 8001d22:	e17b      	b.n	800201c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d36:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f280 80ea 	bge.w	8001f14 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d56:	4013      	ands	r3, r2
 8001d58:	853b      	strh	r3, [r7, #40]	; 0x28
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d6e:	b292      	uxth	r2, r2
 8001d70:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001d72:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	7b1b      	ldrb	r3, [r3, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d122      	bne.n	8001dd6 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4413      	add	r3, r2
 8001da4:	3306      	adds	r3, #6
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001db8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001dba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 8087 	beq.w	8001ed0 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	6959      	ldr	r1, [r3, #20]
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	88da      	ldrh	r2, [r3, #6]
 8001dce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dd0:	f004 fce9 	bl	80067a6 <USB_ReadPMA>
 8001dd4:	e07c      	b.n	8001ed0 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	78db      	ldrb	r3, [r3, #3]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d108      	bne.n	8001df0 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001dde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001de0:	461a      	mov	r2, r3
 8001de2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f927 	bl	8002038 <HAL_PCD_EP_DB_Receive>
 8001dea:	4603      	mov	r3, r0
 8001dec:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001dee:	e06f      	b.n	8001ed0 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e0a:	847b      	strh	r3, [r7, #34]	; 0x22
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	441a      	add	r2, r3
 8001e1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d021      	beq.n	8001e8e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	461a      	mov	r2, r3
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3302      	adds	r3, #2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e72:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001e74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d02a      	beq.n	8001ed0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	6959      	ldr	r1, [r3, #20]
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	891a      	ldrh	r2, [r3, #8]
 8001e86:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e88:	f004 fc8d 	bl	80067a6 <USB_ReadPMA>
 8001e8c:	e020      	b.n	8001ed0 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	461a      	mov	r2, r3
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3306      	adds	r3, #6
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eb6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001eb8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d008      	beq.n	8001ed0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	6959      	ldr	r1, [r3, #20]
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	895a      	ldrh	r2, [r3, #10]
 8001eca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ecc:	f004 fc6b 	bl	80067a6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	69da      	ldr	r2, [r3, #28]
 8001ed4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ed6:	441a      	add	r2, r3
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	695a      	ldr	r2, [r3, #20]
 8001ee0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ee2:	441a      	add	r2, r3
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d004      	beq.n	8001efa <PCD_EP_ISR_Handler+0x4c2>
 8001ef0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d206      	bcs.n	8001f08 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	4619      	mov	r1, r3
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f006 fa53 	bl	80083ac <HAL_PCD_DataOutStageCallback>
 8001f06:	e005      	b.n	8001f14 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f002 fc8e 	bl	8004830 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d07e      	beq.n	800201c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f4c:	843b      	strh	r3, [r7, #32]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	441a      	add	r2, r3
 8001f5c:	8c3b      	ldrh	r3, [r7, #32]
 8001f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	78db      	ldrb	r3, [r3, #3]
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d00c      	beq.n	8001f8c <PCD_EP_ISR_Handler+0x554>
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	78db      	ldrb	r3, [r3, #3]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d008      	beq.n	8001f8c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d146      	bne.n	8002010 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001f82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d141      	bne.n	8002010 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fb4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	699a      	ldr	r2, [r3, #24]
 8001fba:	8bfb      	ldrh	r3, [r7, #30]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d906      	bls.n	8001fce <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	699a      	ldr	r2, [r3, #24]
 8001fc4:	8bfb      	ldrh	r3, [r7, #30]
 8001fc6:	1ad2      	subs	r2, r2, r3
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	619a      	str	r2, [r3, #24]
 8001fcc:	e002      	b.n	8001fd4 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d106      	bne.n	8001fea <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f006 f9fd 	bl	80083e2 <HAL_PCD_DataInStageCallback>
 8001fe8:	e018      	b.n	800201c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	8bfb      	ldrh	r3, [r7, #30]
 8001ff0:	441a      	add	r2, r3
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	69da      	ldr	r2, [r3, #28]
 8001ffa:	8bfb      	ldrh	r3, [r7, #30]
 8001ffc:	441a      	add	r2, r3
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002008:	4618      	mov	r0, r3
 800200a:	f002 fc11 	bl	8004830 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800200e:	e005      	b.n	800201c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002010:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002012:	461a      	mov	r2, r3
 8002014:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f91b 	bl	8002252 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002024:	b29b      	uxth	r3, r3
 8002026:	b21b      	sxth	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	f6ff ad0a 	blt.w	8001a42 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3738      	adds	r7, #56	; 0x38
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	4613      	mov	r3, r2
 8002044:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d07e      	beq.n	800214e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002058:	b29b      	uxth	r3, r3
 800205a:	461a      	mov	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	3302      	adds	r3, #2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	4413      	add	r3, r2
 800206e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002078:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	699a      	ldr	r2, [r3, #24]
 800207e:	8b7b      	ldrh	r3, [r7, #26]
 8002080:	429a      	cmp	r2, r3
 8002082:	d306      	bcc.n	8002092 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	699a      	ldr	r2, [r3, #24]
 8002088:	8b7b      	ldrh	r3, [r7, #26]
 800208a:	1ad2      	subs	r2, r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	619a      	str	r2, [r3, #24]
 8002090:	e002      	b.n	8002098 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d123      	bne.n	80020e8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ba:	833b      	strh	r3, [r7, #24]
 80020bc:	8b3b      	ldrh	r3, [r7, #24]
 80020be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020c2:	833b      	strh	r3, [r7, #24]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	441a      	add	r2, r3
 80020d2:	8b3b      	ldrh	r3, [r7, #24]
 80020d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d01f      	beq.n	8002132 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800210c:	82fb      	strh	r3, [r7, #22]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	441a      	add	r2, r3
 800211c:	8afb      	ldrh	r3, [r7, #22]
 800211e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800212a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800212e:	b29b      	uxth	r3, r3
 8002130:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002132:	8b7b      	ldrh	r3, [r7, #26]
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 8087 	beq.w	8002248 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	6959      	ldr	r1, [r3, #20]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	891a      	ldrh	r2, [r3, #8]
 8002146:	8b7b      	ldrh	r3, [r7, #26]
 8002148:	f004 fb2d 	bl	80067a6 <USB_ReadPMA>
 800214c:	e07c      	b.n	8002248 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002156:	b29b      	uxth	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	3306      	adds	r3, #6
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	4413      	add	r3, r2
 800216c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002176:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	699a      	ldr	r2, [r3, #24]
 800217c:	8b7b      	ldrh	r3, [r7, #26]
 800217e:	429a      	cmp	r2, r3
 8002180:	d306      	bcc.n	8002190 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	8b7b      	ldrh	r3, [r7, #26]
 8002188:	1ad2      	subs	r2, r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	619a      	str	r2, [r3, #24]
 800218e:	e002      	b.n	8002196 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2200      	movs	r2, #0
 8002194:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d123      	bne.n	80021e6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b8:	83fb      	strh	r3, [r7, #30]
 80021ba:	8bfb      	ldrh	r3, [r7, #30]
 80021bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021c0:	83fb      	strh	r3, [r7, #30]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	441a      	add	r2, r3
 80021d0:	8bfb      	ldrh	r3, [r7, #30]
 80021d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d11f      	bne.n	8002230 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	461a      	mov	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	b29b      	uxth	r3, r3
 8002202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220a:	83bb      	strh	r3, [r7, #28]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	441a      	add	r2, r3
 800221a:	8bbb      	ldrh	r3, [r7, #28]
 800221c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002228:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800222c:	b29b      	uxth	r3, r3
 800222e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002230:	8b7b      	ldrh	r3, [r7, #26]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d008      	beq.n	8002248 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	6959      	ldr	r1, [r3, #20]
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	895a      	ldrh	r2, [r3, #10]
 8002242:	8b7b      	ldrh	r3, [r7, #26]
 8002244:	f004 faaf 	bl	80067a6 <USB_ReadPMA>
    }
  }

  return count;
 8002248:	8b7b      	ldrh	r3, [r7, #26]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3720      	adds	r7, #32
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b0a2      	sub	sp, #136	; 0x88
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	4613      	mov	r3, r2
 800225e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002260:	88fb      	ldrh	r3, [r7, #6]
 8002262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 81c7 	beq.w	80025fa <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002274:	b29b      	uxth	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4413      	add	r3, r2
 8002280:	3302      	adds	r3, #2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	4413      	add	r3, r2
 800228a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002294:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	699a      	ldr	r2, [r3, #24]
 800229c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d907      	bls.n	80022b4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	699a      	ldr	r2, [r3, #24]
 80022a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022ac:	1ad2      	subs	r2, r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	619a      	str	r2, [r3, #24]
 80022b2:	e002      	b.n	80022ba <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2200      	movs	r2, #0
 80022b8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f040 80b9 	bne.w	8002436 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	785b      	ldrb	r3, [r3, #1]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d126      	bne.n	800231a <HAL_PCD_EP_DB_Transmit+0xc8>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022da:	b29b      	uxth	r3, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e0:	4413      	add	r3, r2
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	011a      	lsls	r2, r3, #4
 80022ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ec:	4413      	add	r3, r2
 80022ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022fe:	b29a      	uxth	r2, r3
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	801a      	strh	r2, [r3, #0]
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	b29b      	uxth	r3, r3
 800230a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800230e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002312:	b29a      	uxth	r2, r3
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	801a      	strh	r2, [r3, #0]
 8002318:	e01a      	b.n	8002350 <HAL_PCD_EP_DB_Transmit+0xfe>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	785b      	ldrb	r3, [r3, #1]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d116      	bne.n	8002350 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	633b      	str	r3, [r7, #48]	; 0x30
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002330:	b29b      	uxth	r3, r3
 8002332:	461a      	mov	r2, r3
 8002334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002336:	4413      	add	r3, r2
 8002338:	633b      	str	r3, [r7, #48]	; 0x30
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	011a      	lsls	r2, r3, #4
 8002340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002342:	4413      	add	r3, r2
 8002344:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800234a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234c:	2200      	movs	r2, #0
 800234e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	623b      	str	r3, [r7, #32]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	785b      	ldrb	r3, [r3, #1]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d126      	bne.n	80023ac <HAL_PCD_EP_DB_Transmit+0x15a>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	61bb      	str	r3, [r7, #24]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800236c:	b29b      	uxth	r3, r3
 800236e:	461a      	mov	r2, r3
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	4413      	add	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	011a      	lsls	r2, r3, #4
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	4413      	add	r3, r2
 8002380:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	b29b      	uxth	r3, r3
 800238c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002390:	b29a      	uxth	r2, r3
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	801a      	strh	r2, [r3, #0]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	b29b      	uxth	r3, r3
 800239c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	801a      	strh	r2, [r3, #0]
 80023aa:	e017      	b.n	80023dc <HAL_PCD_EP_DB_Transmit+0x18a>
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	785b      	ldrb	r3, [r3, #1]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d113      	bne.n	80023dc <HAL_PCD_EP_DB_Transmit+0x18a>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023bc:	b29b      	uxth	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	4413      	add	r3, r2
 80023c4:	623b      	str	r3, [r7, #32]
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	011a      	lsls	r2, r3, #4
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	4413      	add	r3, r2
 80023d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023d4:	61fb      	str	r3, [r7, #28]
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	2200      	movs	r2, #0
 80023da:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	4619      	mov	r1, r3
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f005 fffd 	bl	80083e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 82d4 	beq.w	800299c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	b29b      	uxth	r3, r3
 8002406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800240a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800240e:	827b      	strh	r3, [r7, #18]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	441a      	add	r2, r3
 800241e:	8a7b      	ldrh	r3, [r7, #18]
 8002420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002428:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800242c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002430:	b29b      	uxth	r3, r3
 8002432:	8013      	strh	r3, [r2, #0]
 8002434:	e2b2      	b.n	800299c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d021      	beq.n	8002484 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	b29b      	uxth	r3, r3
 8002452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800245a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	441a      	add	r2, r3
 800246c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800247c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002480:	b29b      	uxth	r3, r3
 8002482:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800248a:	2b01      	cmp	r3, #1
 800248c:	f040 8286 	bne.w	800299c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	695a      	ldr	r2, [r3, #20]
 8002494:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002498:	441a      	add	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	69da      	ldr	r2, [r3, #28]
 80024a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024a6:	441a      	add	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	6a1a      	ldr	r2, [r3, #32]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d309      	bcc.n	80024cc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	6a1a      	ldr	r2, [r3, #32]
 80024c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024c4:	1ad2      	subs	r2, r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	621a      	str	r2, [r3, #32]
 80024ca:	e015      	b.n	80024f8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d107      	bne.n	80024e4 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80024d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024d8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024e2:	e009      	b.n	80024f8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2200      	movs	r2, #0
 80024f6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	785b      	ldrb	r3, [r3, #1]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d155      	bne.n	80025ac <HAL_PCD_EP_DB_Transmit+0x35a>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	63bb      	str	r3, [r7, #56]	; 0x38
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800250e:	b29b      	uxth	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002514:	4413      	add	r3, r2
 8002516:	63bb      	str	r3, [r7, #56]	; 0x38
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	011a      	lsls	r2, r3, #4
 800251e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002520:	4413      	add	r3, r2
 8002522:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002526:	637b      	str	r3, [r7, #52]	; 0x34
 8002528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800252a:	2b00      	cmp	r3, #0
 800252c:	d112      	bne.n	8002554 <HAL_PCD_EP_DB_Transmit+0x302>
 800252e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002538:	b29a      	uxth	r2, r3
 800253a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800253c:	801a      	strh	r2, [r3, #0]
 800253e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800254c:	b29a      	uxth	r2, r3
 800254e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002550:	801a      	strh	r2, [r3, #0]
 8002552:	e047      	b.n	80025e4 <HAL_PCD_EP_DB_Transmit+0x392>
 8002554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002556:	2b3e      	cmp	r3, #62	; 0x3e
 8002558:	d811      	bhi.n	800257e <HAL_PCD_EP_DB_Transmit+0x32c>
 800255a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800255c:	085b      	lsrs	r3, r3, #1
 800255e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <HAL_PCD_EP_DB_Transmit+0x31e>
 800256a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800256c:	3301      	adds	r3, #1
 800256e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002572:	b29b      	uxth	r3, r3
 8002574:	029b      	lsls	r3, r3, #10
 8002576:	b29a      	uxth	r2, r3
 8002578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257a:	801a      	strh	r2, [r3, #0]
 800257c:	e032      	b.n	80025e4 <HAL_PCD_EP_DB_Transmit+0x392>
 800257e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	64bb      	str	r3, [r7, #72]	; 0x48
 8002584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002586:	f003 031f 	and.w	r3, r3, #31
 800258a:	2b00      	cmp	r3, #0
 800258c:	d102      	bne.n	8002594 <HAL_PCD_EP_DB_Transmit+0x342>
 800258e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002590:	3b01      	subs	r3, #1
 8002592:	64bb      	str	r3, [r7, #72]	; 0x48
 8002594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002596:	b29b      	uxth	r3, r3
 8002598:	029b      	lsls	r3, r3, #10
 800259a:	b29b      	uxth	r3, r3
 800259c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a8:	801a      	strh	r2, [r3, #0]
 80025aa:	e01b      	b.n	80025e4 <HAL_PCD_EP_DB_Transmit+0x392>
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	785b      	ldrb	r3, [r3, #1]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d117      	bne.n	80025e4 <HAL_PCD_EP_DB_Transmit+0x392>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	643b      	str	r3, [r7, #64]	; 0x40
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025c8:	4413      	add	r3, r2
 80025ca:	643b      	str	r3, [r7, #64]	; 0x40
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	011a      	lsls	r2, r3, #4
 80025d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025d4:	4413      	add	r3, r2
 80025d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025de:	b29a      	uxth	r2, r3
 80025e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025e2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	6959      	ldr	r1, [r3, #20]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	891a      	ldrh	r2, [r3, #8]
 80025f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f004 f892 	bl	800671c <USB_WritePMA>
 80025f8:	e1d0      	b.n	800299c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002602:	b29b      	uxth	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4413      	add	r3, r2
 800260e:	3306      	adds	r3, #6
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	4413      	add	r3, r2
 8002618:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002622:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800262e:	429a      	cmp	r2, r3
 8002630:	d307      	bcc.n	8002642 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	699a      	ldr	r2, [r3, #24]
 8002636:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800263a:	1ad2      	subs	r2, r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	619a      	str	r2, [r3, #24]
 8002640:	e002      	b.n	8002648 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	2b00      	cmp	r3, #0
 800264e:	f040 80c4 	bne.w	80027da <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	785b      	ldrb	r3, [r3, #1]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d126      	bne.n	80026a8 <HAL_PCD_EP_DB_Transmit+0x456>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002668:	b29b      	uxth	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800266e:	4413      	add	r3, r2
 8002670:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	011a      	lsls	r2, r3, #4
 8002678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800267a:	4413      	add	r3, r2
 800267c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002680:	66bb      	str	r3, [r7, #104]	; 0x68
 8002682:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800268c:	b29a      	uxth	r2, r3
 800268e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002690:	801a      	strh	r2, [r3, #0]
 8002692:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	b29b      	uxth	r3, r3
 8002698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800269c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026a4:	801a      	strh	r2, [r3, #0]
 80026a6:	e01a      	b.n	80026de <HAL_PCD_EP_DB_Transmit+0x48c>
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	785b      	ldrb	r3, [r3, #1]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d116      	bne.n	80026de <HAL_PCD_EP_DB_Transmit+0x48c>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	677b      	str	r3, [r7, #116]	; 0x74
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026be:	b29b      	uxth	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026c4:	4413      	add	r3, r2
 80026c6:	677b      	str	r3, [r7, #116]	; 0x74
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	011a      	lsls	r2, r3, #4
 80026ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026d0:	4413      	add	r3, r2
 80026d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026d6:	673b      	str	r3, [r7, #112]	; 0x70
 80026d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026da:	2200      	movs	r2, #0
 80026dc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	785b      	ldrb	r3, [r3, #1]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d12f      	bne.n	800274c <HAL_PCD_EP_DB_Transmit+0x4fa>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	461a      	mov	r2, r3
 8002700:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002704:	4413      	add	r3, r2
 8002706:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	011a      	lsls	r2, r3, #4
 8002710:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002714:	4413      	add	r3, r2
 8002716:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800271a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800271e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	b29b      	uxth	r3, r3
 8002726:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800272a:	b29a      	uxth	r2, r3
 800272c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002730:	801a      	strh	r2, [r3, #0]
 8002732:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	b29b      	uxth	r3, r3
 800273a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800273e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002742:	b29a      	uxth	r2, r3
 8002744:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002748:	801a      	strh	r2, [r3, #0]
 800274a:	e017      	b.n	800277c <HAL_PCD_EP_DB_Transmit+0x52a>
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	785b      	ldrb	r3, [r3, #1]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d113      	bne.n	800277c <HAL_PCD_EP_DB_Transmit+0x52a>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800275c:	b29b      	uxth	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002762:	4413      	add	r3, r2
 8002764:	67bb      	str	r3, [r7, #120]	; 0x78
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	011a      	lsls	r2, r3, #4
 800276c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800276e:	4413      	add	r3, r2
 8002770:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002774:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002776:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002778:	2200      	movs	r2, #0
 800277a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	4619      	mov	r1, r3
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f005 fe2d 	bl	80083e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800278e:	2b00      	cmp	r3, #0
 8002790:	f040 8104 	bne.w	800299c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	441a      	add	r2, r3
 80027c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80027c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	8013      	strh	r3, [r2, #0]
 80027d8:	e0e0      	b.n	800299c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d121      	bne.n	8002828 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	441a      	add	r2, r3
 8002810:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800281c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002824:	b29b      	uxth	r3, r3
 8002826:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800282e:	2b01      	cmp	r3, #1
 8002830:	f040 80b4 	bne.w	800299c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800283c:	441a      	add	r2, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	69da      	ldr	r2, [r3, #28]
 8002846:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800284a:	441a      	add	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	6a1a      	ldr	r2, [r3, #32]
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	429a      	cmp	r2, r3
 800285a:	d309      	bcc.n	8002870 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	6a1a      	ldr	r2, [r3, #32]
 8002866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002868:	1ad2      	subs	r2, r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	621a      	str	r2, [r3, #32]
 800286e:	e015      	b.n	800289c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d107      	bne.n	8002888 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002878:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800287c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002886:	e009      	b.n	800289c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2200      	movs	r2, #0
 8002892:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	667b      	str	r3, [r7, #100]	; 0x64
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	785b      	ldrb	r3, [r3, #1]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d155      	bne.n	8002956 <HAL_PCD_EP_DB_Transmit+0x704>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028be:	4413      	add	r3, r2
 80028c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	011a      	lsls	r2, r3, #4
 80028c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ca:	4413      	add	r3, r2
 80028cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80028d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d112      	bne.n	80028fe <HAL_PCD_EP_DB_Transmit+0x6ac>
 80028d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028e6:	801a      	strh	r2, [r3, #0]
 80028e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028fa:	801a      	strh	r2, [r3, #0]
 80028fc:	e044      	b.n	8002988 <HAL_PCD_EP_DB_Transmit+0x736>
 80028fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002900:	2b3e      	cmp	r3, #62	; 0x3e
 8002902:	d811      	bhi.n	8002928 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002906:	085b      	lsrs	r3, r3, #1
 8002908:	657b      	str	r3, [r7, #84]	; 0x54
 800290a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d002      	beq.n	800291a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002916:	3301      	adds	r3, #1
 8002918:	657b      	str	r3, [r7, #84]	; 0x54
 800291a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800291c:	b29b      	uxth	r3, r3
 800291e:	029b      	lsls	r3, r3, #10
 8002920:	b29a      	uxth	r2, r3
 8002922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002924:	801a      	strh	r2, [r3, #0]
 8002926:	e02f      	b.n	8002988 <HAL_PCD_EP_DB_Transmit+0x736>
 8002928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	657b      	str	r3, [r7, #84]	; 0x54
 800292e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002930:	f003 031f 	and.w	r3, r3, #31
 8002934:	2b00      	cmp	r3, #0
 8002936:	d102      	bne.n	800293e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293a:	3b01      	subs	r3, #1
 800293c:	657b      	str	r3, [r7, #84]	; 0x54
 800293e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002940:	b29b      	uxth	r3, r3
 8002942:	029b      	lsls	r3, r3, #10
 8002944:	b29b      	uxth	r3, r3
 8002946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800294a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800294e:	b29a      	uxth	r2, r3
 8002950:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002952:	801a      	strh	r2, [r3, #0]
 8002954:	e018      	b.n	8002988 <HAL_PCD_EP_DB_Transmit+0x736>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	785b      	ldrb	r3, [r3, #1]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d114      	bne.n	8002988 <HAL_PCD_EP_DB_Transmit+0x736>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002966:	b29b      	uxth	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800296c:	4413      	add	r3, r2
 800296e:	667b      	str	r3, [r7, #100]	; 0x64
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	011a      	lsls	r2, r3, #4
 8002976:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002978:	4413      	add	r3, r2
 800297a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800297e:	663b      	str	r3, [r7, #96]	; 0x60
 8002980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002982:	b29a      	uxth	r2, r3
 8002984:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002986:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	6959      	ldr	r1, [r3, #20]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	895a      	ldrh	r2, [r3, #10]
 8002994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002996:	b29b      	uxth	r3, r3
 8002998:	f003 fec0 	bl	800671c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029b6:	823b      	strh	r3, [r7, #16]
 80029b8:	8a3b      	ldrh	r3, [r7, #16]
 80029ba:	f083 0310 	eor.w	r3, r3, #16
 80029be:	823b      	strh	r3, [r7, #16]
 80029c0:	8a3b      	ldrh	r3, [r7, #16]
 80029c2:	f083 0320 	eor.w	r3, r3, #32
 80029c6:	823b      	strh	r3, [r7, #16]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	441a      	add	r2, r3
 80029d6:	8a3b      	ldrh	r3, [r7, #16]
 80029d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3788      	adds	r7, #136	; 0x88
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b087      	sub	sp, #28
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	607b      	str	r3, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	817b      	strh	r3, [r7, #10]
 8002a04:	4613      	mov	r3, r2
 8002a06:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a08:	897b      	ldrh	r3, [r7, #10]
 8002a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00b      	beq.n	8002a2c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a14:	897b      	ldrh	r3, [r7, #10]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4413      	add	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	e009      	b.n	8002a40 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a2c:	897a      	ldrh	r2, [r7, #10]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a40:	893b      	ldrh	r3, [r7, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d107      	bne.n	8002a56 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	80da      	strh	r2, [r3, #6]
 8002a54:	e00b      	b.n	8002a6e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	0c1b      	lsrs	r3, r3, #16
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	371c      	adds	r7, #28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
	...

08002a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e272      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 8087 	beq.w	8002baa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a9c:	4b92      	ldr	r3, [pc, #584]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 030c 	and.w	r3, r3, #12
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d00c      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002aa8:	4b8f      	ldr	r3, [pc, #572]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 030c 	and.w	r3, r3, #12
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d112      	bne.n	8002ada <HAL_RCC_OscConfig+0x5e>
 8002ab4:	4b8c      	ldr	r3, [pc, #560]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac0:	d10b      	bne.n	8002ada <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac2:	4b89      	ldr	r3, [pc, #548]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d06c      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x12c>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d168      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e24c      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae2:	d106      	bne.n	8002af2 <HAL_RCC_OscConfig+0x76>
 8002ae4:	4b80      	ldr	r3, [pc, #512]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a7f      	ldr	r2, [pc, #508]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	e02e      	b.n	8002b50 <HAL_RCC_OscConfig+0xd4>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x98>
 8002afa:	4b7b      	ldr	r3, [pc, #492]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a7a      	ldr	r2, [pc, #488]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	4b78      	ldr	r3, [pc, #480]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a77      	ldr	r2, [pc, #476]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e01d      	b.n	8002b50 <HAL_RCC_OscConfig+0xd4>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCC_OscConfig+0xbc>
 8002b1e:	4b72      	ldr	r3, [pc, #456]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a71      	ldr	r2, [pc, #452]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	4b6f      	ldr	r3, [pc, #444]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a6e      	ldr	r2, [pc, #440]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	e00b      	b.n	8002b50 <HAL_RCC_OscConfig+0xd4>
 8002b38:	4b6b      	ldr	r3, [pc, #428]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a6a      	ldr	r2, [pc, #424]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	4b68      	ldr	r3, [pc, #416]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a67      	ldr	r2, [pc, #412]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d013      	beq.n	8002b80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7fe f818 	bl	8000b8c <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b60:	f7fe f814 	bl	8000b8c <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	; 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e200      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b72:	4b5d      	ldr	r3, [pc, #372]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0xe4>
 8002b7e:	e014      	b.n	8002baa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b80:	f7fe f804 	bl	8000b8c <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b88:	f7fe f800 	bl	8000b8c <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b64      	cmp	r3, #100	; 0x64
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e1ec      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9a:	4b53      	ldr	r3, [pc, #332]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x10c>
 8002ba6:	e000      	b.n	8002baa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d063      	beq.n	8002c7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bb6:	4b4c      	ldr	r3, [pc, #304]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00b      	beq.n	8002bda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bc2:	4b49      	ldr	r3, [pc, #292]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d11c      	bne.n	8002c08 <HAL_RCC_OscConfig+0x18c>
 8002bce:	4b46      	ldr	r3, [pc, #280]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d116      	bne.n	8002c08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bda:	4b43      	ldr	r3, [pc, #268]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x176>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d001      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e1c0      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf2:	4b3d      	ldr	r3, [pc, #244]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4939      	ldr	r1, [pc, #228]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c06:	e03a      	b.n	8002c7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d020      	beq.n	8002c52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c10:	4b36      	ldr	r3, [pc, #216]	; (8002cec <HAL_RCC_OscConfig+0x270>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c16:	f7fd ffb9 	bl	8000b8c <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c1e:	f7fd ffb5 	bl	8000b8c <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e1a1      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c30:	4b2d      	ldr	r3, [pc, #180]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0f0      	beq.n	8002c1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4927      	ldr	r1, [pc, #156]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]
 8002c50:	e015      	b.n	8002c7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c52:	4b26      	ldr	r3, [pc, #152]	; (8002cec <HAL_RCC_OscConfig+0x270>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7fd ff98 	bl	8000b8c <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c60:	f7fd ff94 	bl	8000b8c <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e180      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c72:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d03a      	beq.n	8002d00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d019      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c92:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <HAL_RCC_OscConfig+0x274>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c98:	f7fd ff78 	bl	8000b8c <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca0:	f7fd ff74 	bl	8000b8c <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e160      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cbe:	2001      	movs	r0, #1
 8002cc0:	f000 faa6 	bl	8003210 <RCC_Delay>
 8002cc4:	e01c      	b.n	8002d00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <HAL_RCC_OscConfig+0x274>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ccc:	f7fd ff5e 	bl	8000b8c <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd2:	e00f      	b.n	8002cf4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd4:	f7fd ff5a 	bl	8000b8c <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d908      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e146      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	42420000 	.word	0x42420000
 8002cf0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf4:	4b92      	ldr	r3, [pc, #584]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1e9      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 80a6 	beq.w	8002e5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d12:	4b8b      	ldr	r3, [pc, #556]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10d      	bne.n	8002d3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1e:	4b88      	ldr	r3, [pc, #544]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	4a87      	ldr	r2, [pc, #540]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d28:	61d3      	str	r3, [r2, #28]
 8002d2a:	4b85      	ldr	r3, [pc, #532]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d36:	2301      	movs	r3, #1
 8002d38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3a:	4b82      	ldr	r3, [pc, #520]	; (8002f44 <HAL_RCC_OscConfig+0x4c8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d118      	bne.n	8002d78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d46:	4b7f      	ldr	r3, [pc, #508]	; (8002f44 <HAL_RCC_OscConfig+0x4c8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a7e      	ldr	r2, [pc, #504]	; (8002f44 <HAL_RCC_OscConfig+0x4c8>)
 8002d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d52:	f7fd ff1b 	bl	8000b8c <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5a:	f7fd ff17 	bl	8000b8c <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b64      	cmp	r3, #100	; 0x64
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e103      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6c:	4b75      	ldr	r3, [pc, #468]	; (8002f44 <HAL_RCC_OscConfig+0x4c8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d106      	bne.n	8002d8e <HAL_RCC_OscConfig+0x312>
 8002d80:	4b6f      	ldr	r3, [pc, #444]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	4a6e      	ldr	r2, [pc, #440]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	6213      	str	r3, [r2, #32]
 8002d8c:	e02d      	b.n	8002dea <HAL_RCC_OscConfig+0x36e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10c      	bne.n	8002db0 <HAL_RCC_OscConfig+0x334>
 8002d96:	4b6a      	ldr	r3, [pc, #424]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	4a69      	ldr	r2, [pc, #420]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	f023 0301 	bic.w	r3, r3, #1
 8002da0:	6213      	str	r3, [r2, #32]
 8002da2:	4b67      	ldr	r3, [pc, #412]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	4a66      	ldr	r2, [pc, #408]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002da8:	f023 0304 	bic.w	r3, r3, #4
 8002dac:	6213      	str	r3, [r2, #32]
 8002dae:	e01c      	b.n	8002dea <HAL_RCC_OscConfig+0x36e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	2b05      	cmp	r3, #5
 8002db6:	d10c      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x356>
 8002db8:	4b61      	ldr	r3, [pc, #388]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	4a60      	ldr	r2, [pc, #384]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002dbe:	f043 0304 	orr.w	r3, r3, #4
 8002dc2:	6213      	str	r3, [r2, #32]
 8002dc4:	4b5e      	ldr	r3, [pc, #376]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	4a5d      	ldr	r2, [pc, #372]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	6213      	str	r3, [r2, #32]
 8002dd0:	e00b      	b.n	8002dea <HAL_RCC_OscConfig+0x36e>
 8002dd2:	4b5b      	ldr	r3, [pc, #364]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4a5a      	ldr	r2, [pc, #360]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	f023 0301 	bic.w	r3, r3, #1
 8002ddc:	6213      	str	r3, [r2, #32]
 8002dde:	4b58      	ldr	r3, [pc, #352]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4a57      	ldr	r2, [pc, #348]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	f023 0304 	bic.w	r3, r3, #4
 8002de8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d015      	beq.n	8002e1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df2:	f7fd fecb 	bl	8000b8c <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df8:	e00a      	b.n	8002e10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfa:	f7fd fec7 	bl	8000b8c <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e0b1      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e10:	4b4b      	ldr	r3, [pc, #300]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0ee      	beq.n	8002dfa <HAL_RCC_OscConfig+0x37e>
 8002e1c:	e014      	b.n	8002e48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1e:	f7fd feb5 	bl	8000b8c <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e24:	e00a      	b.n	8002e3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e26:	f7fd feb1 	bl	8000b8c <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e09b      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e3c:	4b40      	ldr	r3, [pc, #256]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1ee      	bne.n	8002e26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e48:	7dfb      	ldrb	r3, [r7, #23]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d105      	bne.n	8002e5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e4e:	4b3c      	ldr	r3, [pc, #240]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	4a3b      	ldr	r2, [pc, #236]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 8087 	beq.w	8002f72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e64:	4b36      	ldr	r3, [pc, #216]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 030c 	and.w	r3, r3, #12
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d061      	beq.n	8002f34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d146      	bne.n	8002f06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e78:	4b33      	ldr	r3, [pc, #204]	; (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7e:	f7fd fe85 	bl	8000b8c <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e86:	f7fd fe81 	bl	8000b8c <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e06d      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e98:	4b29      	ldr	r3, [pc, #164]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1f0      	bne.n	8002e86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eac:	d108      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002eae:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	4921      	ldr	r1, [pc, #132]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec0:	4b1f      	ldr	r3, [pc, #124]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a19      	ldr	r1, [r3, #32]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	491b      	ldr	r1, [pc, #108]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ed8:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ede:	f7fd fe55 	bl	8000b8c <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee6:	f7fd fe51 	bl	8000b8c <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e03d      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ef8:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x46a>
 8002f04:	e035      	b.n	8002f72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f06:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fd fe3e 	bl	8000b8c <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f14:	f7fd fe3a 	bl	8000b8c <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e026      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f26:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f0      	bne.n	8002f14 <HAL_RCC_OscConfig+0x498>
 8002f32:	e01e      	b.n	8002f72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d107      	bne.n	8002f4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e019      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
 8002f40:	40021000 	.word	0x40021000
 8002f44:	40007000 	.word	0x40007000
 8002f48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_RCC_OscConfig+0x500>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d106      	bne.n	8002f6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d001      	beq.n	8002f72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40021000 	.word	0x40021000

08002f80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0d0      	b.n	8003136 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f94:	4b6a      	ldr	r3, [pc, #424]	; (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d910      	bls.n	8002fc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa2:	4b67      	ldr	r3, [pc, #412]	; (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 0207 	bic.w	r2, r3, #7
 8002faa:	4965      	ldr	r1, [pc, #404]	; (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb2:	4b63      	ldr	r3, [pc, #396]	; (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0b8      	b.n	8003136 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d020      	beq.n	8003012 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fdc:	4b59      	ldr	r3, [pc, #356]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	4a58      	ldr	r2, [pc, #352]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fe6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ff4:	4b53      	ldr	r3, [pc, #332]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	4a52      	ldr	r2, [pc, #328]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ffe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003000:	4b50      	ldr	r3, [pc, #320]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	494d      	ldr	r1, [pc, #308]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 800300e:	4313      	orrs	r3, r2
 8003010:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d040      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d107      	bne.n	8003036 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003026:	4b47      	ldr	r3, [pc, #284]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d115      	bne.n	800305e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e07f      	b.n	8003136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d107      	bne.n	800304e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303e:	4b41      	ldr	r3, [pc, #260]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d109      	bne.n	800305e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e073      	b.n	8003136 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304e:	4b3d      	ldr	r3, [pc, #244]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e06b      	b.n	8003136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800305e:	4b39      	ldr	r3, [pc, #228]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f023 0203 	bic.w	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	4936      	ldr	r1, [pc, #216]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 800306c:	4313      	orrs	r3, r2
 800306e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003070:	f7fd fd8c 	bl	8000b8c <HAL_GetTick>
 8003074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003076:	e00a      	b.n	800308e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003078:	f7fd fd88 	bl	8000b8c <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	f241 3288 	movw	r2, #5000	; 0x1388
 8003086:	4293      	cmp	r3, r2
 8003088:	d901      	bls.n	800308e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e053      	b.n	8003136 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308e:	4b2d      	ldr	r3, [pc, #180]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 020c 	and.w	r2, r3, #12
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	429a      	cmp	r2, r3
 800309e:	d1eb      	bne.n	8003078 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030a0:	4b27      	ldr	r3, [pc, #156]	; (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d210      	bcs.n	80030d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b24      	ldr	r3, [pc, #144]	; (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 0207 	bic.w	r2, r3, #7
 80030b6:	4922      	ldr	r1, [pc, #136]	; (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	4b20      	ldr	r3, [pc, #128]	; (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e032      	b.n	8003136 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030dc:	4b19      	ldr	r3, [pc, #100]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4916      	ldr	r1, [pc, #88]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d009      	beq.n	800310e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030fa:	4b12      	ldr	r3, [pc, #72]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	490e      	ldr	r1, [pc, #56]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	4313      	orrs	r3, r2
 800310c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800310e:	f000 f821 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 8003112:	4602      	mov	r2, r0
 8003114:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	091b      	lsrs	r3, r3, #4
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	490a      	ldr	r1, [pc, #40]	; (8003148 <HAL_RCC_ClockConfig+0x1c8>)
 8003120:	5ccb      	ldrb	r3, [r1, r3]
 8003122:	fa22 f303 	lsr.w	r3, r2, r3
 8003126:	4a09      	ldr	r2, [pc, #36]	; (800314c <HAL_RCC_ClockConfig+0x1cc>)
 8003128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800312a:	4b09      	ldr	r3, [pc, #36]	; (8003150 <HAL_RCC_ClockConfig+0x1d0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd fcea 	bl	8000b08 <HAL_InitTick>

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40022000 	.word	0x40022000
 8003144:	40021000 	.word	0x40021000
 8003148:	08008974 	.word	0x08008974
 800314c:	20000000 	.word	0x20000000
 8003150:	20000004 	.word	0x20000004

08003154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003154:	b490      	push	{r4, r7}
 8003156:	b08a      	sub	sp, #40	; 0x28
 8003158:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800315a:	4b29      	ldr	r3, [pc, #164]	; (8003200 <HAL_RCC_GetSysClockFreq+0xac>)
 800315c:	1d3c      	adds	r4, r7, #4
 800315e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003160:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003164:	f240 2301 	movw	r3, #513	; 0x201
 8003168:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
 800316e:	2300      	movs	r3, #0
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	2300      	movs	r3, #0
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800317e:	4b21      	ldr	r3, [pc, #132]	; (8003204 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	2b04      	cmp	r3, #4
 800318c:	d002      	beq.n	8003194 <HAL_RCC_GetSysClockFreq+0x40>
 800318e:	2b08      	cmp	r3, #8
 8003190:	d003      	beq.n	800319a <HAL_RCC_GetSysClockFreq+0x46>
 8003192:	e02b      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003194:	4b1c      	ldr	r3, [pc, #112]	; (8003208 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003196:	623b      	str	r3, [r7, #32]
      break;
 8003198:	e02b      	b.n	80031f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	0c9b      	lsrs	r3, r3, #18
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	3328      	adds	r3, #40	; 0x28
 80031a4:	443b      	add	r3, r7
 80031a6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031aa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d012      	beq.n	80031dc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031b6:	4b13      	ldr	r3, [pc, #76]	; (8003204 <HAL_RCC_GetSysClockFreq+0xb0>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	0c5b      	lsrs	r3, r3, #17
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	3328      	adds	r3, #40	; 0x28
 80031c2:	443b      	add	r3, r7
 80031c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80031c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	4a0e      	ldr	r2, [pc, #56]	; (8003208 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031ce:	fb03 f202 	mul.w	r2, r3, r2
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
 80031da:	e004      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	4a0b      	ldr	r2, [pc, #44]	; (800320c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031e0:	fb02 f303 	mul.w	r3, r2, r3
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	623b      	str	r3, [r7, #32]
      break;
 80031ea:	e002      	b.n	80031f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031ee:	623b      	str	r3, [r7, #32]
      break;
 80031f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031f2:	6a3b      	ldr	r3, [r7, #32]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3728      	adds	r7, #40	; 0x28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc90      	pop	{r4, r7}
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	0800891c 	.word	0x0800891c
 8003204:	40021000 	.word	0x40021000
 8003208:	007a1200 	.word	0x007a1200
 800320c:	003d0900 	.word	0x003d0900

08003210 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <RCC_Delay+0x34>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a0a      	ldr	r2, [pc, #40]	; (8003248 <RCC_Delay+0x38>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	0a5b      	lsrs	r3, r3, #9
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	fb02 f303 	mul.w	r3, r2, r3
 800322a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800322c:	bf00      	nop
  }
  while (Delay --);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1e5a      	subs	r2, r3, #1
 8003232:	60fa      	str	r2, [r7, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1f9      	bne.n	800322c <RCC_Delay+0x1c>
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr
 8003244:	20000000 	.word	0x20000000
 8003248:	10624dd3 	.word	0x10624dd3

0800324c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d07d      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003268:	2300      	movs	r3, #0
 800326a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800326c:	4b4f      	ldr	r3, [pc, #316]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10d      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003278:	4b4c      	ldr	r3, [pc, #304]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	4a4b      	ldr	r2, [pc, #300]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003282:	61d3      	str	r3, [r2, #28]
 8003284:	4b49      	ldr	r3, [pc, #292]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003290:	2301      	movs	r3, #1
 8003292:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003294:	4b46      	ldr	r3, [pc, #280]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d118      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a0:	4b43      	ldr	r3, [pc, #268]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a42      	ldr	r2, [pc, #264]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ac:	f7fd fc6e 	bl	8000b8c <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b2:	e008      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b4:	f7fd fc6a 	bl	8000b8c <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b64      	cmp	r3, #100	; 0x64
 80032c0:	d901      	bls.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e06d      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c6:	4b3a      	ldr	r3, [pc, #232]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032d2:	4b36      	ldr	r3, [pc, #216]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d02e      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d027      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032f0:	4b2e      	ldr	r3, [pc, #184]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032fa:	4b2e      	ldr	r3, [pc, #184]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003300:	4b2c      	ldr	r3, [pc, #176]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003306:	4a29      	ldr	r2, [pc, #164]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d014      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003316:	f7fd fc39 	bl	8000b8c <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331c:	e00a      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331e:	f7fd fc35 	bl	8000b8c <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	f241 3288 	movw	r2, #5000	; 0x1388
 800332c:	4293      	cmp	r3, r2
 800332e:	d901      	bls.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e036      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003334:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0ee      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4917      	ldr	r1, [pc, #92]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334e:	4313      	orrs	r3, r2
 8003350:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003352:	7dfb      	ldrb	r3, [r7, #23]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d105      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003358:	4b14      	ldr	r3, [pc, #80]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	4a13      	ldr	r2, [pc, #76]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003362:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003370:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	490b      	ldr	r1, [pc, #44]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337e:	4313      	orrs	r3, r2
 8003380:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b00      	cmp	r3, #0
 800338c:	d008      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800338e:	4b07      	ldr	r3, [pc, #28]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	4904      	ldr	r1, [pc, #16]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339c:	4313      	orrs	r3, r2
 800339e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40021000 	.word	0x40021000
 80033b0:	40007000 	.word	0x40007000
 80033b4:	42420440 	.word	0x42420440

080033b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e076      	b.n	80034b8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d108      	bne.n	80033e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033da:	d009      	beq.n	80033f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	61da      	str	r2, [r3, #28]
 80033e2:	e005      	b.n	80033f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fd fa32 	bl	8000874 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003426:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003474:	ea42 0103 	orr.w	r1, r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	0c1a      	lsrs	r2, r3, #16
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f002 0204 	and.w	r2, r2, #4
 8003496:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	603b      	str	r3, [r7, #0]
 80034cc:	4613      	mov	r3, r2
 80034ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_SPI_Transmit+0x22>
 80034de:	2302      	movs	r3, #2
 80034e0:	e126      	b.n	8003730 <HAL_SPI_Transmit+0x270>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034ea:	f7fd fb4f 	bl	8000b8c <HAL_GetTick>
 80034ee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034f0:	88fb      	ldrh	r3, [r7, #6]
 80034f2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d002      	beq.n	8003506 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003500:	2302      	movs	r3, #2
 8003502:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003504:	e10b      	b.n	800371e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <HAL_SPI_Transmit+0x52>
 800350c:	88fb      	ldrh	r3, [r7, #6]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d102      	bne.n	8003518 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003516:	e102      	b.n	800371e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2203      	movs	r2, #3
 800351c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	88fa      	ldrh	r2, [r7, #6]
 8003530:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	88fa      	ldrh	r2, [r7, #6]
 8003536:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800355e:	d10f      	bne.n	8003580 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800356e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800357e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358a:	2b40      	cmp	r3, #64	; 0x40
 800358c:	d007      	beq.n	800359e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800359c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035a6:	d14b      	bne.n	8003640 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <HAL_SPI_Transmit+0xf6>
 80035b0:	8afb      	ldrh	r3, [r7, #22]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d13e      	bne.n	8003634 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	881a      	ldrh	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	1c9a      	adds	r2, r3, #2
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035da:	e02b      	b.n	8003634 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d112      	bne.n	8003610 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	881a      	ldrh	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	1c9a      	adds	r2, r3, #2
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003604:	b29b      	uxth	r3, r3
 8003606:	3b01      	subs	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	86da      	strh	r2, [r3, #54]	; 0x36
 800360e:	e011      	b.n	8003634 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003610:	f7fd fabc 	bl	8000b8c <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d803      	bhi.n	8003628 <HAL_SPI_Transmit+0x168>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003626:	d102      	bne.n	800362e <HAL_SPI_Transmit+0x16e>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d102      	bne.n	8003634 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003632:	e074      	b.n	800371e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1ce      	bne.n	80035dc <HAL_SPI_Transmit+0x11c>
 800363e:	e04c      	b.n	80036da <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_SPI_Transmit+0x18e>
 8003648:	8afb      	ldrh	r3, [r7, #22]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d140      	bne.n	80036d0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	330c      	adds	r3, #12
 8003658:	7812      	ldrb	r2, [r2, #0]
 800365a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003674:	e02c      	b.n	80036d0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b02      	cmp	r3, #2
 8003682:	d113      	bne.n	80036ac <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	330c      	adds	r3, #12
 800368e:	7812      	ldrb	r2, [r2, #0]
 8003690:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80036aa:	e011      	b.n	80036d0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036ac:	f7fd fa6e 	bl	8000b8c <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d803      	bhi.n	80036c4 <HAL_SPI_Transmit+0x204>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c2:	d102      	bne.n	80036ca <HAL_SPI_Transmit+0x20a>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d102      	bne.n	80036d0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036ce:	e026      	b.n	800371e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1cd      	bne.n	8003676 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	6839      	ldr	r1, [r7, #0]
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f8b2 	bl	8003848 <SPI_EndRxTxTransaction>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2220      	movs	r2, #32
 80036ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	613b      	str	r3, [r7, #16]
 800370c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	77fb      	strb	r3, [r7, #31]
 800371a:	e000      	b.n	800371e <HAL_SPI_Transmit+0x25e>
  }

error:
 800371c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800372e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3720      	adds	r7, #32
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	4613      	mov	r3, r2
 8003746:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003748:	f7fd fa20 	bl	8000b8c <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	4413      	add	r3, r2
 8003756:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003758:	f7fd fa18 	bl	8000b8c <HAL_GetTick>
 800375c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800375e:	4b39      	ldr	r3, [pc, #228]	; (8003844 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	015b      	lsls	r3, r3, #5
 8003764:	0d1b      	lsrs	r3, r3, #20
 8003766:	69fa      	ldr	r2, [r7, #28]
 8003768:	fb02 f303 	mul.w	r3, r2, r3
 800376c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800376e:	e054      	b.n	800381a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003776:	d050      	beq.n	800381a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003778:	f7fd fa08 	bl	8000b8c <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	429a      	cmp	r2, r3
 8003786:	d902      	bls.n	800378e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d13d      	bne.n	800380a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800379c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037a6:	d111      	bne.n	80037cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b0:	d004      	beq.n	80037bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ba:	d107      	bne.n	80037cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d4:	d10f      	bne.n	80037f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e017      	b.n	800383a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	3b01      	subs	r3, #1
 8003818:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4013      	ands	r3, r2
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	429a      	cmp	r2, r3
 8003828:	bf0c      	ite	eq
 800382a:	2301      	moveq	r3, #1
 800382c:	2300      	movne	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	461a      	mov	r2, r3
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	429a      	cmp	r2, r3
 8003836:	d19b      	bne.n	8003770 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3720      	adds	r7, #32
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000000 	.word	0x20000000

08003848 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af02      	add	r7, sp, #8
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2200      	movs	r2, #0
 800385c:	2180      	movs	r1, #128	; 0x80
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f7ff ff6a 	bl	8003738 <SPI_WaitFlagStateUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d007      	beq.n	800387a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	f043 0220 	orr.w	r2, r3, #32
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e000      	b.n	800387c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e093      	b.n	80039c0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d106      	bne.n	80038b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7fd f821 	bl	80008f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2202      	movs	r2, #2
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6812      	ldr	r2, [r2, #0]
 80038c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038c8:	f023 0307 	bic.w	r3, r3, #7
 80038cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3304      	adds	r3, #4
 80038d6:	4619      	mov	r1, r3
 80038d8:	4610      	mov	r0, r2
 80038da:	f000 f903 	bl	8003ae4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003906:	f023 0303 	bic.w	r3, r3, #3
 800390a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	021b      	lsls	r3, r3, #8
 8003916:	4313      	orrs	r3, r2
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003924:	f023 030c 	bic.w	r3, r3, #12
 8003928:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003930:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003934:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	4313      	orrs	r3, r2
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	011a      	lsls	r2, r3, #4
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	031b      	lsls	r3, r3, #12
 8003954:	4313      	orrs	r3, r2
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003962:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	4313      	orrs	r3, r2
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80039f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d110      	bne.n	8003a1a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d102      	bne.n	8003a04 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80039fe:	7b7b      	ldrb	r3, [r7, #13]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d001      	beq.n	8003a08 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e069      	b.n	8003adc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a18:	e031      	b.n	8003a7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d110      	bne.n	8003a42 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a20:	7bbb      	ldrb	r3, [r7, #14]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d102      	bne.n	8003a2c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a26:	7b3b      	ldrb	r3, [r7, #12]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d001      	beq.n	8003a30 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e055      	b.n	8003adc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a40:	e01d      	b.n	8003a7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d108      	bne.n	8003a5a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a48:	7bbb      	ldrb	r3, [r7, #14]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d105      	bne.n	8003a5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a4e:	7b7b      	ldrb	r3, [r7, #13]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d102      	bne.n	8003a5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a54:	7b3b      	ldrb	r3, [r7, #12]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d001      	beq.n	8003a5e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e03e      	b.n	8003adc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2202      	movs	r2, #2
 8003a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2202      	movs	r2, #2
 8003a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2202      	movs	r2, #2
 8003a7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_TIM_Encoder_Start+0xc4>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d008      	beq.n	8003a9c <HAL_TIM_Encoder_Start+0xd4>
 8003a8a:	e00f      	b.n	8003aac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2201      	movs	r2, #1
 8003a92:	2100      	movs	r1, #0
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 f887 	bl	8003ba8 <TIM_CCxChannelCmd>
      break;
 8003a9a:	e016      	b.n	8003aca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	2104      	movs	r1, #4
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 f87f 	bl	8003ba8 <TIM_CCxChannelCmd>
      break;
 8003aaa:	e00e      	b.n	8003aca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 f877 	bl	8003ba8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	2104      	movs	r1, #4
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 f870 	bl	8003ba8 <TIM_CCxChannelCmd>
      break;
 8003ac8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0201 	orr.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a29      	ldr	r2, [pc, #164]	; (8003b9c <TIM_Base_SetConfig+0xb8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00b      	beq.n	8003b14 <TIM_Base_SetConfig+0x30>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b02:	d007      	beq.n	8003b14 <TIM_Base_SetConfig+0x30>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a26      	ldr	r2, [pc, #152]	; (8003ba0 <TIM_Base_SetConfig+0xbc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d003      	beq.n	8003b14 <TIM_Base_SetConfig+0x30>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a25      	ldr	r2, [pc, #148]	; (8003ba4 <TIM_Base_SetConfig+0xc0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d108      	bne.n	8003b26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a1c      	ldr	r2, [pc, #112]	; (8003b9c <TIM_Base_SetConfig+0xb8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00b      	beq.n	8003b46 <TIM_Base_SetConfig+0x62>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b34:	d007      	beq.n	8003b46 <TIM_Base_SetConfig+0x62>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a19      	ldr	r2, [pc, #100]	; (8003ba0 <TIM_Base_SetConfig+0xbc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d003      	beq.n	8003b46 <TIM_Base_SetConfig+0x62>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a18      	ldr	r2, [pc, #96]	; (8003ba4 <TIM_Base_SetConfig+0xc0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d108      	bne.n	8003b58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a07      	ldr	r2, [pc, #28]	; (8003b9c <TIM_Base_SetConfig+0xb8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d103      	bne.n	8003b8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	615a      	str	r2, [r3, #20]
}
 8003b92:	bf00      	nop
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr
 8003b9c:	40012c00 	.word	0x40012c00
 8003ba0:	40000400 	.word	0x40000400
 8003ba4:	40000800 	.word	0x40000800

08003ba8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	2201      	movs	r2, #1
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a1a      	ldr	r2, [r3, #32]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	401a      	ands	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a1a      	ldr	r2, [r3, #32]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f003 031f 	and.w	r3, r3, #31
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	621a      	str	r2, [r3, #32]
}
 8003be6:	bf00      	nop
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e046      	b.n	8003c96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a16      	ldr	r2, [pc, #88]	; (8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00e      	beq.n	8003c6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c54:	d009      	beq.n	8003c6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a12      	ldr	r2, [pc, #72]	; (8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d004      	beq.n	8003c6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a10      	ldr	r2, [pc, #64]	; (8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d10c      	bne.n	8003c84 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	40012c00 	.word	0x40012c00
 8003ca4:	40000400 	.word	0x40000400
 8003ca8:	40000800 	.word	0x40000800

08003cac <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003cac:	b084      	sub	sp, #16
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	f107 0014 	add.w	r0, r7, #20
 8003cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	b004      	add	sp, #16
 8003cca:	4770      	bx	lr

08003ccc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003cdc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ce0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr

08003cf8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d00:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003d04:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	43db      	mvns	r3, r3
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	4013      	ands	r3, r2
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr

08003d2c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d44:	b084      	sub	sp, #16
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	f107 0014 	add.w	r0, r7, #20
 8003d52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	b004      	add	sp, #16
 8003d82:	4770      	bx	lr

08003d84 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b09b      	sub	sp, #108	; 0x6c
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003daa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	78db      	ldrb	r3, [r3, #3]
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d81f      	bhi.n	8003df6 <USB_ActivateEndpoint+0x72>
 8003db6:	a201      	add	r2, pc, #4	; (adr r2, 8003dbc <USB_ActivateEndpoint+0x38>)
 8003db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbc:	08003dcd 	.word	0x08003dcd
 8003dc0:	08003de9 	.word	0x08003de9
 8003dc4:	08003dff 	.word	0x08003dff
 8003dc8:	08003ddb 	.word	0x08003ddb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003dcc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003dd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dd4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003dd8:	e012      	b.n	8003e00 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003dda:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003dde:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003de2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003de6:	e00b      	b.n	8003e00 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003de8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003dec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003df0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003df4:	e004      	b.n	8003e00 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003dfc:	e000      	b.n	8003e00 <USB_ActivateEndpoint+0x7c>
      break;
 8003dfe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	441a      	add	r2, r3
 8003e0a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	441a      	add	r2, r3
 8003e50:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	7b1b      	ldrb	r3, [r3, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f040 8149 	bne.w	8004104 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	785b      	ldrb	r3, [r3, #1]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 8084 	beq.w	8003f84 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	461a      	mov	r2, r3
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	011a      	lsls	r2, r3, #4
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	88db      	ldrh	r3, [r3, #6]
 8003ea4:	085b      	lsrs	r3, r3, #1
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	81fb      	strh	r3, [r7, #14]
 8003ebe:	89fb      	ldrh	r3, [r7, #14]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d01b      	beq.n	8003f00 <USB_ActivateEndpoint+0x17c>
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ede:	81bb      	strh	r3, [r7, #12]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	441a      	add	r2, r3
 8003eea:	89bb      	ldrh	r3, [r7, #12]
 8003eec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	78db      	ldrb	r3, [r3, #3]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d020      	beq.n	8003f4a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f1e:	813b      	strh	r3, [r7, #8]
 8003f20:	893b      	ldrh	r3, [r7, #8]
 8003f22:	f083 0320 	eor.w	r3, r3, #32
 8003f26:	813b      	strh	r3, [r7, #8]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	441a      	add	r2, r3
 8003f32:	893b      	ldrh	r3, [r7, #8]
 8003f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	8013      	strh	r3, [r2, #0]
 8003f48:	e27f      	b.n	800444a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f60:	817b      	strh	r3, [r7, #10]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	441a      	add	r2, r3
 8003f6c:	897b      	ldrh	r3, [r7, #10]
 8003f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	8013      	strh	r3, [r2, #0]
 8003f82:	e262      	b.n	800444a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f94:	4413      	add	r3, r2
 8003f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	011a      	lsls	r2, r3, #4
 8003f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	88db      	ldrh	r3, [r3, #6]
 8003fac:	085b      	lsrs	r3, r3, #1
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	4413      	add	r3, r2
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	011a      	lsls	r2, r3, #4
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fda:	623b      	str	r3, [r7, #32]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d112      	bne.n	800400a <USB_ActivateEndpoint+0x286>
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	801a      	strh	r2, [r3, #0]
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004002:	b29a      	uxth	r2, r3
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	801a      	strh	r2, [r3, #0]
 8004008:	e02f      	b.n	800406a <USB_ActivateEndpoint+0x2e6>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b3e      	cmp	r3, #62	; 0x3e
 8004010:	d813      	bhi.n	800403a <USB_ActivateEndpoint+0x2b6>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	663b      	str	r3, [r7, #96]	; 0x60
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <USB_ActivateEndpoint+0x2a8>
 8004026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004028:	3301      	adds	r3, #1
 800402a:	663b      	str	r3, [r7, #96]	; 0x60
 800402c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800402e:	b29b      	uxth	r3, r3
 8004030:	029b      	lsls	r3, r3, #10
 8004032:	b29a      	uxth	r2, r3
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	801a      	strh	r2, [r3, #0]
 8004038:	e017      	b.n	800406a <USB_ActivateEndpoint+0x2e6>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	663b      	str	r3, [r7, #96]	; 0x60
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f003 031f 	and.w	r3, r3, #31
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <USB_ActivateEndpoint+0x2d0>
 800404e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004050:	3b01      	subs	r3, #1
 8004052:	663b      	str	r3, [r7, #96]	; 0x60
 8004054:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004056:	b29b      	uxth	r3, r3
 8004058:	029b      	lsls	r3, r3, #10
 800405a:	b29b      	uxth	r3, r3
 800405c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004064:	b29a      	uxth	r2, r3
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	83fb      	strh	r3, [r7, #30]
 8004078:	8bfb      	ldrh	r3, [r7, #30]
 800407a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d01b      	beq.n	80040ba <USB_ActivateEndpoint+0x336>
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	b29b      	uxth	r3, r3
 8004090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004098:	83bb      	strh	r3, [r7, #28]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	441a      	add	r2, r3
 80040a4:	8bbb      	ldrh	r3, [r7, #28]
 80040a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d0:	837b      	strh	r3, [r7, #26]
 80040d2:	8b7b      	ldrh	r3, [r7, #26]
 80040d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80040d8:	837b      	strh	r3, [r7, #26]
 80040da:	8b7b      	ldrh	r3, [r7, #26]
 80040dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040e0:	837b      	strh	r3, [r7, #26]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	441a      	add	r2, r3
 80040ec:	8b7b      	ldrh	r3, [r7, #26]
 80040ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040fe:	b29b      	uxth	r3, r3
 8004100:	8013      	strh	r3, [r2, #0]
 8004102:	e1a2      	b.n	800444a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	b29b      	uxth	r3, r3
 8004112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	441a      	add	r2, r3
 8004128:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800412c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004134:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800413c:	b29b      	uxth	r3, r3
 800413e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	65bb      	str	r3, [r7, #88]	; 0x58
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800414a:	b29b      	uxth	r3, r3
 800414c:	461a      	mov	r2, r3
 800414e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004150:	4413      	add	r3, r2
 8004152:	65bb      	str	r3, [r7, #88]	; 0x58
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	011a      	lsls	r2, r3, #4
 800415a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800415c:	4413      	add	r3, r2
 800415e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004162:	657b      	str	r3, [r7, #84]	; 0x54
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	891b      	ldrh	r3, [r3, #8]
 8004168:	085b      	lsrs	r3, r3, #1
 800416a:	b29b      	uxth	r3, r3
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004172:	801a      	strh	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	653b      	str	r3, [r7, #80]	; 0x50
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800417e:	b29b      	uxth	r3, r3
 8004180:	461a      	mov	r2, r3
 8004182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004184:	4413      	add	r3, r2
 8004186:	653b      	str	r3, [r7, #80]	; 0x50
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	011a      	lsls	r2, r3, #4
 800418e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004190:	4413      	add	r3, r2
 8004192:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	895b      	ldrh	r3, [r3, #10]
 800419c:	085b      	lsrs	r3, r3, #1
 800419e:	b29b      	uxth	r3, r3
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	785b      	ldrb	r3, [r3, #1]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f040 8091 	bne.w	80042d4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80041c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80041c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d01b      	beq.n	8004202 <USB_ActivateEndpoint+0x47e>
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	441a      	add	r2, r3
 80041ec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80041ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041fe:	b29b      	uxth	r3, r3
 8004200:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004210:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004216:	2b00      	cmp	r3, #0
 8004218:	d01b      	beq.n	8004252 <USB_ActivateEndpoint+0x4ce>
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	b29b      	uxth	r3, r3
 8004228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004230:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	441a      	add	r2, r3
 800423c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800423e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800424a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800424e:	b29b      	uxth	r3, r3
 8004250:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	b29b      	uxth	r3, r3
 8004260:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004268:	86bb      	strh	r3, [r7, #52]	; 0x34
 800426a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800426c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004270:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004272:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004274:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004278:	86bb      	strh	r3, [r7, #52]	; 0x34
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	441a      	add	r2, r3
 8004284:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800428a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800428e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004296:	b29b      	uxth	r3, r3
 8004298:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042b0:	867b      	strh	r3, [r7, #50]	; 0x32
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	441a      	add	r2, r3
 80042bc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80042be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	8013      	strh	r3, [r2, #0]
 80042d2:	e0ba      	b.n	800444a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80042e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80042e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01d      	beq.n	800432c <USB_ActivateEndpoint+0x5a8>
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004306:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	441a      	add	r2, r3
 8004314:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800431c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004320:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004328:	b29b      	uxth	r3, r3
 800432a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800433c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01d      	beq.n	8004384 <USB_ActivateEndpoint+0x600>
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800435a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	441a      	add	r2, r3
 800436c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800437c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004380:	b29b      	uxth	r3, r3
 8004382:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	78db      	ldrb	r3, [r3, #3]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d024      	beq.n	80043d6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	b29b      	uxth	r3, r3
 800439a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80043a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80043aa:	f083 0320 	eor.w	r3, r3, #32
 80043ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	441a      	add	r2, r3
 80043bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80043c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	8013      	strh	r3, [r2, #0]
 80043d4:	e01d      	b.n	8004412 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	441a      	add	r2, r3
 80043fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80043fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800440a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800440e:	b29b      	uxth	r3, r3
 8004410:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	b29b      	uxth	r3, r3
 8004420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004428:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	441a      	add	r2, r3
 8004434:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800443a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800443e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004446:	b29b      	uxth	r3, r3
 8004448:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800444a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800444e:	4618      	mov	r0, r3
 8004450:	376c      	adds	r7, #108	; 0x6c
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004458:	b480      	push	{r7}
 800445a:	b08d      	sub	sp, #52	; 0x34
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	7b1b      	ldrb	r3, [r3, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	f040 808e 	bne.w	8004588 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	785b      	ldrb	r3, [r3, #1]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d044      	beq.n	80044fe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	81bb      	strh	r3, [r7, #12]
 8004482:	89bb      	ldrh	r3, [r7, #12]
 8004484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004488:	2b00      	cmp	r3, #0
 800448a:	d01b      	beq.n	80044c4 <USB_DeactivateEndpoint+0x6c>
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	b29b      	uxth	r3, r3
 800449a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800449e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a2:	817b      	strh	r3, [r7, #10]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	441a      	add	r2, r3
 80044ae:	897b      	ldrh	r3, [r7, #10]
 80044b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044da:	813b      	strh	r3, [r7, #8]
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	441a      	add	r2, r3
 80044e6:	893b      	ldrh	r3, [r7, #8]
 80044e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	8013      	strh	r3, [r2, #0]
 80044fc:	e192      	b.n	8004824 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	827b      	strh	r3, [r7, #18]
 800450c:	8a7b      	ldrh	r3, [r7, #18]
 800450e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d01b      	beq.n	800454e <USB_DeactivateEndpoint+0xf6>
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	b29b      	uxth	r3, r3
 8004524:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452c:	823b      	strh	r3, [r7, #16]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	441a      	add	r2, r3
 8004538:	8a3b      	ldrh	r3, [r7, #16]
 800453a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800453e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004542:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800454a:	b29b      	uxth	r3, r3
 800454c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	b29b      	uxth	r3, r3
 800455c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004564:	81fb      	strh	r3, [r7, #14]
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	441a      	add	r2, r3
 8004570:	89fb      	ldrh	r3, [r7, #14]
 8004572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800457a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800457e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004582:	b29b      	uxth	r3, r3
 8004584:	8013      	strh	r3, [r2, #0]
 8004586:	e14d      	b.n	8004824 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	785b      	ldrb	r3, [r3, #1]
 800458c:	2b00      	cmp	r3, #0
 800458e:	f040 80a5 	bne.w	80046dc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	843b      	strh	r3, [r7, #32]
 80045a0:	8c3b      	ldrh	r3, [r7, #32]
 80045a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d01b      	beq.n	80045e2 <USB_DeactivateEndpoint+0x18a>
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c0:	83fb      	strh	r3, [r7, #30]
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	441a      	add	r2, r3
 80045cc:	8bfb      	ldrh	r3, [r7, #30]
 80045ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045de:	b29b      	uxth	r3, r3
 80045e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	83bb      	strh	r3, [r7, #28]
 80045f0:	8bbb      	ldrh	r3, [r7, #28]
 80045f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d01b      	beq.n	8004632 <USB_DeactivateEndpoint+0x1da>
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	b29b      	uxth	r3, r3
 8004608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800460c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004610:	837b      	strh	r3, [r7, #26]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	441a      	add	r2, r3
 800461c:	8b7b      	ldrh	r3, [r7, #26]
 800461e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800462a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800462e:	b29b      	uxth	r3, r3
 8004630:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	b29b      	uxth	r3, r3
 8004640:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004648:	833b      	strh	r3, [r7, #24]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	441a      	add	r2, r3
 8004654:	8b3b      	ldrh	r3, [r7, #24]
 8004656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800465a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800465e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004662:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004666:	b29b      	uxth	r3, r3
 8004668:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800467c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004680:	82fb      	strh	r3, [r7, #22]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	441a      	add	r2, r3
 800468c:	8afb      	ldrh	r3, [r7, #22]
 800468e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800469a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469e:	b29b      	uxth	r3, r3
 80046a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046b8:	82bb      	strh	r3, [r7, #20]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	441a      	add	r2, r3
 80046c4:	8abb      	ldrh	r3, [r7, #20]
 80046c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	8013      	strh	r3, [r2, #0]
 80046da:	e0a3      	b.n	8004824 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80046ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01b      	beq.n	800472c <USB_DeactivateEndpoint+0x2d4>
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	b29b      	uxth	r3, r3
 8004702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	441a      	add	r2, r3
 8004716:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800471c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004720:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004728:	b29b      	uxth	r3, r3
 800472a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	857b      	strh	r3, [r7, #42]	; 0x2a
 800473a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800473c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004740:	2b00      	cmp	r3, #0
 8004742:	d01b      	beq.n	800477c <USB_DeactivateEndpoint+0x324>
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	b29b      	uxth	r3, r3
 8004752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475a:	853b      	strh	r3, [r7, #40]	; 0x28
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	441a      	add	r2, r3
 8004766:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800476c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004774:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004778:	b29b      	uxth	r3, r3
 800477a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	b29b      	uxth	r3, r3
 800478a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800478e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004792:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	441a      	add	r2, r3
 800479e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	441a      	add	r2, r3
 80047d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004802:	847b      	strh	r3, [r7, #34]	; 0x22
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	441a      	add	r2, r3
 800480e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800481c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004820:	b29b      	uxth	r3, r3
 8004822:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3734      	adds	r7, #52	; 0x34
 800482a:	46bd      	mov	sp, r7
 800482c:	bc80      	pop	{r7}
 800482e:	4770      	bx	lr

08004830 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b0cc      	sub	sp, #304	; 0x130
 8004834:	af00      	add	r7, sp, #0
 8004836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800483a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800483e:	6018      	str	r0, [r3, #0]
 8004840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004844:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004848:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800484a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800484e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	785b      	ldrb	r3, [r3, #1]
 8004856:	2b01      	cmp	r3, #1
 8004858:	f041 817d 	bne.w	8005b56 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800485c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004860:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699a      	ldr	r2, [r3, #24]
 8004868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800486c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	429a      	cmp	r2, r3
 8004876:	d908      	bls.n	800488a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800487c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004888:	e007      	b.n	800489a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800488a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800488e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800489a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800489e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	7b1b      	ldrb	r3, [r3, #12]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d152      	bne.n	8004950 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80048aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6959      	ldr	r1, [r3, #20]
 80048b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	88da      	ldrh	r2, [r3, #6]
 80048c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80048cc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80048d0:	6800      	ldr	r0, [r0, #0]
 80048d2:	f001 ff23 	bl	800671c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80048d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048da:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80048e2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80048e6:	6812      	ldr	r2, [r2, #0]
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	4619      	mov	r1, r3
 80048fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004900:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004904:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004908:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800490c:	6812      	ldr	r2, [r2, #0]
 800490e:	440a      	add	r2, r1
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004916:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	011a      	lsls	r2, r3, #4
 8004920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004924:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4413      	add	r3, r2
 800492c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004934:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800493e:	b29a      	uxth	r2, r3
 8004940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004944:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	801a      	strh	r2, [r3, #0]
 800494c:	f001 b8b5 	b.w	8005aba <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004954:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	78db      	ldrb	r3, [r3, #3]
 800495c:	2b02      	cmp	r3, #2
 800495e:	f040 84c6 	bne.w	80052ee <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6a1a      	ldr	r2, [r3, #32]
 800496e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004972:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	429a      	cmp	r2, r3
 800497c:	f240 8443 	bls.w	8005206 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004984:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800498e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	b29b      	uxth	r3, r3
 800499e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80049aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	441a      	add	r2, r3
 80049c4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80049c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80049d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d8:	b29b      	uxth	r3, r3
 80049da:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80049dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6a1a      	ldr	r2, [r3, #32]
 80049e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049ec:	1ad2      	subs	r2, r2, r3
 80049ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80049fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 823e 	beq.w	8004e9e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a26:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a2a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a2e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	785b      	ldrb	r3, [r3, #1]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f040 809a 	bne.w	8004b7c <USB_EPStartXfer+0x34c>
 8004a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a50:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a54:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004a58:	6812      	ldr	r2, [r2, #0]
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a76:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a7a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	440a      	add	r2, r1
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	011a      	lsls	r2, r3, #4
 8004a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aa6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d122      	bne.n	8004afa <USB_EPStartXfer+0x2ca>
 8004ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ab8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004acc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	801a      	strh	r2, [r3, #0]
 8004ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ad8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	801a      	strh	r2, [r3, #0]
 8004af8:	e079      	b.n	8004bee <USB_EPStartXfer+0x3be>
 8004afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004afe:	2b3e      	cmp	r3, #62	; 0x3e
 8004b00:	d81b      	bhi.n	8004b3a <USB_EPStartXfer+0x30a>
 8004b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b06:	085b      	lsrs	r3, r3, #1
 8004b08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d004      	beq.n	8004b22 <USB_EPStartXfer+0x2f2>
 8004b18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004b22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	029b      	lsls	r3, r3, #10
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	801a      	strh	r2, [r3, #0]
 8004b38:	e059      	b.n	8004bee <USB_EPStartXfer+0x3be>
 8004b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b48:	f003 031f 	and.w	r3, r3, #31
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d104      	bne.n	8004b5a <USB_EPStartXfer+0x32a>
 8004b50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b54:	3b01      	subs	r3, #1
 8004b56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004b5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	029b      	lsls	r3, r3, #10
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	801a      	strh	r2, [r3, #0]
 8004b7a:	e038      	b.n	8004bee <USB_EPStartXfer+0x3be>
 8004b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	785b      	ldrb	r3, [r3, #1]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d130      	bne.n	8004bee <USB_EPStartXfer+0x3be>
 8004b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004ba6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004baa:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	440a      	add	r2, r1
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	011a      	lsls	r2, r3, #4
 8004bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bc6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	895b      	ldrh	r3, [r3, #10]
 8004bfa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6959      	ldr	r1, [r3, #20]
 8004c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004c14:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004c18:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004c1c:	6800      	ldr	r0, [r0, #0]
 8004c1e:	f001 fd7d 	bl	800671c <USB_WritePMA>
            ep->xfer_buff += len;
 8004c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695a      	ldr	r2, [r3, #20]
 8004c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c32:	441a      	add	r2, r3
 8004c34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6a1a      	ldr	r2, [r3, #32]
 8004c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d90f      	bls.n	8004c7c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6a1a      	ldr	r2, [r3, #32]
 8004c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c6c:	1ad2      	subs	r2, r2, r3
 8004c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	621a      	str	r2, [r3, #32]
 8004c7a:	e00e      	b.n	8004c9a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004c8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2200      	movs	r2, #0
 8004c98:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	785b      	ldrb	r3, [r3, #1]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f040 809a 	bne.w	8004de0 <USB_EPStartXfer+0x5b0>
 8004cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004cb4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004cb8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004cbc:	6812      	ldr	r2, [r2, #0]
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004cda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004cde:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004ce2:	6812      	ldr	r2, [r2, #0]
 8004ce4:	440a      	add	r2, r1
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	011a      	lsls	r2, r3, #4
 8004cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cfa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4413      	add	r3, r2
 8004d02:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d0a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d122      	bne.n	8004d5e <USB_EPStartXfer+0x52e>
 8004d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d1c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d30:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	801a      	strh	r2, [r3, #0]
 8004d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d3c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d54:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	801a      	strh	r2, [r3, #0]
 8004d5c:	e083      	b.n	8004e66 <USB_EPStartXfer+0x636>
 8004d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d62:	2b3e      	cmp	r3, #62	; 0x3e
 8004d64:	d81b      	bhi.n	8004d9e <USB_EPStartXfer+0x56e>
 8004d66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d6a:	085b      	lsrs	r3, r3, #1
 8004d6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d004      	beq.n	8004d86 <USB_EPStartXfer+0x556>
 8004d7c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d80:	3301      	adds	r3, #1
 8004d82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d86:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	029b      	lsls	r3, r3, #10
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d94:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	801a      	strh	r2, [r3, #0]
 8004d9c:	e063      	b.n	8004e66 <USB_EPStartXfer+0x636>
 8004d9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004da8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d104      	bne.n	8004dbe <USB_EPStartXfer+0x58e>
 8004db4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004db8:	3b01      	subs	r3, #1
 8004dba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004dbe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	029b      	lsls	r3, r3, #10
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	801a      	strh	r2, [r3, #0]
 8004dde:	e042      	b.n	8004e66 <USB_EPStartXfer+0x636>
 8004de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	785b      	ldrb	r3, [r3, #1]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d13a      	bne.n	8004e66 <USB_EPStartXfer+0x636>
 8004df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004df8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004dfc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	4619      	mov	r1, r3
 8004e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004e1e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e22:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	440a      	add	r2, r1
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	011a      	lsls	r2, r3, #4
 8004e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4413      	add	r3, r2
 8004e46:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e5e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	891b      	ldrh	r3, [r3, #8]
 8004e72:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6959      	ldr	r1, [r3, #20]
 8004e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004e8c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004e90:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004e94:	6800      	ldr	r0, [r0, #0]
 8004e96:	f001 fc41 	bl	800671c <USB_WritePMA>
 8004e9a:	f000 be0e 	b.w	8005aba <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	785b      	ldrb	r3, [r3, #1]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d16d      	bne.n	8004f8a <USB_EPStartXfer+0x75a>
 8004eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ebe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	461a      	mov	r2, r3
 8004ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ece:	4413      	add	r3, r2
 8004ed0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	011a      	lsls	r2, r3, #4
 8004ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ee8:	647b      	str	r3, [r7, #68]	; 0x44
 8004eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d112      	bne.n	8004f18 <USB_EPStartXfer+0x6e8>
 8004ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f00:	801a      	strh	r2, [r3, #0]
 8004f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f14:	801a      	strh	r2, [r3, #0]
 8004f16:	e063      	b.n	8004fe0 <USB_EPStartXfer+0x7b0>
 8004f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f1c:	2b3e      	cmp	r3, #62	; 0x3e
 8004f1e:	d817      	bhi.n	8004f50 <USB_EPStartXfer+0x720>
 8004f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f24:	085b      	lsrs	r3, r3, #1
 8004f26:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d004      	beq.n	8004f40 <USB_EPStartXfer+0x710>
 8004f36:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f40:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	029b      	lsls	r3, r3, #10
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f4c:	801a      	strh	r2, [r3, #0]
 8004f4e:	e047      	b.n	8004fe0 <USB_EPStartXfer+0x7b0>
 8004f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f5e:	f003 031f 	and.w	r3, r3, #31
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d104      	bne.n	8004f70 <USB_EPStartXfer+0x740>
 8004f66:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f70:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	029b      	lsls	r3, r3, #10
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f86:	801a      	strh	r2, [r3, #0]
 8004f88:	e02a      	b.n	8004fe0 <USB_EPStartXfer+0x7b0>
 8004f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	785b      	ldrb	r3, [r3, #1]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d122      	bne.n	8004fe0 <USB_EPStartXfer+0x7b0>
 8004f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	653b      	str	r3, [r7, #80]	; 0x50
 8004fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004faa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fba:	4413      	add	r3, r2
 8004fbc:	653b      	str	r3, [r7, #80]	; 0x50
 8004fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	011a      	lsls	r2, r3, #4
 8004fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fce:	4413      	add	r3, r2
 8004fd0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fde:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	891b      	ldrh	r3, [r3, #8]
 8004fec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6959      	ldr	r1, [r3, #20]
 8004ffc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005000:	b29b      	uxth	r3, r3
 8005002:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005006:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800500a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800500e:	6800      	ldr	r0, [r0, #0]
 8005010:	f001 fb84 	bl	800671c <USB_WritePMA>
            ep->xfer_buff += len;
 8005014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005018:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	695a      	ldr	r2, [r3, #20]
 8005020:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005024:	441a      	add	r2, r3
 8005026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005036:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6a1a      	ldr	r2, [r3, #32]
 800503e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005042:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	429a      	cmp	r2, r3
 800504c:	d90f      	bls.n	800506e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800504e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6a1a      	ldr	r2, [r3, #32]
 800505a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800505e:	1ad2      	subs	r2, r2, r3
 8005060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005064:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	621a      	str	r2, [r3, #32]
 800506c:	e00e      	b.n	800508c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800506e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005072:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800507e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2200      	movs	r2, #0
 800508a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800508c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005090:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	643b      	str	r3, [r7, #64]	; 0x40
 8005098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800509c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	785b      	ldrb	r3, [r3, #1]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d16d      	bne.n	8005184 <USB_EPStartXfer+0x954>
 80050a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80050b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	461a      	mov	r2, r3
 80050c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c8:	4413      	add	r3, r2
 80050ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80050cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	011a      	lsls	r2, r3, #4
 80050da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050dc:	4413      	add	r3, r2
 80050de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050e2:	637b      	str	r3, [r7, #52]	; 0x34
 80050e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d112      	bne.n	8005112 <USB_EPStartXfer+0x8e2>
 80050ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fa:	801a      	strh	r2, [r3, #0]
 80050fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	b29b      	uxth	r3, r3
 8005102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800510a:	b29a      	uxth	r2, r3
 800510c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510e:	801a      	strh	r2, [r3, #0]
 8005110:	e05d      	b.n	80051ce <USB_EPStartXfer+0x99e>
 8005112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005116:	2b3e      	cmp	r3, #62	; 0x3e
 8005118:	d817      	bhi.n	800514a <USB_EPStartXfer+0x91a>
 800511a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005124:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d004      	beq.n	800513a <USB_EPStartXfer+0x90a>
 8005130:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005134:	3301      	adds	r3, #1
 8005136:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800513a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800513e:	b29b      	uxth	r3, r3
 8005140:	029b      	lsls	r3, r3, #10
 8005142:	b29a      	uxth	r2, r3
 8005144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005146:	801a      	strh	r2, [r3, #0]
 8005148:	e041      	b.n	80051ce <USB_EPStartXfer+0x99e>
 800514a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005158:	f003 031f 	and.w	r3, r3, #31
 800515c:	2b00      	cmp	r3, #0
 800515e:	d104      	bne.n	800516a <USB_EPStartXfer+0x93a>
 8005160:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005164:	3b01      	subs	r3, #1
 8005166:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800516a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800516e:	b29b      	uxth	r3, r3
 8005170:	029b      	lsls	r3, r3, #10
 8005172:	b29b      	uxth	r3, r3
 8005174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800517c:	b29a      	uxth	r2, r3
 800517e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005180:	801a      	strh	r2, [r3, #0]
 8005182:	e024      	b.n	80051ce <USB_EPStartXfer+0x99e>
 8005184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005188:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	785b      	ldrb	r3, [r3, #1]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d11c      	bne.n	80051ce <USB_EPStartXfer+0x99e>
 8005194:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005198:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	461a      	mov	r2, r3
 80051a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a8:	4413      	add	r3, r2
 80051aa:	643b      	str	r3, [r7, #64]	; 0x40
 80051ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	011a      	lsls	r2, r3, #4
 80051ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051bc:	4413      	add	r3, r2
 80051be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80051ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	895b      	ldrh	r3, [r3, #10]
 80051da:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6959      	ldr	r1, [r3, #20]
 80051ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80051f4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80051f8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80051fc:	6800      	ldr	r0, [r0, #0]
 80051fe:	f001 fa8d 	bl	800671c <USB_WritePMA>
 8005202:	f000 bc5a 	b.w	8005aba <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800520a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800521a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	b29b      	uxth	r3, r3
 8005234:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005244:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800524e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	441a      	add	r2, r3
 800525a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800525e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800526a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800526e:	b29b      	uxth	r3, r3
 8005270:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005276:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800527e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005282:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800528c:	b29b      	uxth	r3, r3
 800528e:	461a      	mov	r2, r3
 8005290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005292:	4413      	add	r3, r2
 8005294:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800529a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	011a      	lsls	r2, r3, #4
 80052a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052a6:	4413      	add	r3, r2
 80052a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80052ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80052b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	891b      	ldrh	r3, [r3, #8]
 80052c4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6959      	ldr	r1, [r3, #20]
 80052d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80052de:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80052e2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80052e6:	6800      	ldr	r0, [r0, #0]
 80052e8:	f001 fa18 	bl	800671c <USB_WritePMA>
 80052ec:	e3e5      	b.n	8005aba <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80052ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	b29b      	uxth	r3, r3
 800530c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005314:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800531c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	441a      	add	r2, r3
 8005332:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800533a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800533e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005346:	b29b      	uxth	r3, r3
 8005348:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800534a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6a1a      	ldr	r2, [r3, #32]
 8005356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800535a:	1ad2      	subs	r2, r2, r3
 800535c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005360:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005376:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29b      	uxth	r3, r3
 8005386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 81bc 	beq.w	8005708 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005394:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800539e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	785b      	ldrb	r3, [r3, #1]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d16d      	bne.n	800548a <USB_EPStartXfer+0xc5a>
 80053ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80053ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	461a      	mov	r2, r3
 80053cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053ce:	4413      	add	r3, r2
 80053d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80053d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	011a      	lsls	r2, r3, #4
 80053e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053e2:	4413      	add	r3, r2
 80053e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053e8:	677b      	str	r3, [r7, #116]	; 0x74
 80053ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d112      	bne.n	8005418 <USB_EPStartXfer+0xbe8>
 80053f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005400:	801a      	strh	r2, [r3, #0]
 8005402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	b29b      	uxth	r3, r3
 8005408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800540c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005410:	b29a      	uxth	r2, r3
 8005412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005414:	801a      	strh	r2, [r3, #0]
 8005416:	e060      	b.n	80054da <USB_EPStartXfer+0xcaa>
 8005418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800541c:	2b3e      	cmp	r3, #62	; 0x3e
 800541e:	d817      	bhi.n	8005450 <USB_EPStartXfer+0xc20>
 8005420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005424:	085b      	lsrs	r3, r3, #1
 8005426:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800542a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d004      	beq.n	8005440 <USB_EPStartXfer+0xc10>
 8005436:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800543a:	3301      	adds	r3, #1
 800543c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005440:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005444:	b29b      	uxth	r3, r3
 8005446:	029b      	lsls	r3, r3, #10
 8005448:	b29a      	uxth	r2, r3
 800544a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800544c:	801a      	strh	r2, [r3, #0]
 800544e:	e044      	b.n	80054da <USB_EPStartXfer+0xcaa>
 8005450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005454:	095b      	lsrs	r3, r3, #5
 8005456:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800545a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800545e:	f003 031f 	and.w	r3, r3, #31
 8005462:	2b00      	cmp	r3, #0
 8005464:	d104      	bne.n	8005470 <USB_EPStartXfer+0xc40>
 8005466:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800546a:	3b01      	subs	r3, #1
 800546c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005470:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005474:	b29b      	uxth	r3, r3
 8005476:	029b      	lsls	r3, r3, #10
 8005478:	b29b      	uxth	r3, r3
 800547a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800547e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005482:	b29a      	uxth	r2, r3
 8005484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005486:	801a      	strh	r2, [r3, #0]
 8005488:	e027      	b.n	80054da <USB_EPStartXfer+0xcaa>
 800548a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800548e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	785b      	ldrb	r3, [r3, #1]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d11f      	bne.n	80054da <USB_EPStartXfer+0xcaa>
 800549a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800549e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	461a      	mov	r2, r3
 80054ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054b0:	4413      	add	r3, r2
 80054b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	011a      	lsls	r2, r3, #4
 80054c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054c8:	4413      	add	r3, r2
 80054ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054d8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80054da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	895b      	ldrh	r3, [r3, #10]
 80054e6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6959      	ldr	r1, [r3, #20]
 80054f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005500:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005504:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005508:	6800      	ldr	r0, [r0, #0]
 800550a:	f001 f907 	bl	800671c <USB_WritePMA>
          ep->xfer_buff += len;
 800550e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005512:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695a      	ldr	r2, [r3, #20]
 800551a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800551e:	441a      	add	r2, r3
 8005520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005524:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800552c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005530:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6a1a      	ldr	r2, [r3, #32]
 8005538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800553c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	429a      	cmp	r2, r3
 8005546:	d90f      	bls.n	8005568 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800554c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6a1a      	ldr	r2, [r3, #32]
 8005554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005558:	1ad2      	subs	r2, r2, r3
 800555a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800555e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	621a      	str	r2, [r3, #32]
 8005566:	e00e      	b.n	8005586 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800556c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800557c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2200      	movs	r2, #0
 8005584:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 8295 	beq.w	8005aba <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005594:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	785b      	ldrb	r3, [r3, #1]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d16d      	bne.n	800567c <USB_EPStartXfer+0xe4c>
 80055a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80055ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	461a      	mov	r2, r3
 80055be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055c0:	4413      	add	r3, r2
 80055c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80055c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	011a      	lsls	r2, r3, #4
 80055d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055d4:	4413      	add	r3, r2
 80055d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055da:	667b      	str	r3, [r7, #100]	; 0x64
 80055dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d112      	bne.n	800560a <USB_EPStartXfer+0xdda>
 80055e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055f2:	801a      	strh	r2, [r3, #0]
 80055f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005602:	b29a      	uxth	r2, r3
 8005604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005606:	801a      	strh	r2, [r3, #0]
 8005608:	e063      	b.n	80056d2 <USB_EPStartXfer+0xea2>
 800560a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800560e:	2b3e      	cmp	r3, #62	; 0x3e
 8005610:	d817      	bhi.n	8005642 <USB_EPStartXfer+0xe12>
 8005612:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005616:	085b      	lsrs	r3, r3, #1
 8005618:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800561c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d004      	beq.n	8005632 <USB_EPStartXfer+0xe02>
 8005628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800562c:	3301      	adds	r3, #1
 800562e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005636:	b29b      	uxth	r3, r3
 8005638:	029b      	lsls	r3, r3, #10
 800563a:	b29a      	uxth	r2, r3
 800563c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800563e:	801a      	strh	r2, [r3, #0]
 8005640:	e047      	b.n	80056d2 <USB_EPStartXfer+0xea2>
 8005642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005646:	095b      	lsrs	r3, r3, #5
 8005648:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800564c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005650:	f003 031f 	and.w	r3, r3, #31
 8005654:	2b00      	cmp	r3, #0
 8005656:	d104      	bne.n	8005662 <USB_EPStartXfer+0xe32>
 8005658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800565c:	3b01      	subs	r3, #1
 800565e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005666:	b29b      	uxth	r3, r3
 8005668:	029b      	lsls	r3, r3, #10
 800566a:	b29b      	uxth	r3, r3
 800566c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005674:	b29a      	uxth	r2, r3
 8005676:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005678:	801a      	strh	r2, [r3, #0]
 800567a:	e02a      	b.n	80056d2 <USB_EPStartXfer+0xea2>
 800567c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005680:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d122      	bne.n	80056d2 <USB_EPStartXfer+0xea2>
 800568c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005690:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	673b      	str	r3, [r7, #112]	; 0x70
 8005698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	461a      	mov	r2, r3
 80056aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056ac:	4413      	add	r3, r2
 80056ae:	673b      	str	r3, [r7, #112]	; 0x70
 80056b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	011a      	lsls	r2, r3, #4
 80056be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056c0:	4413      	add	r3, r2
 80056c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80056d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	891b      	ldrh	r3, [r3, #8]
 80056de:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6959      	ldr	r1, [r3, #20]
 80056ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056f8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80056fc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005700:	6800      	ldr	r0, [r0, #0]
 8005702:	f001 f80b 	bl	800671c <USB_WritePMA>
 8005706:	e1d8      	b.n	8005aba <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800570c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	785b      	ldrb	r3, [r3, #1]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d178      	bne.n	800580a <USB_EPStartXfer+0xfda>
 8005718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005734:	b29b      	uxth	r3, r3
 8005736:	461a      	mov	r2, r3
 8005738:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800573c:	4413      	add	r3, r2
 800573e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005746:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	011a      	lsls	r2, r3, #4
 8005750:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005754:	4413      	add	r3, r2
 8005756:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800575a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800575e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005762:	2b00      	cmp	r3, #0
 8005764:	d116      	bne.n	8005794 <USB_EPStartXfer+0xf64>
 8005766:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	b29b      	uxth	r3, r3
 800576e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005772:	b29a      	uxth	r2, r3
 8005774:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005778:	801a      	strh	r2, [r3, #0]
 800577a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800578a:	b29a      	uxth	r2, r3
 800578c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005790:	801a      	strh	r2, [r3, #0]
 8005792:	e06b      	b.n	800586c <USB_EPStartXfer+0x103c>
 8005794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005798:	2b3e      	cmp	r3, #62	; 0x3e
 800579a:	d818      	bhi.n	80057ce <USB_EPStartXfer+0xf9e>
 800579c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a0:	085b      	lsrs	r3, r3, #1
 80057a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80057a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d004      	beq.n	80057bc <USB_EPStartXfer+0xf8c>
 80057b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80057b6:	3301      	adds	r3, #1
 80057b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80057bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	029b      	lsls	r3, r3, #10
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057ca:	801a      	strh	r2, [r3, #0]
 80057cc:	e04e      	b.n	800586c <USB_EPStartXfer+0x103c>
 80057ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d2:	095b      	lsrs	r3, r3, #5
 80057d4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80057d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057dc:	f003 031f 	and.w	r3, r3, #31
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d104      	bne.n	80057ee <USB_EPStartXfer+0xfbe>
 80057e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80057e8:	3b01      	subs	r3, #1
 80057ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80057ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	029b      	lsls	r3, r3, #10
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005800:	b29a      	uxth	r2, r3
 8005802:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005806:	801a      	strh	r2, [r3, #0]
 8005808:	e030      	b.n	800586c <USB_EPStartXfer+0x103c>
 800580a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800580e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	785b      	ldrb	r3, [r3, #1]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d128      	bne.n	800586c <USB_EPStartXfer+0x103c>
 800581a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005836:	b29b      	uxth	r3, r3
 8005838:	461a      	mov	r2, r3
 800583a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800583e:	4413      	add	r3, r2
 8005840:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005848:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	011a      	lsls	r2, r3, #4
 8005852:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005856:	4413      	add	r3, r2
 8005858:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800585c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005860:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005864:	b29a      	uxth	r2, r3
 8005866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800586a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800586c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005870:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	891b      	ldrh	r3, [r3, #8]
 8005878:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800587c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005880:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6959      	ldr	r1, [r3, #20]
 8005888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800588c:	b29b      	uxth	r3, r3
 800588e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005892:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005896:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800589a:	6800      	ldr	r0, [r0, #0]
 800589c:	f000 ff3e 	bl	800671c <USB_WritePMA>
          ep->xfer_buff += len;
 80058a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	695a      	ldr	r2, [r3, #20]
 80058ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b0:	441a      	add	r2, r3
 80058b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80058be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6a1a      	ldr	r2, [r3, #32]
 80058ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d90f      	bls.n	80058fa <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80058da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6a1a      	ldr	r2, [r3, #32]
 80058e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ea:	1ad2      	subs	r2, r2, r3
 80058ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	621a      	str	r2, [r3, #32]
 80058f8:	e00e      	b.n	8005918 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80058fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800590a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2200      	movs	r2, #0
 8005916:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005918:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 80cc 	beq.w	8005aba <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005926:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	785b      	ldrb	r3, [r3, #1]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d178      	bne.n	8005a32 <USB_EPStartXfer+0x1202>
 8005940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005944:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800594e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005952:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800595c:	b29b      	uxth	r3, r3
 800595e:	461a      	mov	r2, r3
 8005960:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005964:	4413      	add	r3, r2
 8005966:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800596a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800596e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	011a      	lsls	r2, r3, #4
 8005978:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800597c:	4413      	add	r3, r2
 800597e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005982:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800598a:	2b00      	cmp	r3, #0
 800598c:	d116      	bne.n	80059bc <USB_EPStartXfer+0x118c>
 800598e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	b29b      	uxth	r3, r3
 8005996:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800599a:	b29a      	uxth	r2, r3
 800599c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059a0:	801a      	strh	r2, [r3, #0]
 80059a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059b8:	801a      	strh	r2, [r3, #0]
 80059ba:	e064      	b.n	8005a86 <USB_EPStartXfer+0x1256>
 80059bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c0:	2b3e      	cmp	r3, #62	; 0x3e
 80059c2:	d818      	bhi.n	80059f6 <USB_EPStartXfer+0x11c6>
 80059c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c8:	085b      	lsrs	r3, r3, #1
 80059ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80059ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d004      	beq.n	80059e4 <USB_EPStartXfer+0x11b4>
 80059da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059de:	3301      	adds	r3, #1
 80059e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80059e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	029b      	lsls	r3, r3, #10
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059f2:	801a      	strh	r2, [r3, #0]
 80059f4:	e047      	b.n	8005a86 <USB_EPStartXfer+0x1256>
 80059f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059fa:	095b      	lsrs	r3, r3, #5
 80059fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a04:	f003 031f 	and.w	r3, r3, #31
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d104      	bne.n	8005a16 <USB_EPStartXfer+0x11e6>
 8005a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a10:	3b01      	subs	r3, #1
 8005a12:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	029b      	lsls	r3, r3, #10
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a2e:	801a      	strh	r2, [r3, #0]
 8005a30:	e029      	b.n	8005a86 <USB_EPStartXfer+0x1256>
 8005a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	785b      	ldrb	r3, [r3, #1]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d121      	bne.n	8005a86 <USB_EPStartXfer+0x1256>
 8005a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	461a      	mov	r2, r3
 8005a54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a58:	4413      	add	r3, r2
 8005a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	011a      	lsls	r2, r3, #4
 8005a6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a70:	4413      	add	r3, r2
 8005a72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	895b      	ldrh	r3, [r3, #10]
 8005a92:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6959      	ldr	r1, [r3, #20]
 8005aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005aac:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ab0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ab4:	6800      	ldr	r0, [r0, #0]
 8005ab6:	f000 fe31 	bl	800671c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005abe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005adc:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ae8:	8013      	strh	r3, [r2, #0]
 8005aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aee:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005af2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005af6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005afa:	8812      	ldrh	r2, [r2, #0]
 8005afc:	f082 0210 	eor.w	r2, r2, #16
 8005b00:	801a      	strh	r2, [r3, #0]
 8005b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b06:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005b0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005b0e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005b12:	8812      	ldrh	r2, [r2, #0]
 8005b14:	f082 0220 	eor.w	r2, r2, #32
 8005b18:	801a      	strh	r2, [r3, #0]
 8005b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	441a      	add	r2, r3
 8005b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b38:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	8013      	strh	r3, [r2, #0]
 8005b52:	f000 bc9f 	b.w	8006494 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	7b1b      	ldrb	r3, [r3, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f040 80ae 	bne.w	8005cc4 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005b68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	699a      	ldr	r2, [r3, #24]
 8005b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d917      	bls.n	8005bb4 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699a      	ldr	r2, [r3, #24]
 8005ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ba4:	1ad2      	subs	r2, r2, r3
 8005ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005baa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	619a      	str	r2, [r3, #24]
 8005bb2:	e00e      	b.n	8005bd2 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	011a      	lsls	r2, r3, #4
 8005c0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c0e:	4413      	add	r3, r2
 8005c10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d116      	bne.n	8005c4e <USB_EPStartXfer+0x141e>
 8005c20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c32:	801a      	strh	r2, [r3, #0]
 8005c34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c4a:	801a      	strh	r2, [r3, #0]
 8005c4c:	e3e8      	b.n	8006420 <USB_EPStartXfer+0x1bf0>
 8005c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c52:	2b3e      	cmp	r3, #62	; 0x3e
 8005c54:	d818      	bhi.n	8005c88 <USB_EPStartXfer+0x1458>
 8005c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c5a:	085b      	lsrs	r3, r3, #1
 8005c5c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d004      	beq.n	8005c76 <USB_EPStartXfer+0x1446>
 8005c6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c70:	3301      	adds	r3, #1
 8005c72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	029b      	lsls	r3, r3, #10
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c84:	801a      	strh	r2, [r3, #0]
 8005c86:	e3cb      	b.n	8006420 <USB_EPStartXfer+0x1bf0>
 8005c88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c8c:	095b      	lsrs	r3, r3, #5
 8005c8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c96:	f003 031f 	and.w	r3, r3, #31
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d104      	bne.n	8005ca8 <USB_EPStartXfer+0x1478>
 8005c9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005ca8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	029b      	lsls	r3, r3, #10
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cc0:	801a      	strh	r2, [r3, #0]
 8005cc2:	e3ad      	b.n	8006420 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	78db      	ldrb	r3, [r3, #3]
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	f040 8200 	bne.w	80060d6 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	785b      	ldrb	r3, [r3, #1]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f040 8091 	bne.w	8005e0a <USB_EPStartXfer+0x15da>
 8005ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	461a      	mov	r2, r3
 8005d08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	011a      	lsls	r2, r3, #4
 8005d20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d24:	4413      	add	r3, r2
 8005d26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d116      	bne.n	8005d6c <USB_EPStartXfer+0x153c>
 8005d3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d50:	801a      	strh	r2, [r3, #0]
 8005d52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d68:	801a      	strh	r2, [r3, #0]
 8005d6a:	e083      	b.n	8005e74 <USB_EPStartXfer+0x1644>
 8005d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	2b3e      	cmp	r3, #62	; 0x3e
 8005d7a:	d820      	bhi.n	8005dbe <USB_EPStartXfer+0x158e>
 8005d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	085b      	lsrs	r3, r3, #1
 8005d8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d004      	beq.n	8005dac <USB_EPStartXfer+0x157c>
 8005da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005da6:	3301      	adds	r3, #1
 8005da8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	029b      	lsls	r3, r3, #10
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005dba:	801a      	strh	r2, [r3, #0]
 8005dbc:	e05a      	b.n	8005e74 <USB_EPStartXfer+0x1644>
 8005dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	095b      	lsrs	r3, r3, #5
 8005dcc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	f003 031f 	and.w	r3, r3, #31
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d104      	bne.n	8005dee <USB_EPStartXfer+0x15be>
 8005de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005de8:	3b01      	subs	r3, #1
 8005dea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	029b      	lsls	r3, r3, #10
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e06:	801a      	strh	r2, [r3, #0]
 8005e08:	e034      	b.n	8005e74 <USB_EPStartXfer+0x1644>
 8005e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	785b      	ldrb	r3, [r3, #1]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d12c      	bne.n	8005e74 <USB_EPStartXfer+0x1644>
 8005e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	461a      	mov	r2, r3
 8005e3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e3e:	4413      	add	r3, r2
 8005e40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	011a      	lsls	r2, r3, #4
 8005e52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e56:	4413      	add	r3, r2
 8005e58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e72:	801a      	strh	r2, [r3, #0]
 8005e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	785b      	ldrb	r3, [r3, #1]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f040 8091 	bne.w	8005fb6 <USB_EPStartXfer+0x1786>
 8005e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005eb8:	4413      	add	r3, r2
 8005eba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	011a      	lsls	r2, r3, #4
 8005ecc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ed6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d116      	bne.n	8005f18 <USB_EPStartXfer+0x16e8>
 8005eea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005efc:	801a      	strh	r2, [r3, #0]
 8005efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f14:	801a      	strh	r2, [r3, #0]
 8005f16:	e07c      	b.n	8006012 <USB_EPStartXfer+0x17e2>
 8005f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	2b3e      	cmp	r3, #62	; 0x3e
 8005f26:	d820      	bhi.n	8005f6a <USB_EPStartXfer+0x173a>
 8005f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	085b      	lsrs	r3, r3, #1
 8005f36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d004      	beq.n	8005f58 <USB_EPStartXfer+0x1728>
 8005f4e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f52:	3301      	adds	r3, #1
 8005f54:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f58:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	029b      	lsls	r3, r3, #10
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f66:	801a      	strh	r2, [r3, #0]
 8005f68:	e053      	b.n	8006012 <USB_EPStartXfer+0x17e2>
 8005f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	095b      	lsrs	r3, r3, #5
 8005f78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	f003 031f 	and.w	r3, r3, #31
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d104      	bne.n	8005f9a <USB_EPStartXfer+0x176a>
 8005f90:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f94:	3b01      	subs	r3, #1
 8005f96:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	029b      	lsls	r3, r3, #10
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fb2:	801a      	strh	r2, [r3, #0]
 8005fb4:	e02d      	b.n	8006012 <USB_EPStartXfer+0x17e2>
 8005fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	785b      	ldrb	r3, [r3, #1]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d125      	bne.n	8006012 <USB_EPStartXfer+0x17e2>
 8005fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fdc:	4413      	add	r3, r2
 8005fde:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	011a      	lsls	r2, r3, #4
 8005ff0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ffa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	b29a      	uxth	r2, r3
 800600c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006010:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006016:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 81fe 	beq.w	8006420 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006028:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006044:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d005      	beq.n	800605c <USB_EPStartXfer+0x182c>
 8006050:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10d      	bne.n	8006078 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800605c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006064:	2b00      	cmp	r3, #0
 8006066:	f040 81db 	bne.w	8006420 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800606a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800606e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	f040 81d4 	bne.w	8006420 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	881b      	ldrh	r3, [r3, #0]
 8006094:	b29b      	uxth	r3, r3
 8006096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800609a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80060a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	441a      	add	r2, r3
 80060bc:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80060c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	8013      	strh	r3, [r2, #0]
 80060d4:	e1a4      	b.n	8006420 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80060d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	78db      	ldrb	r3, [r3, #3]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	f040 819a 	bne.w	800641c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80060e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	699a      	ldr	r2, [r3, #24]
 80060f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	429a      	cmp	r2, r3
 8006102:	d917      	bls.n	8006134 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006108:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	699a      	ldr	r2, [r3, #24]
 8006120:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006124:	1ad2      	subs	r2, r2, r3
 8006126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800612a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	619a      	str	r2, [r3, #24]
 8006132:	e00e      	b.n	8006152 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2200      	movs	r2, #0
 8006150:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006156:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	785b      	ldrb	r3, [r3, #1]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d178      	bne.n	8006254 <USB_EPStartXfer+0x1a24>
 8006162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006166:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006174:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800617e:	b29b      	uxth	r3, r3
 8006180:	461a      	mov	r2, r3
 8006182:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006186:	4413      	add	r3, r2
 8006188:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800618c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006190:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	011a      	lsls	r2, r3, #4
 800619a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800619e:	4413      	add	r3, r2
 80061a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d116      	bne.n	80061de <USB_EPStartXfer+0x19ae>
 80061b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061bc:	b29a      	uxth	r2, r3
 80061be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061c2:	801a      	strh	r2, [r3, #0]
 80061c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061da:	801a      	strh	r2, [r3, #0]
 80061dc:	e06b      	b.n	80062b6 <USB_EPStartXfer+0x1a86>
 80061de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061e2:	2b3e      	cmp	r3, #62	; 0x3e
 80061e4:	d818      	bhi.n	8006218 <USB_EPStartXfer+0x19e8>
 80061e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ea:	085b      	lsrs	r3, r3, #1
 80061ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d004      	beq.n	8006206 <USB_EPStartXfer+0x19d6>
 80061fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006200:	3301      	adds	r3, #1
 8006202:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800620a:	b29b      	uxth	r3, r3
 800620c:	029b      	lsls	r3, r3, #10
 800620e:	b29a      	uxth	r2, r3
 8006210:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006214:	801a      	strh	r2, [r3, #0]
 8006216:	e04e      	b.n	80062b6 <USB_EPStartXfer+0x1a86>
 8006218:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800621c:	095b      	lsrs	r3, r3, #5
 800621e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006226:	f003 031f 	and.w	r3, r3, #31
 800622a:	2b00      	cmp	r3, #0
 800622c:	d104      	bne.n	8006238 <USB_EPStartXfer+0x1a08>
 800622e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006232:	3b01      	subs	r3, #1
 8006234:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800623c:	b29b      	uxth	r3, r3
 800623e:	029b      	lsls	r3, r3, #10
 8006240:	b29b      	uxth	r3, r3
 8006242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800624a:	b29a      	uxth	r2, r3
 800624c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006250:	801a      	strh	r2, [r3, #0]
 8006252:	e030      	b.n	80062b6 <USB_EPStartXfer+0x1a86>
 8006254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006258:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	785b      	ldrb	r3, [r3, #1]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d128      	bne.n	80062b6 <USB_EPStartXfer+0x1a86>
 8006264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006268:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006276:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006280:	b29b      	uxth	r3, r3
 8006282:	461a      	mov	r2, r3
 8006284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006288:	4413      	add	r3, r2
 800628a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800628e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	011a      	lsls	r2, r3, #4
 800629c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a0:	4413      	add	r3, r2
 80062a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80062aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80062b4:	801a      	strh	r2, [r3, #0]
 80062b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	785b      	ldrb	r3, [r3, #1]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d178      	bne.n	80063c6 <USB_EPStartXfer+0x1b96>
 80062d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80062e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	461a      	mov	r2, r3
 80062f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062f8:	4413      	add	r3, r2
 80062fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80062fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	011a      	lsls	r2, r3, #4
 800630c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006310:	4413      	add	r3, r2
 8006312:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006316:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800631a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800631e:	2b00      	cmp	r3, #0
 8006320:	d116      	bne.n	8006350 <USB_EPStartXfer+0x1b20>
 8006322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	b29b      	uxth	r3, r3
 800632a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800632e:	b29a      	uxth	r2, r3
 8006330:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006334:	801a      	strh	r2, [r3, #0]
 8006336:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006346:	b29a      	uxth	r2, r3
 8006348:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800634c:	801a      	strh	r2, [r3, #0]
 800634e:	e067      	b.n	8006420 <USB_EPStartXfer+0x1bf0>
 8006350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006354:	2b3e      	cmp	r3, #62	; 0x3e
 8006356:	d818      	bhi.n	800638a <USB_EPStartXfer+0x1b5a>
 8006358:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800635c:	085b      	lsrs	r3, r3, #1
 800635e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d004      	beq.n	8006378 <USB_EPStartXfer+0x1b48>
 800636e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006372:	3301      	adds	r3, #1
 8006374:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006378:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800637c:	b29b      	uxth	r3, r3
 800637e:	029b      	lsls	r3, r3, #10
 8006380:	b29a      	uxth	r2, r3
 8006382:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006386:	801a      	strh	r2, [r3, #0]
 8006388:	e04a      	b.n	8006420 <USB_EPStartXfer+0x1bf0>
 800638a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006394:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006398:	f003 031f 	and.w	r3, r3, #31
 800639c:	2b00      	cmp	r3, #0
 800639e:	d104      	bne.n	80063aa <USB_EPStartXfer+0x1b7a>
 80063a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063a4:	3b01      	subs	r3, #1
 80063a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80063aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	029b      	lsls	r3, r3, #10
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063bc:	b29a      	uxth	r2, r3
 80063be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063c2:	801a      	strh	r2, [r3, #0]
 80063c4:	e02c      	b.n	8006420 <USB_EPStartXfer+0x1bf0>
 80063c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	785b      	ldrb	r3, [r3, #1]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d124      	bne.n	8006420 <USB_EPStartXfer+0x1bf0>
 80063d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	461a      	mov	r2, r3
 80063e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ec:	4413      	add	r3, r2
 80063ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	011a      	lsls	r2, r3, #4
 8006400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006404:	4413      	add	r3, r2
 8006406:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800640a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800640e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006412:	b29a      	uxth	r2, r3
 8006414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006418:	801a      	strh	r2, [r3, #0]
 800641a:	e001      	b.n	8006420 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e03a      	b.n	8006496 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006424:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800642e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	881b      	ldrh	r3, [r3, #0]
 800643c:	b29b      	uxth	r3, r3
 800643e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006446:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800644a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800644e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006452:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006456:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800645a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800645e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006466:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006470:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	441a      	add	r2, r3
 800647c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006480:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006484:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800648c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006490:	b29b      	uxth	r3, r3
 8006492:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	785b      	ldrb	r3, [r3, #1]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d020      	beq.n	80064f4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c8:	81bb      	strh	r3, [r7, #12]
 80064ca:	89bb      	ldrh	r3, [r7, #12]
 80064cc:	f083 0310 	eor.w	r3, r3, #16
 80064d0:	81bb      	strh	r3, [r7, #12]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	441a      	add	r2, r3
 80064dc:	89bb      	ldrh	r3, [r7, #12]
 80064de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	8013      	strh	r3, [r2, #0]
 80064f2:	e01f      	b.n	8006534 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	b29b      	uxth	r3, r3
 8006502:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650a:	81fb      	strh	r3, [r7, #14]
 800650c:	89fb      	ldrh	r3, [r7, #14]
 800650e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006512:	81fb      	strh	r3, [r7, #14]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	441a      	add	r2, r3
 800651e:	89fb      	ldrh	r3, [r7, #14]
 8006520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800652c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006530:	b29b      	uxth	r3, r3
 8006532:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	bc80      	pop	{r7}
 800653e:	4770      	bx	lr

08006540 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	7b1b      	ldrb	r3, [r3, #12]
 800654e:	2b00      	cmp	r3, #0
 8006550:	f040 809d 	bne.w	800668e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	785b      	ldrb	r3, [r3, #1]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d04c      	beq.n	80065f6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	823b      	strh	r3, [r7, #16]
 800656a:	8a3b      	ldrh	r3, [r7, #16]
 800656c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006570:	2b00      	cmp	r3, #0
 8006572:	d01b      	beq.n	80065ac <USB_EPClearStall+0x6c>
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	b29b      	uxth	r3, r3
 8006582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658a:	81fb      	strh	r3, [r7, #14]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	441a      	add	r2, r3
 8006596:	89fb      	ldrh	r3, [r7, #14]
 8006598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800659c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	78db      	ldrb	r3, [r3, #3]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d06c      	beq.n	800668e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ca:	81bb      	strh	r3, [r7, #12]
 80065cc:	89bb      	ldrh	r3, [r7, #12]
 80065ce:	f083 0320 	eor.w	r3, r3, #32
 80065d2:	81bb      	strh	r3, [r7, #12]
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	441a      	add	r2, r3
 80065de:	89bb      	ldrh	r3, [r7, #12]
 80065e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	8013      	strh	r3, [r2, #0]
 80065f4:	e04b      	b.n	800668e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	82fb      	strh	r3, [r7, #22]
 8006604:	8afb      	ldrh	r3, [r7, #22]
 8006606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d01b      	beq.n	8006646 <USB_EPClearStall+0x106>
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	b29b      	uxth	r3, r3
 800661c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006624:	82bb      	strh	r3, [r7, #20]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	441a      	add	r2, r3
 8006630:	8abb      	ldrh	r3, [r7, #20]
 8006632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800663a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800663e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006642:	b29b      	uxth	r3, r3
 8006644:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	b29b      	uxth	r3, r3
 8006654:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665c:	827b      	strh	r3, [r7, #18]
 800665e:	8a7b      	ldrh	r3, [r7, #18]
 8006660:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006664:	827b      	strh	r3, [r7, #18]
 8006666:	8a7b      	ldrh	r3, [r7, #18]
 8006668:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800666c:	827b      	strh	r3, [r7, #18]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	441a      	add	r2, r3
 8006678:	8a7b      	ldrh	r3, [r7, #18]
 800667a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800667e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800668a:	b29b      	uxth	r3, r3
 800668c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	371c      	adds	r7, #28
 8006694:	46bd      	mov	sp, r7
 8006696:	bc80      	pop	{r7}
 8006698:	4770      	bx	lr

0800669a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	460b      	mov	r3, r1
 80066a4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80066a6:	78fb      	ldrb	r3, [r7, #3]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d103      	bne.n	80066b4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2280      	movs	r2, #128	; 0x80
 80066b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bc80      	pop	{r7}
 80066be:	4770      	bx	lr

080066c0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bc80      	pop	{r7}
 80066d2:	4770      	bx	lr

080066d4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bc80      	pop	{r7}
 80066e6:	4770      	bx	lr

080066e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80066fa:	68fb      	ldr	r3, [r7, #12]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr

08006706 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr

0800671c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800671c:	b480      	push	{r7}
 800671e:	b08d      	sub	sp, #52	; 0x34
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	4611      	mov	r1, r2
 8006728:	461a      	mov	r2, r3
 800672a:	460b      	mov	r3, r1
 800672c:	80fb      	strh	r3, [r7, #6]
 800672e:	4613      	mov	r3, r2
 8006730:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006732:	88bb      	ldrh	r3, [r7, #4]
 8006734:	3301      	adds	r3, #1
 8006736:	085b      	lsrs	r3, r3, #1
 8006738:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006742:	88fb      	ldrh	r3, [r7, #6]
 8006744:	005a      	lsls	r2, r3, #1
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	4413      	add	r3, r2
 800674a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800674e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006754:	e01e      	b.n	8006794 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	3301      	adds	r3, #1
 8006760:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	b29b      	uxth	r3, r3
 8006768:	021b      	lsls	r3, r3, #8
 800676a:	b29b      	uxth	r3, r3
 800676c:	461a      	mov	r2, r3
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	4313      	orrs	r3, r2
 8006772:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	b29a      	uxth	r2, r3
 8006778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	3302      	adds	r3, #2
 8006780:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006784:	3302      	adds	r3, #2
 8006786:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	3301      	adds	r3, #1
 800678c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006790:	3b01      	subs	r3, #1
 8006792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1dd      	bne.n	8006756 <USB_WritePMA+0x3a>
  }
}
 800679a:	bf00      	nop
 800679c:	bf00      	nop
 800679e:	3734      	adds	r7, #52	; 0x34
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bc80      	pop	{r7}
 80067a4:	4770      	bx	lr

080067a6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b08b      	sub	sp, #44	; 0x2c
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	4611      	mov	r1, r2
 80067b2:	461a      	mov	r2, r3
 80067b4:	460b      	mov	r3, r1
 80067b6:	80fb      	strh	r3, [r7, #6]
 80067b8:	4613      	mov	r3, r2
 80067ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80067bc:	88bb      	ldrh	r3, [r7, #4]
 80067be:	085b      	lsrs	r3, r3, #1
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067cc:	88fb      	ldrh	r3, [r7, #6]
 80067ce:	005a      	lsls	r2, r3, #1
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067d8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	627b      	str	r3, [r7, #36]	; 0x24
 80067de:	e01b      	b.n	8006818 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	3302      	adds	r3, #2
 80067ec:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	3301      	adds	r3, #1
 80067fa:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	0a1b      	lsrs	r3, r3, #8
 8006800:	b2da      	uxtb	r2, r3
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	3301      	adds	r3, #1
 800680a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	3302      	adds	r3, #2
 8006810:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	3b01      	subs	r3, #1
 8006816:	627b      	str	r3, [r7, #36]	; 0x24
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1e0      	bne.n	80067e0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800681e:	88bb      	ldrh	r3, [r7, #4]
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	b29b      	uxth	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d007      	beq.n	800683a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	b29b      	uxth	r3, r3
 8006830:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	b2da      	uxtb	r2, r3
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	701a      	strb	r2, [r3, #0]
  }
}
 800683a:	bf00      	nop
 800683c:	372c      	adds	r7, #44	; 0x2c
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr

08006844 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006850:	2300      	movs	r3, #0
 8006852:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	7c1b      	ldrb	r3, [r3, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d115      	bne.n	8006888 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800685c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006860:	2202      	movs	r2, #2
 8006862:	2181      	movs	r1, #129	; 0x81
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f001 fea0 	bl	80085aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006874:	2202      	movs	r2, #2
 8006876:	2101      	movs	r1, #1
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f001 fe96 	bl	80085aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006886:	e012      	b.n	80068ae <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006888:	2340      	movs	r3, #64	; 0x40
 800688a:	2202      	movs	r2, #2
 800688c:	2181      	movs	r1, #129	; 0x81
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f001 fe8b 	bl	80085aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800689a:	2340      	movs	r3, #64	; 0x40
 800689c:	2202      	movs	r2, #2
 800689e:	2101      	movs	r1, #1
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 fe82 	bl	80085aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80068ae:	2308      	movs	r3, #8
 80068b0:	2203      	movs	r2, #3
 80068b2:	2182      	movs	r1, #130	; 0x82
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f001 fe78 	bl	80085aa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80068c0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80068c4:	f001 ff98 	bl	80087f8 <USBD_static_malloc>
 80068c8:	4602      	mov	r2, r0
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d102      	bne.n	80068e0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80068da:	2301      	movs	r3, #1
 80068dc:	73fb      	strb	r3, [r7, #15]
 80068de:	e026      	b.n	800692e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	7c1b      	ldrb	r3, [r3, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d109      	bne.n	800691e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006914:	2101      	movs	r1, #1
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f001 ff38 	bl	800878c <USBD_LL_PrepareReceive>
 800691c:	e007      	b.n	800692e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006924:	2340      	movs	r3, #64	; 0x40
 8006926:	2101      	movs	r1, #1
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 ff2f 	bl	800878c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800692e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006948:	2181      	movs	r1, #129	; 0x81
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f001 fe53 	bl	80085f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006956:	2101      	movs	r1, #1
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f001 fe4c 	bl	80085f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006966:	2182      	movs	r1, #130	; 0x82
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f001 fe44 	bl	80085f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00e      	beq.n	800699c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800698e:	4618      	mov	r0, r3
 8006990:	f001 ff3e 	bl	8008810 <USBD_static_free>
    pdev->pClassData = NULL;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800699c:	7bfb      	ldrb	r3, [r7, #15]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b086      	sub	sp, #24
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d039      	beq.n	8006a44 <USBD_CDC_Setup+0x9e>
 80069d0:	2b20      	cmp	r3, #32
 80069d2:	d17f      	bne.n	8006ad4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	88db      	ldrh	r3, [r3, #6]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d029      	beq.n	8006a30 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	b25b      	sxtb	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	da11      	bge.n	8006a0a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80069f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	88d2      	ldrh	r2, [r2, #6]
 80069f8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80069fa:	6939      	ldr	r1, [r7, #16]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	88db      	ldrh	r3, [r3, #6]
 8006a00:	461a      	mov	r2, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f001 fa09 	bl	8007e1a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006a08:	e06b      	b.n	8006ae2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	785a      	ldrb	r2, [r3, #1]
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	88db      	ldrh	r3, [r3, #6]
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006a20:	6939      	ldr	r1, [r7, #16]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	88db      	ldrh	r3, [r3, #6]
 8006a26:	461a      	mov	r2, r3
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f001 fa24 	bl	8007e76 <USBD_CtlPrepareRx>
      break;
 8006a2e:	e058      	b.n	8006ae2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	7850      	ldrb	r0, [r2, #1]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	6839      	ldr	r1, [r7, #0]
 8006a40:	4798      	blx	r3
      break;
 8006a42:	e04e      	b.n	8006ae2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	785b      	ldrb	r3, [r3, #1]
 8006a48:	2b0b      	cmp	r3, #11
 8006a4a:	d02e      	beq.n	8006aaa <USBD_CDC_Setup+0x104>
 8006a4c:	2b0b      	cmp	r3, #11
 8006a4e:	dc38      	bgt.n	8006ac2 <USBD_CDC_Setup+0x11c>
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d002      	beq.n	8006a5a <USBD_CDC_Setup+0xb4>
 8006a54:	2b0a      	cmp	r3, #10
 8006a56:	d014      	beq.n	8006a82 <USBD_CDC_Setup+0xdc>
 8006a58:	e033      	b.n	8006ac2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a60:	2b03      	cmp	r3, #3
 8006a62:	d107      	bne.n	8006a74 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006a64:	f107 030c 	add.w	r3, r7, #12
 8006a68:	2202      	movs	r2, #2
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f001 f9d4 	bl	8007e1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a72:	e02e      	b.n	8006ad2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f001 f965 	bl	8007d46 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	75fb      	strb	r3, [r7, #23]
          break;
 8006a80:	e027      	b.n	8006ad2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a88:	2b03      	cmp	r3, #3
 8006a8a:	d107      	bne.n	8006a9c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a8c:	f107 030f 	add.w	r3, r7, #15
 8006a90:	2201      	movs	r2, #1
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f001 f9c0 	bl	8007e1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a9a:	e01a      	b.n	8006ad2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006a9c:	6839      	ldr	r1, [r7, #0]
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f001 f951 	bl	8007d46 <USBD_CtlError>
            ret = USBD_FAIL;
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	75fb      	strb	r3, [r7, #23]
          break;
 8006aa8:	e013      	b.n	8006ad2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ab0:	2b03      	cmp	r3, #3
 8006ab2:	d00d      	beq.n	8006ad0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006ab4:	6839      	ldr	r1, [r7, #0]
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f001 f945 	bl	8007d46 <USBD_CtlError>
            ret = USBD_FAIL;
 8006abc:	2302      	movs	r3, #2
 8006abe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ac0:	e006      	b.n	8006ad0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f001 f93e 	bl	8007d46 <USBD_CtlError>
          ret = USBD_FAIL;
 8006aca:	2302      	movs	r3, #2
 8006acc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ace:	e000      	b.n	8006ad2 <USBD_CDC_Setup+0x12c>
          break;
 8006ad0:	bf00      	nop
      }
      break;
 8006ad2:	e006      	b.n	8006ae2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f001 f935 	bl	8007d46 <USBD_CtlError>
      ret = USBD_FAIL;
 8006adc:	2302      	movs	r3, #2
 8006ade:	75fb      	strb	r3, [r7, #23]
      break;
 8006ae0:	bf00      	nop
  }

  return ret;
 8006ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3718      	adds	r7, #24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afe:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b06:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d03a      	beq.n	8006b88 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006b12:	78fa      	ldrb	r2, [r7, #3]
 8006b14:	6879      	ldr	r1, [r7, #4]
 8006b16:	4613      	mov	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	440b      	add	r3, r1
 8006b20:	331c      	adds	r3, #28
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d029      	beq.n	8006b7c <USBD_CDC_DataIn+0x90>
 8006b28:	78fa      	ldrb	r2, [r7, #3]
 8006b2a:	6879      	ldr	r1, [r7, #4]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	440b      	add	r3, r1
 8006b36:	331c      	adds	r3, #28
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	78f9      	ldrb	r1, [r7, #3]
 8006b3c:	68b8      	ldr	r0, [r7, #8]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	440b      	add	r3, r1
 8006b44:	00db      	lsls	r3, r3, #3
 8006b46:	4403      	add	r3, r0
 8006b48:	3338      	adds	r3, #56	; 0x38
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b50:	fb01 f303 	mul.w	r3, r1, r3
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d110      	bne.n	8006b7c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006b5a:	78fa      	ldrb	r2, [r7, #3]
 8006b5c:	6879      	ldr	r1, [r7, #4]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	440b      	add	r3, r1
 8006b68:	331c      	adds	r3, #28
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b6e:	78f9      	ldrb	r1, [r7, #3]
 8006b70:	2300      	movs	r3, #0
 8006b72:	2200      	movs	r2, #0
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f001 fde6 	bl	8008746 <USBD_LL_Transmit>
 8006b7a:	e003      	b.n	8006b84 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	e000      	b.n	8006b8a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006b88:	2302      	movs	r3, #2
  }
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b084      	sub	sp, #16
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ba6:	78fb      	ldrb	r3, [r7, #3]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f001 fe11 	bl	80087d2 <USBD_LL_GetRxDataSize>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00d      	beq.n	8006bde <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	4798      	blx	r3

    return USBD_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	e000      	b.n	8006be0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006bde:	2302      	movs	r3, #2
  }
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d015      	beq.n	8006c2e <USBD_CDC_EP0_RxReady+0x46>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c08:	2bff      	cmp	r3, #255	; 0xff
 8006c0a:	d010      	beq.n	8006c2e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006c1a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c22:	b292      	uxth	r2, r2
 8006c24:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	22ff      	movs	r2, #255	; 0xff
 8006c2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2243      	movs	r2, #67	; 0x43
 8006c44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006c46:	4b03      	ldr	r3, [pc, #12]	; (8006c54 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bc80      	pop	{r7}
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	20000094 	.word	0x20000094

08006c58 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2243      	movs	r2, #67	; 0x43
 8006c64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006c66:	4b03      	ldr	r3, [pc, #12]	; (8006c74 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bc80      	pop	{r7}
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	20000050 	.word	0x20000050

08006c78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2243      	movs	r2, #67	; 0x43
 8006c84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006c86:	4b03      	ldr	r3, [pc, #12]	; (8006c94 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bc80      	pop	{r7}
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	200000d8 	.word	0x200000d8

08006c98 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	220a      	movs	r2, #10
 8006ca4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006ca6:	4b03      	ldr	r3, [pc, #12]	; (8006cb4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bc80      	pop	{r7}
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	2000000c 	.word	0x2000000c

08006cb8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d005      	beq.n	8006cd8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bc80      	pop	{r7}
 8006ce2:	4770      	bx	lr

08006ce4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d02:	88fa      	ldrh	r2, [r7, #6]
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	371c      	adds	r7, #28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bc80      	pop	{r7}
 8006d14:	4770      	bx	lr

08006d16 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b085      	sub	sp, #20
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d26:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3714      	adds	r7, #20
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bc80      	pop	{r7}
 8006d3a:	4770      	bx	lr

08006d3c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d01c      	beq.n	8006d90 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d115      	bne.n	8006d8c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	2181      	movs	r1, #129	; 0x81
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f001 fcdf 	bl	8008746 <USBD_LL_Transmit>

      return USBD_OK;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	e002      	b.n	8006d92 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e000      	b.n	8006d92 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006d90:	2302      	movs	r3, #2
  }
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d017      	beq.n	8006de4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	7c1b      	ldrb	r3, [r3, #16]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d109      	bne.n	8006dd0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f001 fcdf 	bl	800878c <USBD_LL_PrepareReceive>
 8006dce:	e007      	b.n	8006de0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dd6:	2340      	movs	r3, #64	; 0x40
 8006dd8:	2101      	movs	r1, #1
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 fcd6 	bl	800878c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006de0:	2300      	movs	r3, #0
 8006de2:	e000      	b.n	8006de6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006de4:	2302      	movs	r3, #2
  }
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	60f8      	str	r0, [r7, #12]
 8006df6:	60b9      	str	r1, [r7, #8]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e02:	2302      	movs	r3, #2
 8006e04:	e01a      	b.n	8006e3c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d003      	beq.n	8006e18 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d003      	beq.n	8006e26 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	79fa      	ldrb	r2, [r7, #7]
 8006e32:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f001 fb43 	bl	80084c0 <USBD_LL_Init>

  return USBD_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d006      	beq.n	8006e66 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]
 8006e64:	e001      	b.n	8006e6a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006e66:	2302      	movs	r3, #2
 8006e68:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bc80      	pop	{r7}
 8006e74:	4770      	bx	lr

08006e76 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b082      	sub	sp, #8
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f001 fb78 	bl	8008574 <USBD_LL_Start>

  return USBD_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr

08006ea2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	460b      	mov	r3, r1
 8006eac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006eae:	2302      	movs	r3, #2
 8006eb0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00c      	beq.n	8006ed6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	78fa      	ldrb	r2, [r7, #3]
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	4798      	blx	r3
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	78fa      	ldrb	r2, [r7, #3]
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	4798      	blx	r3

  return USBD_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b082      	sub	sp, #8
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 fed8 	bl	8007cce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f3a:	f003 031f 	and.w	r3, r3, #31
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d016      	beq.n	8006f70 <USBD_LL_SetupStage+0x6a>
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d81c      	bhi.n	8006f80 <USBD_LL_SetupStage+0x7a>
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <USBD_LL_SetupStage+0x4a>
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d008      	beq.n	8006f60 <USBD_LL_SetupStage+0x5a>
 8006f4e:	e017      	b.n	8006f80 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f9cb 	bl	80072f4 <USBD_StdDevReq>
      break;
 8006f5e:	e01a      	b.n	8006f96 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fa2d 	bl	80073c8 <USBD_StdItfReq>
      break;
 8006f6e:	e012      	b.n	8006f96 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fa6d 	bl	8007458 <USBD_StdEPReq>
      break;
 8006f7e:	e00a      	b.n	8006f96 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f001 fb50 	bl	8008634 <USBD_LL_StallEP>
      break;
 8006f94:	bf00      	nop
  }

  return USBD_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3708      	adds	r7, #8
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	607a      	str	r2, [r7, #4]
 8006fac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006fae:	7afb      	ldrb	r3, [r7, #11]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d14b      	bne.n	800704c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006fba:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d134      	bne.n	8007030 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	68da      	ldr	r2, [r3, #12]
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d919      	bls.n	8007006 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	1ad2      	subs	r2, r2, r3
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	68da      	ldr	r2, [r3, #12]
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d203      	bcs.n	8006ff4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	e002      	b.n	8006ffa <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	6879      	ldr	r1, [r7, #4]
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 ff57 	bl	8007eb2 <USBD_CtlContinueRx>
 8007004:	e038      	b.n	8007078 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00a      	beq.n	8007028 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007018:	2b03      	cmp	r3, #3
 800701a:	d105      	bne.n	8007028 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f000 ff54 	bl	8007ed6 <USBD_CtlSendStatus>
 800702e:	e023      	b.n	8007078 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007036:	2b05      	cmp	r3, #5
 8007038:	d11e      	bne.n	8007078 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007042:	2100      	movs	r1, #0
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f001 faf5 	bl	8008634 <USBD_LL_StallEP>
 800704a:	e015      	b.n	8007078 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00d      	beq.n	8007074 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800705e:	2b03      	cmp	r3, #3
 8007060:	d108      	bne.n	8007074 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	7afa      	ldrb	r2, [r7, #11]
 800706c:	4611      	mov	r1, r2
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	4798      	blx	r3
 8007072:	e001      	b.n	8007078 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007074:	2302      	movs	r3, #2
 8007076:	e000      	b.n	800707a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3718      	adds	r7, #24
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b086      	sub	sp, #24
 8007086:	af00      	add	r7, sp, #0
 8007088:	60f8      	str	r0, [r7, #12]
 800708a:	460b      	mov	r3, r1
 800708c:	607a      	str	r2, [r7, #4]
 800708e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007090:	7afb      	ldrb	r3, [r7, #11]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d17f      	bne.n	8007196 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	3314      	adds	r3, #20
 800709a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d15c      	bne.n	8007160 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d915      	bls.n	80070de <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	68da      	ldr	r2, [r3, #12]
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	1ad2      	subs	r2, r2, r3
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	461a      	mov	r2, r3
 80070c8:	6879      	ldr	r1, [r7, #4]
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 fec1 	bl	8007e52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070d0:	2300      	movs	r3, #0
 80070d2:	2200      	movs	r2, #0
 80070d4:	2100      	movs	r1, #0
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f001 fb58 	bl	800878c <USBD_LL_PrepareReceive>
 80070dc:	e04e      	b.n	800717c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	6912      	ldr	r2, [r2, #16]
 80070e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80070ea:	fb01 f202 	mul.w	r2, r1, r2
 80070ee:	1a9b      	subs	r3, r3, r2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d11c      	bne.n	800712e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d316      	bcc.n	800712e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800710a:	429a      	cmp	r2, r3
 800710c:	d20f      	bcs.n	800712e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800710e:	2200      	movs	r2, #0
 8007110:	2100      	movs	r1, #0
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f000 fe9d 	bl	8007e52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007120:	2300      	movs	r3, #0
 8007122:	2200      	movs	r2, #0
 8007124:	2100      	movs	r1, #0
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f001 fb30 	bl	800878c <USBD_LL_PrepareReceive>
 800712c:	e026      	b.n	800717c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00a      	beq.n	8007150 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007140:	2b03      	cmp	r3, #3
 8007142:	d105      	bne.n	8007150 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007150:	2180      	movs	r1, #128	; 0x80
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f001 fa6e 	bl	8008634 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 fecf 	bl	8007efc <USBD_CtlReceiveStatus>
 800715e:	e00d      	b.n	800717c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007166:	2b04      	cmp	r3, #4
 8007168:	d004      	beq.n	8007174 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007170:	2b00      	cmp	r3, #0
 8007172:	d103      	bne.n	800717c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007174:	2180      	movs	r1, #128	; 0x80
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f001 fa5c 	bl	8008634 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007182:	2b01      	cmp	r3, #1
 8007184:	d11d      	bne.n	80071c2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f7ff fe81 	bl	8006e8e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007194:	e015      	b.n	80071c2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00d      	beq.n	80071be <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	d108      	bne.n	80071be <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	7afa      	ldrb	r2, [r7, #11]
 80071b6:	4611      	mov	r1, r2
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	4798      	blx	r3
 80071bc:	e001      	b.n	80071c2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80071be:	2302      	movs	r3, #2
 80071c0:	e000      	b.n	80071c4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3718      	adds	r7, #24
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071d4:	2340      	movs	r3, #64	; 0x40
 80071d6:	2200      	movs	r2, #0
 80071d8:	2100      	movs	r1, #0
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f001 f9e5 	bl	80085aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2240      	movs	r2, #64	; 0x40
 80071ec:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071f0:	2340      	movs	r3, #64	; 0x40
 80071f2:	2200      	movs	r2, #0
 80071f4:	2180      	movs	r1, #128	; 0x80
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f001 f9d7 	bl	80085aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2240      	movs	r2, #64	; 0x40
 8007206:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800722c:	2b00      	cmp	r3, #0
 800722e:	d009      	beq.n	8007244 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	6852      	ldr	r2, [r2, #4]
 800723c:	b2d2      	uxtb	r2, r2
 800723e:	4611      	mov	r1, r2
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	4798      	blx	r3
  }

  return USBD_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800724e:	b480      	push	{r7}
 8007250:	b083      	sub	sp, #12
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	460b      	mov	r3, r1
 8007258:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	78fa      	ldrb	r2, [r7, #3]
 800725e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	bc80      	pop	{r7}
 800726a:	4770      	bx	lr

0800726c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2204      	movs	r2, #4
 8007284:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	370c      	adds	r7, #12
 800728e:	46bd      	mov	sp, r7
 8007290:	bc80      	pop	{r7}
 8007292:	4770      	bx	lr

08007294 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a2:	2b04      	cmp	r3, #4
 80072a4:	d105      	bne.n	80072b2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bc80      	pop	{r7}
 80072bc:	4770      	bx	lr

080072be <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b082      	sub	sp, #8
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d10b      	bne.n	80072e8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d005      	beq.n	80072e8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072e2:	69db      	ldr	r3, [r3, #28]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
	...

080072f4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800730a:	2b40      	cmp	r3, #64	; 0x40
 800730c:	d005      	beq.n	800731a <USBD_StdDevReq+0x26>
 800730e:	2b40      	cmp	r3, #64	; 0x40
 8007310:	d84f      	bhi.n	80073b2 <USBD_StdDevReq+0xbe>
 8007312:	2b00      	cmp	r3, #0
 8007314:	d009      	beq.n	800732a <USBD_StdDevReq+0x36>
 8007316:	2b20      	cmp	r3, #32
 8007318:	d14b      	bne.n	80073b2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	4798      	blx	r3
      break;
 8007328:	e048      	b.n	80073bc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	785b      	ldrb	r3, [r3, #1]
 800732e:	2b09      	cmp	r3, #9
 8007330:	d839      	bhi.n	80073a6 <USBD_StdDevReq+0xb2>
 8007332:	a201      	add	r2, pc, #4	; (adr r2, 8007338 <USBD_StdDevReq+0x44>)
 8007334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007338:	08007389 	.word	0x08007389
 800733c:	0800739d 	.word	0x0800739d
 8007340:	080073a7 	.word	0x080073a7
 8007344:	08007393 	.word	0x08007393
 8007348:	080073a7 	.word	0x080073a7
 800734c:	0800736b 	.word	0x0800736b
 8007350:	08007361 	.word	0x08007361
 8007354:	080073a7 	.word	0x080073a7
 8007358:	0800737f 	.word	0x0800737f
 800735c:	08007375 	.word	0x08007375
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007360:	6839      	ldr	r1, [r7, #0]
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f9dc 	bl	8007720 <USBD_GetDescriptor>
          break;
 8007368:	e022      	b.n	80073b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fb3f 	bl	80079f0 <USBD_SetAddress>
          break;
 8007372:	e01d      	b.n	80073b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fb7e 	bl	8007a78 <USBD_SetConfig>
          break;
 800737c:	e018      	b.n	80073b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fc07 	bl	8007b94 <USBD_GetConfig>
          break;
 8007386:	e013      	b.n	80073b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fc37 	bl	8007bfe <USBD_GetStatus>
          break;
 8007390:	e00e      	b.n	80073b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fc65 	bl	8007c64 <USBD_SetFeature>
          break;
 800739a:	e009      	b.n	80073b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800739c:	6839      	ldr	r1, [r7, #0]
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fc74 	bl	8007c8c <USBD_ClrFeature>
          break;
 80073a4:	e004      	b.n	80073b0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fccc 	bl	8007d46 <USBD_CtlError>
          break;
 80073ae:	bf00      	nop
      }
      break;
 80073b0:	e004      	b.n	80073bc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fcc6 	bl	8007d46 <USBD_CtlError>
      break;
 80073ba:	bf00      	nop
  }

  return ret;
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop

080073c8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073de:	2b40      	cmp	r3, #64	; 0x40
 80073e0:	d005      	beq.n	80073ee <USBD_StdItfReq+0x26>
 80073e2:	2b40      	cmp	r3, #64	; 0x40
 80073e4:	d82e      	bhi.n	8007444 <USBD_StdItfReq+0x7c>
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <USBD_StdItfReq+0x26>
 80073ea:	2b20      	cmp	r3, #32
 80073ec:	d12a      	bne.n	8007444 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f4:	3b01      	subs	r3, #1
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d81d      	bhi.n	8007436 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	889b      	ldrh	r3, [r3, #4]
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b01      	cmp	r3, #1
 8007402:	d813      	bhi.n	800742c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	4798      	blx	r3
 8007412:	4603      	mov	r3, r0
 8007414:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	88db      	ldrh	r3, [r3, #6]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d110      	bne.n	8007440 <USBD_StdItfReq+0x78>
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10d      	bne.n	8007440 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fd56 	bl	8007ed6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800742a:	e009      	b.n	8007440 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fc89 	bl	8007d46 <USBD_CtlError>
          break;
 8007434:	e004      	b.n	8007440 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fc84 	bl	8007d46 <USBD_CtlError>
          break;
 800743e:	e000      	b.n	8007442 <USBD_StdItfReq+0x7a>
          break;
 8007440:	bf00      	nop
      }
      break;
 8007442:	e004      	b.n	800744e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fc7d 	bl	8007d46 <USBD_CtlError>
      break;
 800744c:	bf00      	nop
  }

  return USBD_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	889b      	ldrh	r3, [r3, #4]
 800746a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007474:	2b40      	cmp	r3, #64	; 0x40
 8007476:	d007      	beq.n	8007488 <USBD_StdEPReq+0x30>
 8007478:	2b40      	cmp	r3, #64	; 0x40
 800747a:	f200 8146 	bhi.w	800770a <USBD_StdEPReq+0x2b2>
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00a      	beq.n	8007498 <USBD_StdEPReq+0x40>
 8007482:	2b20      	cmp	r3, #32
 8007484:	f040 8141 	bne.w	800770a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	4798      	blx	r3
      break;
 8007496:	e13d      	b.n	8007714 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074a0:	2b20      	cmp	r3, #32
 80074a2:	d10a      	bne.n	80074ba <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	4798      	blx	r3
 80074b2:	4603      	mov	r3, r0
 80074b4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
 80074b8:	e12d      	b.n	8007716 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	785b      	ldrb	r3, [r3, #1]
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d007      	beq.n	80074d2 <USBD_StdEPReq+0x7a>
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	f300 811b 	bgt.w	80076fe <USBD_StdEPReq+0x2a6>
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d072      	beq.n	80075b2 <USBD_StdEPReq+0x15a>
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d03a      	beq.n	8007546 <USBD_StdEPReq+0xee>
 80074d0:	e115      	b.n	80076fe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d002      	beq.n	80074e2 <USBD_StdEPReq+0x8a>
 80074dc:	2b03      	cmp	r3, #3
 80074de:	d015      	beq.n	800750c <USBD_StdEPReq+0xb4>
 80074e0:	e02b      	b.n	800753a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00c      	beq.n	8007502 <USBD_StdEPReq+0xaa>
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
 80074ea:	2b80      	cmp	r3, #128	; 0x80
 80074ec:	d009      	beq.n	8007502 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80074ee:	7bbb      	ldrb	r3, [r7, #14]
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f001 f89e 	bl	8008634 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80074f8:	2180      	movs	r1, #128	; 0x80
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f001 f89a 	bl	8008634 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007500:	e020      	b.n	8007544 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fc1e 	bl	8007d46 <USBD_CtlError>
              break;
 800750a:	e01b      	b.n	8007544 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	885b      	ldrh	r3, [r3, #2]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10e      	bne.n	8007532 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007514:	7bbb      	ldrb	r3, [r7, #14]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00b      	beq.n	8007532 <USBD_StdEPReq+0xda>
 800751a:	7bbb      	ldrb	r3, [r7, #14]
 800751c:	2b80      	cmp	r3, #128	; 0x80
 800751e:	d008      	beq.n	8007532 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	88db      	ldrh	r3, [r3, #6]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d104      	bne.n	8007532 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f001 f881 	bl	8008634 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fccf 	bl	8007ed6 <USBD_CtlSendStatus>

              break;
 8007538:	e004      	b.n	8007544 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fc02 	bl	8007d46 <USBD_CtlError>
              break;
 8007542:	bf00      	nop
          }
          break;
 8007544:	e0e0      	b.n	8007708 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800754c:	2b02      	cmp	r3, #2
 800754e:	d002      	beq.n	8007556 <USBD_StdEPReq+0xfe>
 8007550:	2b03      	cmp	r3, #3
 8007552:	d015      	beq.n	8007580 <USBD_StdEPReq+0x128>
 8007554:	e026      	b.n	80075a4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00c      	beq.n	8007576 <USBD_StdEPReq+0x11e>
 800755c:	7bbb      	ldrb	r3, [r7, #14]
 800755e:	2b80      	cmp	r3, #128	; 0x80
 8007560:	d009      	beq.n	8007576 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007562:	7bbb      	ldrb	r3, [r7, #14]
 8007564:	4619      	mov	r1, r3
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f001 f864 	bl	8008634 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800756c:	2180      	movs	r1, #128	; 0x80
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f001 f860 	bl	8008634 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007574:	e01c      	b.n	80075b0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fbe4 	bl	8007d46 <USBD_CtlError>
              break;
 800757e:	e017      	b.n	80075b0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	885b      	ldrh	r3, [r3, #2]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d112      	bne.n	80075ae <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007588:	7bbb      	ldrb	r3, [r7, #14]
 800758a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800758e:	2b00      	cmp	r3, #0
 8007590:	d004      	beq.n	800759c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007592:	7bbb      	ldrb	r3, [r7, #14]
 8007594:	4619      	mov	r1, r3
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 f86b 	bl	8008672 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fc9a 	bl	8007ed6 <USBD_CtlSendStatus>
              }
              break;
 80075a2:	e004      	b.n	80075ae <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fbcd 	bl	8007d46 <USBD_CtlError>
              break;
 80075ac:	e000      	b.n	80075b0 <USBD_StdEPReq+0x158>
              break;
 80075ae:	bf00      	nop
          }
          break;
 80075b0:	e0aa      	b.n	8007708 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d002      	beq.n	80075c2 <USBD_StdEPReq+0x16a>
 80075bc:	2b03      	cmp	r3, #3
 80075be:	d032      	beq.n	8007626 <USBD_StdEPReq+0x1ce>
 80075c0:	e097      	b.n	80076f2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075c2:	7bbb      	ldrb	r3, [r7, #14]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d007      	beq.n	80075d8 <USBD_StdEPReq+0x180>
 80075c8:	7bbb      	ldrb	r3, [r7, #14]
 80075ca:	2b80      	cmp	r3, #128	; 0x80
 80075cc:	d004      	beq.n	80075d8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fbb8 	bl	8007d46 <USBD_CtlError>
                break;
 80075d6:	e091      	b.n	80076fc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	da0b      	bge.n	80075f8 <USBD_StdEPReq+0x1a0>
 80075e0:	7bbb      	ldrb	r3, [r7, #14]
 80075e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075e6:	4613      	mov	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	3310      	adds	r3, #16
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	4413      	add	r3, r2
 80075f4:	3304      	adds	r3, #4
 80075f6:	e00b      	b.n	8007610 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
 80075fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075fe:	4613      	mov	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4413      	add	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	4413      	add	r3, r2
 800760e:	3304      	adds	r3, #4
 8007610:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	2200      	movs	r2, #0
 8007616:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2202      	movs	r2, #2
 800761c:	4619      	mov	r1, r3
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fbfb 	bl	8007e1a <USBD_CtlSendData>
              break;
 8007624:	e06a      	b.n	80076fc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007626:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800762a:	2b00      	cmp	r3, #0
 800762c:	da11      	bge.n	8007652 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800762e:	7bbb      	ldrb	r3, [r7, #14]
 8007630:	f003 020f 	and.w	r2, r3, #15
 8007634:	6879      	ldr	r1, [r7, #4]
 8007636:	4613      	mov	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	440b      	add	r3, r1
 8007640:	3318      	adds	r3, #24
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d117      	bne.n	8007678 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fb7b 	bl	8007d46 <USBD_CtlError>
                  break;
 8007650:	e054      	b.n	80076fc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007652:	7bbb      	ldrb	r3, [r7, #14]
 8007654:	f003 020f 	and.w	r2, r3, #15
 8007658:	6879      	ldr	r1, [r7, #4]
 800765a:	4613      	mov	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	4413      	add	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	440b      	add	r3, r1
 8007664:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d104      	bne.n	8007678 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800766e:	6839      	ldr	r1, [r7, #0]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fb68 	bl	8007d46 <USBD_CtlError>
                  break;
 8007676:	e041      	b.n	80076fc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800767c:	2b00      	cmp	r3, #0
 800767e:	da0b      	bge.n	8007698 <USBD_StdEPReq+0x240>
 8007680:	7bbb      	ldrb	r3, [r7, #14]
 8007682:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007686:	4613      	mov	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	3310      	adds	r3, #16
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	4413      	add	r3, r2
 8007694:	3304      	adds	r3, #4
 8007696:	e00b      	b.n	80076b0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800769e:	4613      	mov	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	4413      	add	r3, r2
 80076ae:	3304      	adds	r3, #4
 80076b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80076b2:	7bbb      	ldrb	r3, [r7, #14]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <USBD_StdEPReq+0x266>
 80076b8:	7bbb      	ldrb	r3, [r7, #14]
 80076ba:	2b80      	cmp	r3, #128	; 0x80
 80076bc:	d103      	bne.n	80076c6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	2200      	movs	r2, #0
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	e00e      	b.n	80076e4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80076c6:	7bbb      	ldrb	r3, [r7, #14]
 80076c8:	4619      	mov	r1, r3
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fff0 	bl	80086b0 <USBD_LL_IsStallEP>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d003      	beq.n	80076de <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	2201      	movs	r2, #1
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	e002      	b.n	80076e4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	2200      	movs	r2, #0
 80076e2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2202      	movs	r2, #2
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fb95 	bl	8007e1a <USBD_CtlSendData>
              break;
 80076f0:	e004      	b.n	80076fc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fb26 	bl	8007d46 <USBD_CtlError>
              break;
 80076fa:	bf00      	nop
          }
          break;
 80076fc:	e004      	b.n	8007708 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fb20 	bl	8007d46 <USBD_CtlError>
          break;
 8007706:	bf00      	nop
      }
      break;
 8007708:	e004      	b.n	8007714 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800770a:	6839      	ldr	r1, [r7, #0]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fb1a 	bl	8007d46 <USBD_CtlError>
      break;
 8007712:	bf00      	nop
  }

  return ret;
 8007714:	7bfb      	ldrb	r3, [r7, #15]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800772a:	2300      	movs	r3, #0
 800772c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800772e:	2300      	movs	r3, #0
 8007730:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	885b      	ldrh	r3, [r3, #2]
 800773a:	0a1b      	lsrs	r3, r3, #8
 800773c:	b29b      	uxth	r3, r3
 800773e:	3b01      	subs	r3, #1
 8007740:	2b06      	cmp	r3, #6
 8007742:	f200 8128 	bhi.w	8007996 <USBD_GetDescriptor+0x276>
 8007746:	a201      	add	r2, pc, #4	; (adr r2, 800774c <USBD_GetDescriptor+0x2c>)
 8007748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774c:	08007769 	.word	0x08007769
 8007750:	08007781 	.word	0x08007781
 8007754:	080077c1 	.word	0x080077c1
 8007758:	08007997 	.word	0x08007997
 800775c:	08007997 	.word	0x08007997
 8007760:	08007937 	.word	0x08007937
 8007764:	08007963 	.word	0x08007963
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	7c12      	ldrb	r2, [r2, #16]
 8007774:	f107 0108 	add.w	r1, r7, #8
 8007778:	4610      	mov	r0, r2
 800777a:	4798      	blx	r3
 800777c:	60f8      	str	r0, [r7, #12]
      break;
 800777e:	e112      	b.n	80079a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	7c1b      	ldrb	r3, [r3, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10d      	bne.n	80077a4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800778e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007790:	f107 0208 	add.w	r2, r7, #8
 8007794:	4610      	mov	r0, r2
 8007796:	4798      	blx	r3
 8007798:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3301      	adds	r3, #1
 800779e:	2202      	movs	r2, #2
 80077a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80077a2:	e100      	b.n	80079a6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ac:	f107 0208 	add.w	r2, r7, #8
 80077b0:	4610      	mov	r0, r2
 80077b2:	4798      	blx	r3
 80077b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	3301      	adds	r3, #1
 80077ba:	2202      	movs	r2, #2
 80077bc:	701a      	strb	r2, [r3, #0]
      break;
 80077be:	e0f2      	b.n	80079a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	885b      	ldrh	r3, [r3, #2]
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b05      	cmp	r3, #5
 80077c8:	f200 80ac 	bhi.w	8007924 <USBD_GetDescriptor+0x204>
 80077cc:	a201      	add	r2, pc, #4	; (adr r2, 80077d4 <USBD_GetDescriptor+0xb4>)
 80077ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d2:	bf00      	nop
 80077d4:	080077ed 	.word	0x080077ed
 80077d8:	08007821 	.word	0x08007821
 80077dc:	08007855 	.word	0x08007855
 80077e0:	08007889 	.word	0x08007889
 80077e4:	080078bd 	.word	0x080078bd
 80077e8:	080078f1 	.word	0x080078f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00b      	beq.n	8007810 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	7c12      	ldrb	r2, [r2, #16]
 8007804:	f107 0108 	add.w	r1, r7, #8
 8007808:	4610      	mov	r0, r2
 800780a:	4798      	blx	r3
 800780c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800780e:	e091      	b.n	8007934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fa97 	bl	8007d46 <USBD_CtlError>
            err++;
 8007818:	7afb      	ldrb	r3, [r7, #11]
 800781a:	3301      	adds	r3, #1
 800781c:	72fb      	strb	r3, [r7, #11]
          break;
 800781e:	e089      	b.n	8007934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00b      	beq.n	8007844 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	7c12      	ldrb	r2, [r2, #16]
 8007838:	f107 0108 	add.w	r1, r7, #8
 800783c:	4610      	mov	r0, r2
 800783e:	4798      	blx	r3
 8007840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007842:	e077      	b.n	8007934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fa7d 	bl	8007d46 <USBD_CtlError>
            err++;
 800784c:	7afb      	ldrb	r3, [r7, #11]
 800784e:	3301      	adds	r3, #1
 8007850:	72fb      	strb	r3, [r7, #11]
          break;
 8007852:	e06f      	b.n	8007934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00b      	beq.n	8007878 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	7c12      	ldrb	r2, [r2, #16]
 800786c:	f107 0108 	add.w	r1, r7, #8
 8007870:	4610      	mov	r0, r2
 8007872:	4798      	blx	r3
 8007874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007876:	e05d      	b.n	8007934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007878:	6839      	ldr	r1, [r7, #0]
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fa63 	bl	8007d46 <USBD_CtlError>
            err++;
 8007880:	7afb      	ldrb	r3, [r7, #11]
 8007882:	3301      	adds	r3, #1
 8007884:	72fb      	strb	r3, [r7, #11]
          break;
 8007886:	e055      	b.n	8007934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00b      	beq.n	80078ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	7c12      	ldrb	r2, [r2, #16]
 80078a0:	f107 0108 	add.w	r1, r7, #8
 80078a4:	4610      	mov	r0, r2
 80078a6:	4798      	blx	r3
 80078a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078aa:	e043      	b.n	8007934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fa49 	bl	8007d46 <USBD_CtlError>
            err++;
 80078b4:	7afb      	ldrb	r3, [r7, #11]
 80078b6:	3301      	adds	r3, #1
 80078b8:	72fb      	strb	r3, [r7, #11]
          break;
 80078ba:	e03b      	b.n	8007934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00b      	beq.n	80078e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078ce:	695b      	ldr	r3, [r3, #20]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	7c12      	ldrb	r2, [r2, #16]
 80078d4:	f107 0108 	add.w	r1, r7, #8
 80078d8:	4610      	mov	r0, r2
 80078da:	4798      	blx	r3
 80078dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078de:	e029      	b.n	8007934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fa2f 	bl	8007d46 <USBD_CtlError>
            err++;
 80078e8:	7afb      	ldrb	r3, [r7, #11]
 80078ea:	3301      	adds	r3, #1
 80078ec:	72fb      	strb	r3, [r7, #11]
          break;
 80078ee:	e021      	b.n	8007934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00b      	beq.n	8007914 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	7c12      	ldrb	r2, [r2, #16]
 8007908:	f107 0108 	add.w	r1, r7, #8
 800790c:	4610      	mov	r0, r2
 800790e:	4798      	blx	r3
 8007910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007912:	e00f      	b.n	8007934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fa15 	bl	8007d46 <USBD_CtlError>
            err++;
 800791c:	7afb      	ldrb	r3, [r7, #11]
 800791e:	3301      	adds	r3, #1
 8007920:	72fb      	strb	r3, [r7, #11]
          break;
 8007922:	e007      	b.n	8007934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fa0d 	bl	8007d46 <USBD_CtlError>
          err++;
 800792c:	7afb      	ldrb	r3, [r7, #11]
 800792e:	3301      	adds	r3, #1
 8007930:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007932:	e038      	b.n	80079a6 <USBD_GetDescriptor+0x286>
 8007934:	e037      	b.n	80079a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	7c1b      	ldrb	r3, [r3, #16]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d109      	bne.n	8007952 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007946:	f107 0208 	add.w	r2, r7, #8
 800794a:	4610      	mov	r0, r2
 800794c:	4798      	blx	r3
 800794e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007950:	e029      	b.n	80079a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f9f6 	bl	8007d46 <USBD_CtlError>
        err++;
 800795a:	7afb      	ldrb	r3, [r7, #11]
 800795c:	3301      	adds	r3, #1
 800795e:	72fb      	strb	r3, [r7, #11]
      break;
 8007960:	e021      	b.n	80079a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	7c1b      	ldrb	r3, [r3, #16]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10d      	bne.n	8007986 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007972:	f107 0208 	add.w	r2, r7, #8
 8007976:	4610      	mov	r0, r2
 8007978:	4798      	blx	r3
 800797a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3301      	adds	r3, #1
 8007980:	2207      	movs	r2, #7
 8007982:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007984:	e00f      	b.n	80079a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f9dc 	bl	8007d46 <USBD_CtlError>
        err++;
 800798e:	7afb      	ldrb	r3, [r7, #11]
 8007990:	3301      	adds	r3, #1
 8007992:	72fb      	strb	r3, [r7, #11]
      break;
 8007994:	e007      	b.n	80079a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007996:	6839      	ldr	r1, [r7, #0]
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f9d4 	bl	8007d46 <USBD_CtlError>
      err++;
 800799e:	7afb      	ldrb	r3, [r7, #11]
 80079a0:	3301      	adds	r3, #1
 80079a2:	72fb      	strb	r3, [r7, #11]
      break;
 80079a4:	bf00      	nop
  }

  if (err != 0U)
 80079a6:	7afb      	ldrb	r3, [r7, #11]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d11c      	bne.n	80079e6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80079ac:	893b      	ldrh	r3, [r7, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d011      	beq.n	80079d6 <USBD_GetDescriptor+0x2b6>
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	88db      	ldrh	r3, [r3, #6]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00d      	beq.n	80079d6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	88da      	ldrh	r2, [r3, #6]
 80079be:	893b      	ldrh	r3, [r7, #8]
 80079c0:	4293      	cmp	r3, r2
 80079c2:	bf28      	it	cs
 80079c4:	4613      	movcs	r3, r2
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80079ca:	893b      	ldrh	r3, [r7, #8]
 80079cc:	461a      	mov	r2, r3
 80079ce:	68f9      	ldr	r1, [r7, #12]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fa22 	bl	8007e1a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	88db      	ldrh	r3, [r3, #6]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d104      	bne.n	80079e8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fa79 	bl	8007ed6 <USBD_CtlSendStatus>
 80079e4:	e000      	b.n	80079e8 <USBD_GetDescriptor+0x2c8>
    return;
 80079e6:	bf00      	nop
    }
  }
}
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop

080079f0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	889b      	ldrh	r3, [r3, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d130      	bne.n	8007a64 <USBD_SetAddress+0x74>
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	88db      	ldrh	r3, [r3, #6]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d12c      	bne.n	8007a64 <USBD_SetAddress+0x74>
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	885b      	ldrh	r3, [r3, #2]
 8007a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8007a10:	d828      	bhi.n	8007a64 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	885b      	ldrh	r3, [r3, #2]
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a24:	2b03      	cmp	r3, #3
 8007a26:	d104      	bne.n	8007a32 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f98b 	bl	8007d46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a30:	e01d      	b.n	8007a6e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	7bfa      	ldrb	r2, [r7, #15]
 8007a36:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fe62 	bl	8008708 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fa46 	bl	8007ed6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d004      	beq.n	8007a5a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2202      	movs	r2, #2
 8007a54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a58:	e009      	b.n	8007a6e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a62:	e004      	b.n	8007a6e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f96d 	bl	8007d46 <USBD_CtlError>
  }
}
 8007a6c:	bf00      	nop
 8007a6e:	bf00      	nop
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
	...

08007a78 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	885b      	ldrh	r3, [r3, #2]
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	4b41      	ldr	r3, [pc, #260]	; (8007b90 <USBD_SetConfig+0x118>)
 8007a8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a8c:	4b40      	ldr	r3, [pc, #256]	; (8007b90 <USBD_SetConfig+0x118>)
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d904      	bls.n	8007a9e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f955 	bl	8007d46 <USBD_CtlError>
 8007a9c:	e075      	b.n	8007b8a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d002      	beq.n	8007aae <USBD_SetConfig+0x36>
 8007aa8:	2b03      	cmp	r3, #3
 8007aaa:	d023      	beq.n	8007af4 <USBD_SetConfig+0x7c>
 8007aac:	e062      	b.n	8007b74 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007aae:	4b38      	ldr	r3, [pc, #224]	; (8007b90 <USBD_SetConfig+0x118>)
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d01a      	beq.n	8007aec <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007ab6:	4b36      	ldr	r3, [pc, #216]	; (8007b90 <USBD_SetConfig+0x118>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	461a      	mov	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2203      	movs	r2, #3
 8007ac4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ac8:	4b31      	ldr	r3, [pc, #196]	; (8007b90 <USBD_SetConfig+0x118>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	4619      	mov	r1, r3
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff f9e7 	bl	8006ea2 <USBD_SetClassConfig>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d104      	bne.n	8007ae4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f932 	bl	8007d46 <USBD_CtlError>
            return;
 8007ae2:	e052      	b.n	8007b8a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f9f6 	bl	8007ed6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007aea:	e04e      	b.n	8007b8a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f9f2 	bl	8007ed6 <USBD_CtlSendStatus>
        break;
 8007af2:	e04a      	b.n	8007b8a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007af4:	4b26      	ldr	r3, [pc, #152]	; (8007b90 <USBD_SetConfig+0x118>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d112      	bne.n	8007b22 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007b04:	4b22      	ldr	r3, [pc, #136]	; (8007b90 <USBD_SetConfig+0x118>)
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007b0e:	4b20      	ldr	r3, [pc, #128]	; (8007b90 <USBD_SetConfig+0x118>)
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7ff f9e3 	bl	8006ee0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f9db 	bl	8007ed6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b20:	e033      	b.n	8007b8a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007b22:	4b1b      	ldr	r3, [pc, #108]	; (8007b90 <USBD_SetConfig+0x118>)
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d01d      	beq.n	8007b6c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7ff f9d1 	bl	8006ee0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007b3e:	4b14      	ldr	r3, [pc, #80]	; (8007b90 <USBD_SetConfig+0x118>)
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	461a      	mov	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b48:	4b11      	ldr	r3, [pc, #68]	; (8007b90 <USBD_SetConfig+0x118>)
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7ff f9a7 	bl	8006ea2 <USBD_SetClassConfig>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d104      	bne.n	8007b64 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f8f2 	bl	8007d46 <USBD_CtlError>
            return;
 8007b62:	e012      	b.n	8007b8a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f9b6 	bl	8007ed6 <USBD_CtlSendStatus>
        break;
 8007b6a:	e00e      	b.n	8007b8a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f9b2 	bl	8007ed6 <USBD_CtlSendStatus>
        break;
 8007b72:	e00a      	b.n	8007b8a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f8e5 	bl	8007d46 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007b7c:	4b04      	ldr	r3, [pc, #16]	; (8007b90 <USBD_SetConfig+0x118>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7ff f9ac 	bl	8006ee0 <USBD_ClrClassConfig>
        break;
 8007b88:	bf00      	nop
    }
  }
}
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	200002ec 	.word	0x200002ec

08007b94 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	88db      	ldrh	r3, [r3, #6]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d004      	beq.n	8007bb0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f8cc 	bl	8007d46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007bae:	e022      	b.n	8007bf6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	dc02      	bgt.n	8007bc0 <USBD_GetConfig+0x2c>
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	dc03      	bgt.n	8007bc6 <USBD_GetConfig+0x32>
 8007bbe:	e015      	b.n	8007bec <USBD_GetConfig+0x58>
 8007bc0:	2b03      	cmp	r3, #3
 8007bc2:	d00b      	beq.n	8007bdc <USBD_GetConfig+0x48>
 8007bc4:	e012      	b.n	8007bec <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3308      	adds	r3, #8
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f920 	bl	8007e1a <USBD_CtlSendData>
        break;
 8007bda:	e00c      	b.n	8007bf6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	3304      	adds	r3, #4
 8007be0:	2201      	movs	r2, #1
 8007be2:	4619      	mov	r1, r3
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f918 	bl	8007e1a <USBD_CtlSendData>
        break;
 8007bea:	e004      	b.n	8007bf6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f8a9 	bl	8007d46 <USBD_CtlError>
        break;
 8007bf4:	bf00      	nop
}
 8007bf6:	bf00      	nop
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b082      	sub	sp, #8
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d81e      	bhi.n	8007c52 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	88db      	ldrh	r3, [r3, #6]
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d004      	beq.n	8007c26 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f891 	bl	8007d46 <USBD_CtlError>
        break;
 8007c24:	e01a      	b.n	8007c5c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d005      	beq.n	8007c42 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	f043 0202 	orr.w	r2, r3, #2
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	330c      	adds	r3, #12
 8007c46:	2202      	movs	r2, #2
 8007c48:	4619      	mov	r1, r3
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f8e5 	bl	8007e1a <USBD_CtlSendData>
      break;
 8007c50:	e004      	b.n	8007c5c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f876 	bl	8007d46 <USBD_CtlError>
      break;
 8007c5a:	bf00      	nop
  }
}
 8007c5c:	bf00      	nop
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	885b      	ldrh	r3, [r3, #2]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d106      	bne.n	8007c84 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f929 	bl	8007ed6 <USBD_CtlSendStatus>
  }
}
 8007c84:	bf00      	nop
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d80b      	bhi.n	8007cba <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	885b      	ldrh	r3, [r3, #2]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d10c      	bne.n	8007cc4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f90f 	bl	8007ed6 <USBD_CtlSendStatus>
      }
      break;
 8007cb8:	e004      	b.n	8007cc4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f842 	bl	8007d46 <USBD_CtlError>
      break;
 8007cc2:	e000      	b.n	8007cc6 <USBD_ClrFeature+0x3a>
      break;
 8007cc4:	bf00      	nop
  }
}
 8007cc6:	bf00      	nop
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b083      	sub	sp, #12
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	781a      	ldrb	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	785a      	ldrb	r2, [r3, #1]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	3302      	adds	r3, #2
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	3303      	adds	r3, #3
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	021b      	lsls	r3, r3, #8
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	4413      	add	r3, r2
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	3304      	adds	r3, #4
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	3305      	adds	r3, #5
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	021b      	lsls	r3, r3, #8
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	4413      	add	r3, r2
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	3306      	adds	r3, #6
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	3307      	adds	r3, #7
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	021b      	lsls	r3, r3, #8
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	4413      	add	r3, r2
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	80da      	strh	r2, [r3, #6]

}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bc80      	pop	{r7}
 8007d44:	4770      	bx	lr

08007d46 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b082      	sub	sp, #8
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007d50:	2180      	movs	r1, #128	; 0x80
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fc6e 	bl	8008634 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007d58:	2100      	movs	r1, #0
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 fc6a 	bl	8008634 <USBD_LL_StallEP>
}
 8007d60:	bf00      	nop
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d032      	beq.n	8007de4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 f834 	bl	8007dec <USBD_GetLen>
 8007d84:	4603      	mov	r3, r0
 8007d86:	3301      	adds	r3, #1
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
 8007d94:	1c5a      	adds	r2, r3, #1
 8007d96:	75fa      	strb	r2, [r7, #23]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	7812      	ldrb	r2, [r2, #0]
 8007da2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007da4:	7dfb      	ldrb	r3, [r7, #23]
 8007da6:	1c5a      	adds	r2, r3, #1
 8007da8:	75fa      	strb	r2, [r7, #23]
 8007daa:	461a      	mov	r2, r3
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	4413      	add	r3, r2
 8007db0:	2203      	movs	r2, #3
 8007db2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007db4:	e012      	b.n	8007ddc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	1c5a      	adds	r2, r3, #1
 8007dba:	60fa      	str	r2, [r7, #12]
 8007dbc:	7dfa      	ldrb	r2, [r7, #23]
 8007dbe:	1c51      	adds	r1, r2, #1
 8007dc0:	75f9      	strb	r1, [r7, #23]
 8007dc2:	4611      	mov	r1, r2
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	440a      	add	r2, r1
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
 8007dce:	1c5a      	adds	r2, r3, #1
 8007dd0:	75fa      	strb	r2, [r7, #23]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	2200      	movs	r2, #0
 8007dda:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e8      	bne.n	8007db6 <USBD_GetString+0x4e>
    }
  }
}
 8007de4:	bf00      	nop
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007df8:	e005      	b.n	8007e06 <USBD_GetLen+0x1a>
  {
    len++;
 8007dfa:	7bfb      	ldrb	r3, [r7, #15]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3301      	adds	r3, #1
 8007e04:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1f5      	bne.n	8007dfa <USBD_GetLen+0xe>
  }

  return len;
 8007e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3714      	adds	r7, #20
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bc80      	pop	{r7}
 8007e18:	4770      	bx	lr

08007e1a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	60f8      	str	r0, [r7, #12]
 8007e22:	60b9      	str	r1, [r7, #8]
 8007e24:	4613      	mov	r3, r2
 8007e26:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e30:	88fa      	ldrh	r2, [r7, #6]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007e36:	88fa      	ldrh	r2, [r7, #6]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e3c:	88fb      	ldrh	r3, [r7, #6]
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	2100      	movs	r1, #0
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f000 fc7f 	bl	8008746 <USBD_LL_Transmit>

  return USBD_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b084      	sub	sp, #16
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	60f8      	str	r0, [r7, #12]
 8007e5a:	60b9      	str	r1, [r7, #8]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e60:	88fb      	ldrh	r3, [r7, #6]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	2100      	movs	r1, #0
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f000 fc6d 	bl	8008746 <USBD_LL_Transmit>

  return USBD_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b084      	sub	sp, #16
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	4613      	mov	r3, r2
 8007e82:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2203      	movs	r2, #3
 8007e88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007e8c:	88fa      	ldrh	r2, [r7, #6]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007e94:	88fa      	ldrh	r2, [r7, #6]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e9c:	88fb      	ldrh	r3, [r7, #6]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f000 fc72 	bl	800878c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b084      	sub	sp, #16
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	60b9      	str	r1, [r7, #8]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ec0:	88fb      	ldrh	r3, [r7, #6]
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f000 fc60 	bl	800878c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b082      	sub	sp, #8
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2204      	movs	r2, #4
 8007ee2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	2200      	movs	r2, #0
 8007eea:	2100      	movs	r1, #0
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fc2a 	bl	8008746 <USBD_LL_Transmit>

  return USBD_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2205      	movs	r2, #5
 8007f08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	2200      	movs	r2, #0
 8007f10:	2100      	movs	r1, #0
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fc3a 	bl	800878c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
	...

08007f24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	4912      	ldr	r1, [pc, #72]	; (8007f74 <MX_USB_DEVICE_Init+0x50>)
 8007f2c:	4812      	ldr	r0, [pc, #72]	; (8007f78 <MX_USB_DEVICE_Init+0x54>)
 8007f2e:	f7fe ff5e 	bl	8006dee <USBD_Init>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f38:	f7f8 fc64 	bl	8000804 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f3c:	490f      	ldr	r1, [pc, #60]	; (8007f7c <MX_USB_DEVICE_Init+0x58>)
 8007f3e:	480e      	ldr	r0, [pc, #56]	; (8007f78 <MX_USB_DEVICE_Init+0x54>)
 8007f40:	f7fe ff80 	bl	8006e44 <USBD_RegisterClass>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f4a:	f7f8 fc5b 	bl	8000804 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f4e:	490c      	ldr	r1, [pc, #48]	; (8007f80 <MX_USB_DEVICE_Init+0x5c>)
 8007f50:	4809      	ldr	r0, [pc, #36]	; (8007f78 <MX_USB_DEVICE_Init+0x54>)
 8007f52:	f7fe feb1 	bl	8006cb8 <USBD_CDC_RegisterInterface>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f5c:	f7f8 fc52 	bl	8000804 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f60:	4805      	ldr	r0, [pc, #20]	; (8007f78 <MX_USB_DEVICE_Init+0x54>)
 8007f62:	f7fe ff88 	bl	8006e76 <USBD_Start>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d001      	beq.n	8007f70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007f6c:	f7f8 fc4a 	bl	8000804 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f70:	bf00      	nop
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	2000012c 	.word	0x2000012c
 8007f78:	200002f0 	.word	0x200002f0
 8007f7c:	20000018 	.word	0x20000018
 8007f80:	2000011c 	.word	0x2000011c

08007f84 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007f88:	2200      	movs	r2, #0
 8007f8a:	4905      	ldr	r1, [pc, #20]	; (8007fa0 <CDC_Init_FS+0x1c>)
 8007f8c:	4805      	ldr	r0, [pc, #20]	; (8007fa4 <CDC_Init_FS+0x20>)
 8007f8e:	f7fe fea9 	bl	8006ce4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007f92:	4905      	ldr	r1, [pc, #20]	; (8007fa8 <CDC_Init_FS+0x24>)
 8007f94:	4803      	ldr	r0, [pc, #12]	; (8007fa4 <CDC_Init_FS+0x20>)
 8007f96:	f7fe febe 	bl	8006d16 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007f9a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	2000099c 	.word	0x2000099c
 8007fa4:	200002f0 	.word	0x200002f0
 8007fa8:	200005b4 	.word	0x200005b4

08007fac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007fac:	b480      	push	{r7}
 8007fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007fb0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bc80      	pop	{r7}
 8007fb8:	4770      	bx	lr
	...

08007fbc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	6039      	str	r1, [r7, #0]
 8007fc6:	71fb      	strb	r3, [r7, #7]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007fcc:	79fb      	ldrb	r3, [r7, #7]
 8007fce:	2b23      	cmp	r3, #35	; 0x23
 8007fd0:	d84a      	bhi.n	8008068 <CDC_Control_FS+0xac>
 8007fd2:	a201      	add	r2, pc, #4	; (adr r2, 8007fd8 <CDC_Control_FS+0x1c>)
 8007fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd8:	08008069 	.word	0x08008069
 8007fdc:	08008069 	.word	0x08008069
 8007fe0:	08008069 	.word	0x08008069
 8007fe4:	08008069 	.word	0x08008069
 8007fe8:	08008069 	.word	0x08008069
 8007fec:	08008069 	.word	0x08008069
 8007ff0:	08008069 	.word	0x08008069
 8007ff4:	08008069 	.word	0x08008069
 8007ff8:	08008069 	.word	0x08008069
 8007ffc:	08008069 	.word	0x08008069
 8008000:	08008069 	.word	0x08008069
 8008004:	08008069 	.word	0x08008069
 8008008:	08008069 	.word	0x08008069
 800800c:	08008069 	.word	0x08008069
 8008010:	08008069 	.word	0x08008069
 8008014:	08008069 	.word	0x08008069
 8008018:	08008069 	.word	0x08008069
 800801c:	08008069 	.word	0x08008069
 8008020:	08008069 	.word	0x08008069
 8008024:	08008069 	.word	0x08008069
 8008028:	08008069 	.word	0x08008069
 800802c:	08008069 	.word	0x08008069
 8008030:	08008069 	.word	0x08008069
 8008034:	08008069 	.word	0x08008069
 8008038:	08008069 	.word	0x08008069
 800803c:	08008069 	.word	0x08008069
 8008040:	08008069 	.word	0x08008069
 8008044:	08008069 	.word	0x08008069
 8008048:	08008069 	.word	0x08008069
 800804c:	08008069 	.word	0x08008069
 8008050:	08008069 	.word	0x08008069
 8008054:	08008069 	.word	0x08008069
 8008058:	08008069 	.word	0x08008069
 800805c:	08008069 	.word	0x08008069
 8008060:	08008069 	.word	0x08008069
 8008064:	08008069 	.word	0x08008069
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008068:	bf00      	nop
  }

  return (USBD_OK);
 800806a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800806c:	4618      	mov	r0, r3
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	bc80      	pop	{r7}
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop

08008078 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008082:	6879      	ldr	r1, [r7, #4]
 8008084:	4810      	ldr	r0, [pc, #64]	; (80080c8 <CDC_Receive_FS+0x50>)
 8008086:	f7fe fe46 	bl	8006d16 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800808a:	480f      	ldr	r0, [pc, #60]	; (80080c8 <CDC_Receive_FS+0x50>)
 800808c:	f7fe fe85 	bl	8006d9a <USBD_CDC_ReceivePacket>

	memset (received_data, '\0', 6);  // clear the buffer
 8008090:	2206      	movs	r2, #6
 8008092:	2100      	movs	r1, #0
 8008094:	480d      	ldr	r0, [pc, #52]	; (80080cc <CDC_Receive_FS+0x54>)
 8008096:	f000 fc2d 	bl	80088f4 <memset>
	uint8_t len = (uint8_t)*Len;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	73fb      	strb	r3, [r7, #15]
	memcpy(received_data, Buf, len);  // copy the data to the buffer
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	461a      	mov	r2, r3
 80080a4:	6879      	ldr	r1, [r7, #4]
 80080a6:	4809      	ldr	r0, [pc, #36]	; (80080cc <CDC_Receive_FS+0x54>)
 80080a8:	f000 fc16 	bl	80088d8 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
 80080ae:	461a      	mov	r2, r3
 80080b0:	2100      	movs	r1, #0
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fc1e 	bl	80088f4 <memset>
	flag = 1;
 80080b8:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <CDC_Receive_FS+0x58>)
 80080ba:	2201      	movs	r2, #1
 80080bc:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 80080be:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	200002f0 	.word	0x200002f0
 80080cc:	200002d0 	.word	0x200002d0
 80080d0:	200002e0 	.word	0x200002e0

080080d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	460b      	mov	r3, r1
 80080de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80080e4:	4b0d      	ldr	r3, [pc, #52]	; (800811c <CDC_Transmit_FS+0x48>)
 80080e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e00b      	b.n	8008112 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80080fa:	887b      	ldrh	r3, [r7, #2]
 80080fc:	461a      	mov	r2, r3
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	4806      	ldr	r0, [pc, #24]	; (800811c <CDC_Transmit_FS+0x48>)
 8008102:	f7fe fdef 	bl	8006ce4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008106:	4805      	ldr	r0, [pc, #20]	; (800811c <CDC_Transmit_FS+0x48>)
 8008108:	f7fe fe18 	bl	8006d3c <USBD_CDC_TransmitPacket>
 800810c:	4603      	mov	r3, r0
 800810e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008110:	7bfb      	ldrb	r3, [r7, #15]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	200002f0 	.word	0x200002f0

08008120 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	4603      	mov	r3, r0
 8008128:	6039      	str	r1, [r7, #0]
 800812a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	2212      	movs	r2, #18
 8008130:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008132:	4b03      	ldr	r3, [pc, #12]	; (8008140 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008134:	4618      	mov	r0, r3
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	bc80      	pop	{r7}
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	20000148 	.word	0x20000148

08008144 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	4603      	mov	r3, r0
 800814c:	6039      	str	r1, [r7, #0]
 800814e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	2204      	movs	r2, #4
 8008154:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008156:	4b03      	ldr	r3, [pc, #12]	; (8008164 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008158:	4618      	mov	r0, r3
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	bc80      	pop	{r7}
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	2000015c 	.word	0x2000015c

08008168 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	4603      	mov	r3, r0
 8008170:	6039      	str	r1, [r7, #0]
 8008172:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008174:	79fb      	ldrb	r3, [r7, #7]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d105      	bne.n	8008186 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	4907      	ldr	r1, [pc, #28]	; (800819c <USBD_FS_ProductStrDescriptor+0x34>)
 800817e:	4808      	ldr	r0, [pc, #32]	; (80081a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008180:	f7ff fdf2 	bl	8007d68 <USBD_GetString>
 8008184:	e004      	b.n	8008190 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	4904      	ldr	r1, [pc, #16]	; (800819c <USBD_FS_ProductStrDescriptor+0x34>)
 800818a:	4805      	ldr	r0, [pc, #20]	; (80081a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800818c:	f7ff fdec 	bl	8007d68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008190:	4b02      	ldr	r3, [pc, #8]	; (800819c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008192:	4618      	mov	r0, r3
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	20000d84 	.word	0x20000d84
 80081a0:	0800892c 	.word	0x0800892c

080081a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	4603      	mov	r3, r0
 80081ac:	6039      	str	r1, [r7, #0]
 80081ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	4904      	ldr	r1, [pc, #16]	; (80081c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80081b4:	4804      	ldr	r0, [pc, #16]	; (80081c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80081b6:	f7ff fdd7 	bl	8007d68 <USBD_GetString>
  return USBD_StrDesc;
 80081ba:	4b02      	ldr	r3, [pc, #8]	; (80081c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	20000d84 	.word	0x20000d84
 80081c8:	08008944 	.word	0x08008944

080081cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	4603      	mov	r3, r0
 80081d4:	6039      	str	r1, [r7, #0]
 80081d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	221a      	movs	r2, #26
 80081dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80081de:	f000 f843 	bl	8008268 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80081e2:	4b02      	ldr	r3, [pc, #8]	; (80081ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	20000160 	.word	0x20000160

080081f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	4603      	mov	r3, r0
 80081f8:	6039      	str	r1, [r7, #0]
 80081fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80081fc:	79fb      	ldrb	r3, [r7, #7]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d105      	bne.n	800820e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008202:	683a      	ldr	r2, [r7, #0]
 8008204:	4907      	ldr	r1, [pc, #28]	; (8008224 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008206:	4808      	ldr	r0, [pc, #32]	; (8008228 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008208:	f7ff fdae 	bl	8007d68 <USBD_GetString>
 800820c:	e004      	b.n	8008218 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	4904      	ldr	r1, [pc, #16]	; (8008224 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008212:	4805      	ldr	r0, [pc, #20]	; (8008228 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008214:	f7ff fda8 	bl	8007d68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008218:	4b02      	ldr	r3, [pc, #8]	; (8008224 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800821a:	4618      	mov	r0, r3
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	20000d84 	.word	0x20000d84
 8008228:	08008958 	.word	0x08008958

0800822c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	4603      	mov	r3, r0
 8008234:	6039      	str	r1, [r7, #0]
 8008236:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008238:	79fb      	ldrb	r3, [r7, #7]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d105      	bne.n	800824a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	4907      	ldr	r1, [pc, #28]	; (8008260 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008242:	4808      	ldr	r0, [pc, #32]	; (8008264 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008244:	f7ff fd90 	bl	8007d68 <USBD_GetString>
 8008248:	e004      	b.n	8008254 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	4904      	ldr	r1, [pc, #16]	; (8008260 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800824e:	4805      	ldr	r0, [pc, #20]	; (8008264 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008250:	f7ff fd8a 	bl	8007d68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008254:	4b02      	ldr	r3, [pc, #8]	; (8008260 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008256:	4618      	mov	r0, r3
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	20000d84 	.word	0x20000d84
 8008264:	08008964 	.word	0x08008964

08008268 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800826e:	4b0f      	ldr	r3, [pc, #60]	; (80082ac <Get_SerialNum+0x44>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008274:	4b0e      	ldr	r3, [pc, #56]	; (80082b0 <Get_SerialNum+0x48>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800827a:	4b0e      	ldr	r3, [pc, #56]	; (80082b4 <Get_SerialNum+0x4c>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4413      	add	r3, r2
 8008286:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d009      	beq.n	80082a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800828e:	2208      	movs	r2, #8
 8008290:	4909      	ldr	r1, [pc, #36]	; (80082b8 <Get_SerialNum+0x50>)
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f000 f814 	bl	80082c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008298:	2204      	movs	r2, #4
 800829a:	4908      	ldr	r1, [pc, #32]	; (80082bc <Get_SerialNum+0x54>)
 800829c:	68b8      	ldr	r0, [r7, #8]
 800829e:	f000 f80f 	bl	80082c0 <IntToUnicode>
  }
}
 80082a2:	bf00      	nop
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	1ffff7e8 	.word	0x1ffff7e8
 80082b0:	1ffff7ec 	.word	0x1ffff7ec
 80082b4:	1ffff7f0 	.word	0x1ffff7f0
 80082b8:	20000162 	.word	0x20000162
 80082bc:	20000172 	.word	0x20000172

080082c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b087      	sub	sp, #28
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	4613      	mov	r3, r2
 80082cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80082ce:	2300      	movs	r3, #0
 80082d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80082d2:	2300      	movs	r3, #0
 80082d4:	75fb      	strb	r3, [r7, #23]
 80082d6:	e027      	b.n	8008328 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	0f1b      	lsrs	r3, r3, #28
 80082dc:	2b09      	cmp	r3, #9
 80082de:	d80b      	bhi.n	80082f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	0f1b      	lsrs	r3, r3, #28
 80082e4:	b2da      	uxtb	r2, r3
 80082e6:	7dfb      	ldrb	r3, [r7, #23]
 80082e8:	005b      	lsls	r3, r3, #1
 80082ea:	4619      	mov	r1, r3
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	440b      	add	r3, r1
 80082f0:	3230      	adds	r2, #48	; 0x30
 80082f2:	b2d2      	uxtb	r2, r2
 80082f4:	701a      	strb	r2, [r3, #0]
 80082f6:	e00a      	b.n	800830e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	0f1b      	lsrs	r3, r3, #28
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	7dfb      	ldrb	r3, [r7, #23]
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	4619      	mov	r1, r3
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	440b      	add	r3, r1
 8008308:	3237      	adds	r2, #55	; 0x37
 800830a:	b2d2      	uxtb	r2, r2
 800830c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	011b      	lsls	r3, r3, #4
 8008312:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008314:	7dfb      	ldrb	r3, [r7, #23]
 8008316:	005b      	lsls	r3, r3, #1
 8008318:	3301      	adds	r3, #1
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	4413      	add	r3, r2
 800831e:	2200      	movs	r2, #0
 8008320:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008322:	7dfb      	ldrb	r3, [r7, #23]
 8008324:	3301      	adds	r3, #1
 8008326:	75fb      	strb	r3, [r7, #23]
 8008328:	7dfa      	ldrb	r2, [r7, #23]
 800832a:	79fb      	ldrb	r3, [r7, #7]
 800832c:	429a      	cmp	r2, r3
 800832e:	d3d3      	bcc.n	80082d8 <IntToUnicode+0x18>
  }
}
 8008330:	bf00      	nop
 8008332:	bf00      	nop
 8008334:	371c      	adds	r7, #28
 8008336:	46bd      	mov	sp, r7
 8008338:	bc80      	pop	{r7}
 800833a:	4770      	bx	lr

0800833c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a0d      	ldr	r2, [pc, #52]	; (8008380 <HAL_PCD_MspInit+0x44>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d113      	bne.n	8008376 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800834e:	4b0d      	ldr	r3, [pc, #52]	; (8008384 <HAL_PCD_MspInit+0x48>)
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	4a0c      	ldr	r2, [pc, #48]	; (8008384 <HAL_PCD_MspInit+0x48>)
 8008354:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008358:	61d3      	str	r3, [r2, #28]
 800835a:	4b0a      	ldr	r3, [pc, #40]	; (8008384 <HAL_PCD_MspInit+0x48>)
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008362:	60fb      	str	r3, [r7, #12]
 8008364:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008366:	2200      	movs	r2, #0
 8008368:	2100      	movs	r1, #0
 800836a:	2014      	movs	r0, #20
 800836c:	f7f8 fcef 	bl	8000d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008370:	2014      	movs	r0, #20
 8008372:	f7f8 fd08 	bl	8000d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008376:	bf00      	nop
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	40005c00 	.word	0x40005c00
 8008384:	40021000 	.word	0x40021000

08008388 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800839c:	4619      	mov	r1, r3
 800839e:	4610      	mov	r0, r2
 80083a0:	f7fe fdb1 	bl	8006f06 <USBD_LL_SetupStage>
}
 80083a4:	bf00      	nop
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	460b      	mov	r3, r1
 80083b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80083be:	78fa      	ldrb	r2, [r7, #3]
 80083c0:	6879      	ldr	r1, [r7, #4]
 80083c2:	4613      	mov	r3, r2
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4413      	add	r3, r2
 80083c8:	00db      	lsls	r3, r3, #3
 80083ca:	440b      	add	r3, r1
 80083cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	78fb      	ldrb	r3, [r7, #3]
 80083d4:	4619      	mov	r1, r3
 80083d6:	f7fe fde3 	bl	8006fa0 <USBD_LL_DataOutStage>
}
 80083da:	bf00      	nop
 80083dc:	3708      	adds	r7, #8
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b082      	sub	sp, #8
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	460b      	mov	r3, r1
 80083ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80083f4:	78fa      	ldrb	r2, [r7, #3]
 80083f6:	6879      	ldr	r1, [r7, #4]
 80083f8:	4613      	mov	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	00db      	lsls	r3, r3, #3
 8008400:	440b      	add	r3, r1
 8008402:	333c      	adds	r3, #60	; 0x3c
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	78fb      	ldrb	r3, [r7, #3]
 8008408:	4619      	mov	r1, r3
 800840a:	f7fe fe3a 	bl	8007082 <USBD_LL_DataInStage>
}
 800840e:	bf00      	nop
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b082      	sub	sp, #8
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008424:	4618      	mov	r0, r3
 8008426:	f7fe ff4a 	bl	80072be <USBD_LL_SOF>
}
 800842a:	bf00      	nop
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b084      	sub	sp, #16
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800843a:	2301      	movs	r3, #1
 800843c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	2b02      	cmp	r3, #2
 8008444:	d001      	beq.n	800844a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008446:	f7f8 f9dd 	bl	8000804 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008450:	7bfa      	ldrb	r2, [r7, #15]
 8008452:	4611      	mov	r1, r2
 8008454:	4618      	mov	r0, r3
 8008456:	f7fe fefa 	bl	800724e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008460:	4618      	mov	r0, r3
 8008462:	f7fe feb3 	bl	80071cc <USBD_LL_Reset>
}
 8008466:	bf00      	nop
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
	...

08008470 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe fef4 	bl	800726c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d005      	beq.n	8008498 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800848c:	4b04      	ldr	r3, [pc, #16]	; (80084a0 <HAL_PCD_SuspendCallback+0x30>)
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	4a03      	ldr	r2, [pc, #12]	; (80084a0 <HAL_PCD_SuspendCallback+0x30>)
 8008492:	f043 0306 	orr.w	r3, r3, #6
 8008496:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008498:	bf00      	nop
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	e000ed00 	.word	0xe000ed00

080084a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fe feee 	bl	8007294 <USBD_LL_Resume>
}
 80084b8:	bf00      	nop
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80084c8:	4a28      	ldr	r2, [pc, #160]	; (800856c <USBD_LL_Init+0xac>)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a26      	ldr	r2, [pc, #152]	; (800856c <USBD_LL_Init+0xac>)
 80084d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80084d8:	4b24      	ldr	r3, [pc, #144]	; (800856c <USBD_LL_Init+0xac>)
 80084da:	4a25      	ldr	r2, [pc, #148]	; (8008570 <USBD_LL_Init+0xb0>)
 80084dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80084de:	4b23      	ldr	r3, [pc, #140]	; (800856c <USBD_LL_Init+0xac>)
 80084e0:	2208      	movs	r2, #8
 80084e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80084e4:	4b21      	ldr	r3, [pc, #132]	; (800856c <USBD_LL_Init+0xac>)
 80084e6:	2202      	movs	r2, #2
 80084e8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80084ea:	4b20      	ldr	r3, [pc, #128]	; (800856c <USBD_LL_Init+0xac>)
 80084ec:	2200      	movs	r2, #0
 80084ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80084f0:	4b1e      	ldr	r3, [pc, #120]	; (800856c <USBD_LL_Init+0xac>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80084f6:	4b1d      	ldr	r3, [pc, #116]	; (800856c <USBD_LL_Init+0xac>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80084fc:	481b      	ldr	r0, [pc, #108]	; (800856c <USBD_LL_Init+0xac>)
 80084fe:	f7f8 fdf9 	bl	80010f4 <HAL_PCD_Init>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d001      	beq.n	800850c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008508:	f7f8 f97c 	bl	8000804 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008512:	2318      	movs	r3, #24
 8008514:	2200      	movs	r2, #0
 8008516:	2100      	movs	r1, #0
 8008518:	f7fa fa6d 	bl	80029f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008522:	2358      	movs	r3, #88	; 0x58
 8008524:	2200      	movs	r2, #0
 8008526:	2180      	movs	r1, #128	; 0x80
 8008528:	f7fa fa65 	bl	80029f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008532:	23c0      	movs	r3, #192	; 0xc0
 8008534:	2200      	movs	r2, #0
 8008536:	2181      	movs	r1, #129	; 0x81
 8008538:	f7fa fa5d 	bl	80029f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008542:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008546:	2200      	movs	r2, #0
 8008548:	2101      	movs	r1, #1
 800854a:	f7fa fa54 	bl	80029f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008558:	2200      	movs	r2, #0
 800855a:	2182      	movs	r1, #130	; 0x82
 800855c:	f7fa fa4b 	bl	80029f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	20000f84 	.word	0x20000f84
 8008570:	40005c00 	.word	0x40005c00

08008574 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008580:	2300      	movs	r3, #0
 8008582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800858a:	4618      	mov	r0, r3
 800858c:	f7f8 febd 	bl	800130a <HAL_PCD_Start>
 8008590:	4603      	mov	r3, r0
 8008592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008594:	7bfb      	ldrb	r3, [r7, #15]
 8008596:	4618      	mov	r0, r3
 8008598:	f000 f94e 	bl	8008838 <USBD_Get_USB_Status>
 800859c:	4603      	mov	r3, r0
 800859e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b084      	sub	sp, #16
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	4608      	mov	r0, r1
 80085b4:	4611      	mov	r1, r2
 80085b6:	461a      	mov	r2, r3
 80085b8:	4603      	mov	r3, r0
 80085ba:	70fb      	strb	r3, [r7, #3]
 80085bc:	460b      	mov	r3, r1
 80085be:	70bb      	strb	r3, [r7, #2]
 80085c0:	4613      	mov	r3, r2
 80085c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085d2:	78bb      	ldrb	r3, [r7, #2]
 80085d4:	883a      	ldrh	r2, [r7, #0]
 80085d6:	78f9      	ldrb	r1, [r7, #3]
 80085d8:	f7f9 f835 	bl	8001646 <HAL_PCD_EP_Open>
 80085dc:	4603      	mov	r3, r0
 80085de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 f928 	bl	8008838 <USBD_Get_USB_Status>
 80085e8:	4603      	mov	r3, r0
 80085ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b084      	sub	sp, #16
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
 80085fe:	460b      	mov	r3, r1
 8008600:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008602:	2300      	movs	r3, #0
 8008604:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008610:	78fa      	ldrb	r2, [r7, #3]
 8008612:	4611      	mov	r1, r2
 8008614:	4618      	mov	r0, r3
 8008616:	f7f9 f87c 	bl	8001712 <HAL_PCD_EP_Close>
 800861a:	4603      	mov	r3, r0
 800861c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800861e:	7bfb      	ldrb	r3, [r7, #15]
 8008620:	4618      	mov	r0, r3
 8008622:	f000 f909 	bl	8008838 <USBD_Get_USB_Status>
 8008626:	4603      	mov	r3, r0
 8008628:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800862a:	7bbb      	ldrb	r3, [r7, #14]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	460b      	mov	r3, r1
 800863e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008644:	2300      	movs	r3, #0
 8008646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800864e:	78fa      	ldrb	r2, [r7, #3]
 8008650:	4611      	mov	r1, r2
 8008652:	4618      	mov	r0, r3
 8008654:	f7f9 f93c 	bl	80018d0 <HAL_PCD_EP_SetStall>
 8008658:	4603      	mov	r3, r0
 800865a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800865c:	7bfb      	ldrb	r3, [r7, #15]
 800865e:	4618      	mov	r0, r3
 8008660:	f000 f8ea 	bl	8008838 <USBD_Get_USB_Status>
 8008664:	4603      	mov	r3, r0
 8008666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008668:	7bbb      	ldrb	r3, [r7, #14]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b084      	sub	sp, #16
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	460b      	mov	r3, r1
 800867c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800868c:	78fa      	ldrb	r2, [r7, #3]
 800868e:	4611      	mov	r1, r2
 8008690:	4618      	mov	r0, r3
 8008692:	f7f9 f97d 	bl	8001990 <HAL_PCD_EP_ClrStall>
 8008696:	4603      	mov	r3, r0
 8008698:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800869a:	7bfb      	ldrb	r3, [r7, #15]
 800869c:	4618      	mov	r0, r3
 800869e:	f000 f8cb 	bl	8008838 <USBD_Get_USB_Status>
 80086a2:	4603      	mov	r3, r0
 80086a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	da0c      	bge.n	80086e6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086cc:	78fb      	ldrb	r3, [r7, #3]
 80086ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086d2:	68f9      	ldr	r1, [r7, #12]
 80086d4:	1c5a      	adds	r2, r3, #1
 80086d6:	4613      	mov	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4413      	add	r3, r2
 80086dc:	00db      	lsls	r3, r3, #3
 80086de:	440b      	add	r3, r1
 80086e0:	3302      	adds	r3, #2
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	e00b      	b.n	80086fe <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80086e6:	78fb      	ldrb	r3, [r7, #3]
 80086e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086ec:	68f9      	ldr	r1, [r7, #12]
 80086ee:	4613      	mov	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4413      	add	r3, r2
 80086f4:	00db      	lsls	r3, r3, #3
 80086f6:	440b      	add	r3, r1
 80086f8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80086fc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3714      	adds	r7, #20
 8008702:	46bd      	mov	sp, r7
 8008704:	bc80      	pop	{r7}
 8008706:	4770      	bx	lr

08008708 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	460b      	mov	r3, r1
 8008712:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008722:	78fa      	ldrb	r2, [r7, #3]
 8008724:	4611      	mov	r1, r2
 8008726:	4618      	mov	r0, r3
 8008728:	f7f8 ff68 	bl	80015fc <HAL_PCD_SetAddress>
 800872c:	4603      	mov	r3, r0
 800872e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008730:	7bfb      	ldrb	r3, [r7, #15]
 8008732:	4618      	mov	r0, r3
 8008734:	f000 f880 	bl	8008838 <USBD_Get_USB_Status>
 8008738:	4603      	mov	r3, r0
 800873a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800873c:	7bbb      	ldrb	r3, [r7, #14]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b086      	sub	sp, #24
 800874a:	af00      	add	r7, sp, #0
 800874c:	60f8      	str	r0, [r7, #12]
 800874e:	607a      	str	r2, [r7, #4]
 8008750:	461a      	mov	r2, r3
 8008752:	460b      	mov	r3, r1
 8008754:	72fb      	strb	r3, [r7, #11]
 8008756:	4613      	mov	r3, r2
 8008758:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800875e:	2300      	movs	r3, #0
 8008760:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008768:	893b      	ldrh	r3, [r7, #8]
 800876a:	7af9      	ldrb	r1, [r7, #11]
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	f7f9 f86c 	bl	800184a <HAL_PCD_EP_Transmit>
 8008772:	4603      	mov	r3, r0
 8008774:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008776:	7dfb      	ldrb	r3, [r7, #23]
 8008778:	4618      	mov	r0, r3
 800877a:	f000 f85d 	bl	8008838 <USBD_Get_USB_Status>
 800877e:	4603      	mov	r3, r0
 8008780:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008782:	7dbb      	ldrb	r3, [r7, #22]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3718      	adds	r7, #24
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	607a      	str	r2, [r7, #4]
 8008796:	461a      	mov	r2, r3
 8008798:	460b      	mov	r3, r1
 800879a:	72fb      	strb	r3, [r7, #11]
 800879c:	4613      	mov	r3, r2
 800879e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087ae:	893b      	ldrh	r3, [r7, #8]
 80087b0:	7af9      	ldrb	r1, [r7, #11]
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	f7f8 fff5 	bl	80017a2 <HAL_PCD_EP_Receive>
 80087b8:	4603      	mov	r3, r0
 80087ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087bc:	7dfb      	ldrb	r3, [r7, #23]
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 f83a 	bl	8008838 <USBD_Get_USB_Status>
 80087c4:	4603      	mov	r3, r0
 80087c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3718      	adds	r7, #24
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b082      	sub	sp, #8
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	460b      	mov	r3, r1
 80087dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087e4:	78fa      	ldrb	r2, [r7, #3]
 80087e6:	4611      	mov	r1, r2
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7f9 f817 	bl	800181c <HAL_PCD_EP_GetRxCount>
 80087ee:	4603      	mov	r3, r0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008800:	4b02      	ldr	r3, [pc, #8]	; (800880c <USBD_static_malloc+0x14>)
}
 8008802:	4618      	mov	r0, r3
 8008804:	370c      	adds	r7, #12
 8008806:	46bd      	mov	sp, r7
 8008808:	bc80      	pop	{r7}
 800880a:	4770      	bx	lr
 800880c:	20001270 	.word	0x20001270

08008810 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]

}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	bc80      	pop	{r7}
 8008820:	4770      	bx	lr

08008822 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008822:	b480      	push	{r7}
 8008824:	b083      	sub	sp, #12
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	460b      	mov	r3, r1
 800882c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800882e:	bf00      	nop
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	bc80      	pop	{r7}
 8008836:	4770      	bx	lr

08008838 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	4603      	mov	r3, r0
 8008840:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008842:	2300      	movs	r3, #0
 8008844:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008846:	79fb      	ldrb	r3, [r7, #7]
 8008848:	2b03      	cmp	r3, #3
 800884a:	d817      	bhi.n	800887c <USBD_Get_USB_Status+0x44>
 800884c:	a201      	add	r2, pc, #4	; (adr r2, 8008854 <USBD_Get_USB_Status+0x1c>)
 800884e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008852:	bf00      	nop
 8008854:	08008865 	.word	0x08008865
 8008858:	0800886b 	.word	0x0800886b
 800885c:	08008871 	.word	0x08008871
 8008860:	08008877 	.word	0x08008877
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008864:	2300      	movs	r3, #0
 8008866:	73fb      	strb	r3, [r7, #15]
    break;
 8008868:	e00b      	b.n	8008882 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800886a:	2302      	movs	r3, #2
 800886c:	73fb      	strb	r3, [r7, #15]
    break;
 800886e:	e008      	b.n	8008882 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008870:	2301      	movs	r3, #1
 8008872:	73fb      	strb	r3, [r7, #15]
    break;
 8008874:	e005      	b.n	8008882 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008876:	2302      	movs	r3, #2
 8008878:	73fb      	strb	r3, [r7, #15]
    break;
 800887a:	e002      	b.n	8008882 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800887c:	2302      	movs	r3, #2
 800887e:	73fb      	strb	r3, [r7, #15]
    break;
 8008880:	bf00      	nop
  }
  return usb_status;
 8008882:	7bfb      	ldrb	r3, [r7, #15]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	bc80      	pop	{r7}
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop

08008890 <__libc_init_array>:
 8008890:	b570      	push	{r4, r5, r6, lr}
 8008892:	2600      	movs	r6, #0
 8008894:	4d0c      	ldr	r5, [pc, #48]	; (80088c8 <__libc_init_array+0x38>)
 8008896:	4c0d      	ldr	r4, [pc, #52]	; (80088cc <__libc_init_array+0x3c>)
 8008898:	1b64      	subs	r4, r4, r5
 800889a:	10a4      	asrs	r4, r4, #2
 800889c:	42a6      	cmp	r6, r4
 800889e:	d109      	bne.n	80088b4 <__libc_init_array+0x24>
 80088a0:	f000 f830 	bl	8008904 <_init>
 80088a4:	2600      	movs	r6, #0
 80088a6:	4d0a      	ldr	r5, [pc, #40]	; (80088d0 <__libc_init_array+0x40>)
 80088a8:	4c0a      	ldr	r4, [pc, #40]	; (80088d4 <__libc_init_array+0x44>)
 80088aa:	1b64      	subs	r4, r4, r5
 80088ac:	10a4      	asrs	r4, r4, #2
 80088ae:	42a6      	cmp	r6, r4
 80088b0:	d105      	bne.n	80088be <__libc_init_array+0x2e>
 80088b2:	bd70      	pop	{r4, r5, r6, pc}
 80088b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80088b8:	4798      	blx	r3
 80088ba:	3601      	adds	r6, #1
 80088bc:	e7ee      	b.n	800889c <__libc_init_array+0xc>
 80088be:	f855 3b04 	ldr.w	r3, [r5], #4
 80088c2:	4798      	blx	r3
 80088c4:	3601      	adds	r6, #1
 80088c6:	e7f2      	b.n	80088ae <__libc_init_array+0x1e>
 80088c8:	08008984 	.word	0x08008984
 80088cc:	08008984 	.word	0x08008984
 80088d0:	08008984 	.word	0x08008984
 80088d4:	08008988 	.word	0x08008988

080088d8 <memcpy>:
 80088d8:	440a      	add	r2, r1
 80088da:	4291      	cmp	r1, r2
 80088dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80088e0:	d100      	bne.n	80088e4 <memcpy+0xc>
 80088e2:	4770      	bx	lr
 80088e4:	b510      	push	{r4, lr}
 80088e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088ea:	4291      	cmp	r1, r2
 80088ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088f0:	d1f9      	bne.n	80088e6 <memcpy+0xe>
 80088f2:	bd10      	pop	{r4, pc}

080088f4 <memset>:
 80088f4:	4603      	mov	r3, r0
 80088f6:	4402      	add	r2, r0
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d100      	bne.n	80088fe <memset+0xa>
 80088fc:	4770      	bx	lr
 80088fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008902:	e7f9      	b.n	80088f8 <memset+0x4>

08008904 <_init>:
 8008904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008906:	bf00      	nop
 8008908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800890a:	bc08      	pop	{r3}
 800890c:	469e      	mov	lr, r3
 800890e:	4770      	bx	lr

08008910 <_fini>:
 8008910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008912:	bf00      	nop
 8008914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008916:	bc08      	pop	{r3}
 8008918:	469e      	mov	lr, r3
 800891a:	4770      	bx	lr
